
5202Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c3c4  08010980  08010980  00020980  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cd44  0801cd44  00030b8c  2**0
                  CONTENTS
  4 .ARM          00000008  0801cd44  0801cd44  0002cd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cd4c  0801cd4c  00030b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cd4c  0801cd4c  0002cd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cd50  0801cd50  0002cd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b8c  20000000  0801cd54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001810  20000b8c  0801d8e0  00030b8c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000239c  0801d8e0  0003239c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030b8c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037218  00000000  00000000  00030bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eaa  00000000  00000000  00067dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f58  00000000  00000000  0006cc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d38  00000000  00000000  0006fbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d079  00000000  00000000  00072910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aa0f  00000000  00000000  0009f989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115a7e  00000000  00000000  000ca398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dfe16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e1e4  00000000  00000000  001dfe68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  001ee04c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  001ee100  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000b8c 	.word	0x20000b8c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801094c 	.word	0x0801094c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000b90 	.word	0x20000b90
 80001cc:	0801094c 	.word	0x0801094c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b09c      	sub	sp, #112	; 0x70
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f005 f99f 	bl	80061f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 fd27 	bl	8001908 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  float humidity = 0.0f;
 8000eba:	f04f 0300 	mov.w	r3, #0
 8000ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  float temperature = 0.0f;
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec6:	f000 fecd 	bl	8001c64 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000eca:	f000 fda1 	bl	8001a10 <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 8000ece:	f000 fdd7 	bl	8001a80 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000ed2:	f000 fdfb 	bl	8001acc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000ed6:	f000 fe37 	bl	8001b48 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000eda:	f000 fe65 	bl	8001ba8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ede:	f000 fe93 	bl	8001c08 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 8000ee2:	f000 fd73 	bl	80019cc <MX_CRC_Init>
  Timer_Init();
 8000ee6:	f000 fcad 	bl	8001844 <Timer_Init>

  /* USER CODE BEGIN 2 */
  dataRdyIntReceived = 0;
 8000eea:	4bbd      	ldr	r3, [pc, #756]	; (80011e0 <main+0x334>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
  MEMS_Init();
 8000ef0:	f001 f90e 	bl	8002110 <MEMS_Init>
  AI_Init();
 8000ef4:	f001 f868 	bl	8001fc8 <AI_Init>
  PRESSURE_Init(); // 初始化压力传感器
 8000ef8:	f001 f954 	bl	80021a4 <PRESSURE_Init>
  HTS221_Init_Custom();
 8000efc:	f001 f99a 	bl	8002234 <HTS221_Init_Custom>
  LIS3MDL_Init_Custom();
 8000f00:	f001 f9ec 	bl	80022dc <LIS3MDL_Init_Custom>

  // 获取系统核心时钟频率
  uint32_t sysclk_freq = HAL_RCC_GetHCLKFreq();
 8000f04:	f007 fe46 	bl	8008b94 <HAL_RCC_GetHCLKFreq>
 8000f08:	6638      	str	r0, [r7, #96]	; 0x60

  // 定时器预分频器
  uint32_t prescaler = htim2.Init.Prescaler + 1; // 实际的预分频值需要加1
 8000f0a:	4bb6      	ldr	r3, [pc, #728]	; (80011e4 <main+0x338>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	65fb      	str	r3, [r7, #92]	; 0x5c

  // 计算定时器频率
  uint32_t tim_freq = sysclk_freq / prescaler;
 8000f12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	65bb      	str	r3, [r7, #88]	; 0x58

  printf("TIM2 Frequency: %lu Hz\n", tim_freq);
 8000f1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000f1e:	48b2      	ldr	r0, [pc, #712]	; (80011e8 <main+0x33c>)
 8000f20:	f00d f8f8 	bl	800e114 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t write_index = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	66fb      	str	r3, [r7, #108]	; 0x6c
  float hts221Frequence = 0.0;
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	633b      	str	r3, [r7, #48]	; 0x30
  HTS221_HUM_GetOutputDataRate(&HTS221Sensor, &hts221Frequence);
 8000f2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f32:	4619      	mov	r1, r3
 8000f34:	48ad      	ldr	r0, [pc, #692]	; (80011ec <main+0x340>)
 8000f36:	f001 ffc9 	bl	8002ecc <HTS221_HUM_GetOutputDataRate>
  printf("f of HTS221_HUM: %.2f", hts221Frequence);
 8000f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fb03 	bl	8000548 <__aeabi_f2d>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	48aa      	ldr	r0, [pc, #680]	; (80011f0 <main+0x344>)
 8000f48:	f00d f8e4 	bl	800e114 <iprintf>

  float hts221TEMPFrequence = 0.0;
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HTS221_TEMP_GetOutputDataRate(&HTS221Sensor, &hts221TEMPFrequence);
 8000f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f56:	4619      	mov	r1, r3
 8000f58:	48a4      	ldr	r0, [pc, #656]	; (80011ec <main+0x340>)
 8000f5a:	f002 f84d 	bl	8002ff8 <HTS221_TEMP_GetOutputDataRate>
  printf("f of HTS221_TEMP: %.2f", hts221TEMPFrequence);
 8000f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff faf1 	bl	8000548 <__aeabi_f2d>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	48a2      	ldr	r0, [pc, #648]	; (80011f4 <main+0x348>)
 8000f6c:	f00d f8d2 	bl	800e114 <iprintf>

  float is3mdFrequence = 0.0;
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
  LIS3MDL_MAG_GetOutputDataRate(&LIS3MDLSensor, &is3mdFrequence);
 8000f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	489e      	ldr	r0, [pc, #632]	; (80011f8 <main+0x34c>)
 8000f7e:	f002 fd4b 	bl	8003a18 <LIS3MDL_MAG_GetOutputDataRate>
  printf("f of LIS3MDL: %.2f", is3mdFrequence);
 8000f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fadf 	bl	8000548 <__aeabi_f2d>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	489b      	ldr	r0, [pc, #620]	; (80011fc <main+0x350>)
 8000f90:	f00d f8c0 	bl	800e114 <iprintf>
  float lp22hbFrequence = 0.0;
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  LPS22HB_PRESS_GetOutputDataRate(&PressureSensor, &lp22hbFrequence);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4897      	ldr	r0, [pc, #604]	; (8001200 <main+0x354>)
 8000fa2:	f003 face 	bl	8004542 <LPS22HB_PRESS_GetOutputDataRate>
  printf("f of LPS22HB: %.2f", lp22hbFrequence);
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff facd 	bl	8000548 <__aeabi_f2d>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4894      	ldr	r0, [pc, #592]	; (8001204 <main+0x358>)
 8000fb4:	f00d f8ae 	bl	800e114 <iprintf>
  float lsm6dsl_acc_frequence = 0.0;
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  LSM6DSL_ACC_GetOutputDataRate(&MotionSensor, &lsm6dsl_acc_frequence);
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4890      	ldr	r0, [pc, #576]	; (8001208 <main+0x35c>)
 8000fc6:	f003 ffbd 	bl	8004f44 <LSM6DSL_ACC_GetOutputDataRate>
  printf("f of  LSM6DS_ACC: %.2f", lsm6dsl_acc_frequence);
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fabb 	bl	8000548 <__aeabi_f2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	488d      	ldr	r0, [pc, #564]	; (800120c <main+0x360>)
 8000fd8:	f00d f89c 	bl	800e114 <iprintf>

  float lsm6dsl_gyro_frequence = 0.0;
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  LSM6DSL_GYRO_GetOutputDataRate(&MotionSensor, &lsm6dsl_gyro_frequence);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4887      	ldr	r0, [pc, #540]	; (8001208 <main+0x35c>)
 8000fea:	f004 f941 	bl	8005270 <LSM6DSL_GYRO_GetOutputDataRate>
  printf("f of  LSM6DS_gyro: %.2f", lsm6dsl_gyro_frequence);
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff faa9 	bl	8000548 <__aeabi_f2d>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4885      	ldr	r0, [pc, #532]	; (8001210 <main+0x364>)
 8000ffc:	f00d f88a 	bl	800e114 <iprintf>
  int slot = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	66bb      	str	r3, [r7, #104]	; 0x68
  while (1)
  {

      LIS3MDL_Axes_t magnetic_axes;
      Timer_Start();
 8001004:	f000 fc5c 	bl	80018c0 <Timer_Start>
//      HTS221_HUM_GetHumidity(&HTS221Sensor, &humidity);
//      uint32_t hts_elapsedTime = Timer_Stop();
//      float humidity = 0.0f;
//      float temperature = 0.0f;
//      printf("poll execution clock: %d \n", hts_elapsedTime);
      if(slot == 3){
 8001008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800100a:	2b03      	cmp	r3, #3
 800100c:	d10b      	bne.n	8001026 <main+0x17a>
    	  HTS221_HUM_GetHumidity(&HTS221Sensor, &humidity);
 800100e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001012:	4619      	mov	r1, r3
 8001014:	4875      	ldr	r0, [pc, #468]	; (80011ec <main+0x340>)
 8001016:	f001 ff67 	bl	8002ee8 <HTS221_HUM_GetHumidity>
    	  HTS221_TEMP_GetTemperature(&HTS221Sensor, &temperature);
 800101a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800101e:	4619      	mov	r1, r3
 8001020:	4872      	ldr	r0, [pc, #456]	; (80011ec <main+0x340>)
 8001022:	f001 fff7 	bl	8003014 <HTS221_TEMP_GetTemperature>
      }
      int slotD10 = slot % 10;
 8001026:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001028:	4b7a      	ldr	r3, [pc, #488]	; (8001214 <main+0x368>)
 800102a:	fb83 1302 	smull	r1, r3, r3, r2
 800102e:	1099      	asrs	r1, r3, #2
 8001030:	17d3      	asrs	r3, r2, #31
 8001032:	1ac9      	subs	r1, r1, r3
 8001034:	460b      	mov	r3, r1
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	657b      	str	r3, [r7, #84]	; 0x54
      if(slotD10 == 0){
 8001040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001042:	2b00      	cmp	r3, #0
 8001044:	d142      	bne.n	80010cc <main+0x220>
    	  LSM6DSL_Axes_t acc_axes;
    	  LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	486f      	ldr	r0, [pc, #444]	; (8001208 <main+0x35c>)
 800104c:	f004 f866 	bl	800511c <LSM6DSL_ACC_GetAxes>
    //	  printf("% 5d, % 5d, % 5d\r\n",  (int) acc_axes.x, (int) acc_axes.y, (int) acc_axes.z);

          /* Normalize data to [-1; 1] and accumulate into input buffer */
          /* Note: window overlapping can be managed here */
          aiInData[write_index + 0] = (float) acc_axes.x / 4000.0f;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8001218 <main+0x36c>
 800105e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001062:	4a6e      	ldr	r2, [pc, #440]	; (800121c <main+0x370>)
 8001064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	edc3 7a00 	vstr	s15, [r3]
          aiInData[write_index + 1] = (float) acc_axes.y / 4000.0f;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800107a:	3301      	adds	r3, #1
 800107c:	eddf 6a66 	vldr	s13, [pc, #408]	; 8001218 <main+0x36c>
 8001080:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001084:	4a65      	ldr	r2, [pc, #404]	; (800121c <main+0x370>)
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	edc3 7a00 	vstr	s15, [r3]
          aiInData[write_index + 2] = (float) acc_axes.z / 4000.0f;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800109a:	3302      	adds	r3, #2
 800109c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001218 <main+0x36c>
 80010a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a4:	4a5d      	ldr	r2, [pc, #372]	; (800121c <main+0x370>)
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	edc3 7a00 	vstr	s15, [r3]
          write_index += 3;
 80010ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010b0:	3303      	adds	r3, #3
 80010b2:	66fb      	str	r3, [r7, #108]	; 0x6c
          // 3 * 25
          write_index %= 75;
 80010b4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80010b6:	4b5a      	ldr	r3, [pc, #360]	; (8001220 <main+0x374>)
 80010b8:	fba3 2301 	umull	r2, r3, r3, r1
 80010bc:	08da      	lsrs	r2, r3, #3
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	011a      	lsls	r2, r3, #4
 80010c6:	1ad2      	subs	r2, r2, r3
 80010c8:	1a8b      	subs	r3, r1, r2
 80010ca:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      if(slotD10 == 1){
 80010cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d11f      	bne.n	8001112 <main+0x266>
    	  LSM6DSL_GYRO_GetAxes(&MotionSensor, &angular_velocity);
 80010d2:	4954      	ldr	r1, [pc, #336]	; (8001224 <main+0x378>)
 80010d4:	484c      	ldr	r0, [pc, #304]	; (8001208 <main+0x35c>)
 80010d6:	f004 f947 	bl	8005368 <LSM6DSL_GYRO_GetAxes>
    	  angularVelocityBuffer[angularCount ++] = angular_velocity;
 80010da:	4b53      	ldr	r3, [pc, #332]	; (8001228 <main+0x37c>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	1c53      	adds	r3, r2, #1
 80010e0:	4951      	ldr	r1, [pc, #324]	; (8001228 <main+0x37c>)
 80010e2:	600b      	str	r3, [r1, #0]
 80010e4:	4951      	ldr	r1, [pc, #324]	; (800122c <main+0x380>)
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	4a4c      	ldr	r2, [pc, #304]	; (8001224 <main+0x378>)
 80010f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80010f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    	  angularCount %= 40;
 80010f8:	4b4b      	ldr	r3, [pc, #300]	; (8001228 <main+0x37c>)
 80010fa:	6819      	ldr	r1, [r3, #0]
 80010fc:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <main+0x384>)
 80010fe:	fba3 2301 	umull	r2, r3, r3, r1
 8001102:	095a      	lsrs	r2, r3, #5
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	1aca      	subs	r2, r1, r3
 800110e:	4b46      	ldr	r3, [pc, #280]	; (8001228 <main+0x37c>)
 8001110:	601a      	str	r2, [r3, #0]
      }
      if(slotD10 == 2){
 8001112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001114:	2b02      	cmp	r3, #2
 8001116:	d11b      	bne.n	8001150 <main+0x2a4>
    	  LPS22HB_PRESS_GetPressure(&PressureSensor, &pressure);
 8001118:	4946      	ldr	r1, [pc, #280]	; (8001234 <main+0x388>)
 800111a:	4839      	ldr	r0, [pc, #228]	; (8001200 <main+0x354>)
 800111c:	f003 fa3b 	bl	8004596 <LPS22HB_PRESS_GetPressure>
    	  pressureBuffer[pressureCount ++] = pressure;
 8001120:	4b45      	ldr	r3, [pc, #276]	; (8001238 <main+0x38c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	4944      	ldr	r1, [pc, #272]	; (8001238 <main+0x38c>)
 8001128:	600a      	str	r2, [r1, #0]
 800112a:	4a42      	ldr	r2, [pc, #264]	; (8001234 <main+0x388>)
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	4943      	ldr	r1, [pc, #268]	; (800123c <main+0x390>)
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	601a      	str	r2, [r3, #0]
    	  pressureCount %= 40;
 8001136:	4b40      	ldr	r3, [pc, #256]	; (8001238 <main+0x38c>)
 8001138:	6819      	ldr	r1, [r3, #0]
 800113a:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <main+0x384>)
 800113c:	fba3 2301 	umull	r2, r3, r3, r1
 8001140:	095a      	lsrs	r2, r3, #5
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	1aca      	subs	r2, r1, r3
 800114c:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <main+0x38c>)
 800114e:	601a      	str	r2, [r3, #0]
      }
      int slotD5 = slot % 5;
 8001150:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <main+0x368>)
 8001154:	fb83 1302 	smull	r1, r3, r3, r2
 8001158:	1059      	asrs	r1, r3, #1
 800115a:	17d3      	asrs	r3, r2, #31
 800115c:	1ac9      	subs	r1, r1, r3
 800115e:	460b      	mov	r3, r1
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	653b      	str	r3, [r7, #80]	; 0x50
      if(slotD5 == 4 && slot!=394){
 8001168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800116a:	2b04      	cmp	r3, #4
 800116c:	d128      	bne.n	80011c0 <main+0x314>
 800116e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001170:	f5b3 7fc5 	cmp.w	r3, #394	; 0x18a
 8001174:	d024      	beq.n	80011c0 <main+0x314>
    	  LIS3MDL_MAG_GetAxes(&LIS3MDLSensor, &magnetic_axes);
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4619      	mov	r1, r3
 800117c:	481e      	ldr	r0, [pc, #120]	; (80011f8 <main+0x34c>)
 800117e:	f002 fdc3 	bl	8003d08 <LIS3MDL_MAG_GetAxes>
    	  magneticBuffer[magneticCount++] = magnetic_axes;
 8001182:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <main+0x394>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	1c53      	adds	r3, r2, #1
 8001188:	492d      	ldr	r1, [pc, #180]	; (8001240 <main+0x394>)
 800118a:	600b      	str	r3, [r1, #0]
 800118c:	492d      	ldr	r1, [pc, #180]	; (8001244 <main+0x398>)
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	461c      	mov	r4, r3
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  magneticCount %= 80;
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <main+0x394>)
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <main+0x384>)
 80011ac:	fba3 2301 	umull	r2, r3, r3, r1
 80011b0:	099a      	lsrs	r2, r3, #6
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	1aca      	subs	r2, r1, r3
 80011bc:	4b20      	ldr	r3, [pc, #128]	; (8001240 <main+0x394>)
 80011be:	601a      	str	r2, [r3, #0]
      }
      if(slot == 393){
 80011c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011c2:	f240 1289 	movw	r2, #393	; 0x189
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d164      	bne.n	8001294 <main+0x3e8>
    	  // 执行推理
          printf("Running inference\r\n");
 80011ca:	481f      	ldr	r0, [pc, #124]	; (8001248 <main+0x39c>)
 80011cc:	f00d f828 	bl	800e220 <puts>
          AI_Run(aiInData, aiOutData);
 80011d0:	491e      	ldr	r1, [pc, #120]	; (800124c <main+0x3a0>)
 80011d2:	4812      	ldr	r0, [pc, #72]	; (800121c <main+0x370>)
 80011d4:	f000 ff34 	bl	8002040 <AI_Run>

          /* Output results */
          for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	667b      	str	r3, [r7, #100]	; 0x64
 80011dc:	e038      	b.n	8001250 <main+0x3a4>
 80011de:	bf00      	nop
 80011e0:	20000be0 	.word	0x20000be0
 80011e4:	200013a8 	.word	0x200013a8
 80011e8:	0801099c 	.word	0x0801099c
 80011ec:	20000bf0 	.word	0x20000bf0
 80011f0:	080109b4 	.word	0x080109b4
 80011f4:	080109cc 	.word	0x080109cc
 80011f8:	20000c24 	.word	0x20000c24
 80011fc:	080109e4 	.word	0x080109e4
 8001200:	20000ba8 	.word	0x20000ba8
 8001204:	080109f8 	.word	0x080109f8
 8001208:	20001370 	.word	0x20001370
 800120c:	08010a0c 	.word	0x08010a0c
 8001210:	08010a24 	.word	0x08010a24
 8001214:	66666667 	.word	0x66666667
 8001218:	457a0000 	.word	0x457a0000
 800121c:	200013f8 	.word	0x200013f8
 8001220:	1b4e81b5 	.word	0x1b4e81b5
 8001224:	20000be4 	.word	0x20000be4
 8001228:	20002230 	.word	0x20002230
 800122c:	20001c90 	.word	0x20001c90
 8001230:	cccccccd 	.word	0xcccccccd
 8001234:	20000bdc 	.word	0x20000bdc
 8001238:	20002234 	.word	0x20002234
 800123c:	20001bf0 	.word	0x20001bf0
 8001240:	20002238 	.word	0x20002238
 8001244:	20001e70 	.word	0x20001e70
 8001248:	08010a3c 	.word	0x08010a3c
 800124c:	20001530 	.word	0x20001530
 8001250:	e00f      	b.n	8001272 <main+0x3c6>
            printf("%8.6f ", aiOutData[i]);
 8001252:	4a3b      	ldr	r2, [pc, #236]	; (8001340 <main+0x494>)
 8001254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f973 	bl	8000548 <__aeabi_f2d>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4837      	ldr	r0, [pc, #220]	; (8001344 <main+0x498>)
 8001268:	f00c ff54 	bl	800e114 <iprintf>
          for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 800126c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800126e:	3301      	adds	r3, #1
 8001270:	667b      	str	r3, [r7, #100]	; 0x64
 8001272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001274:	2b02      	cmp	r3, #2
 8001276:	d9ec      	bls.n	8001252 <main+0x3a6>
          }
          uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8001278:	2103      	movs	r1, #3
 800127a:	4831      	ldr	r0, [pc, #196]	; (8001340 <main+0x494>)
 800127c:	f000 ff18 	bl	80020b0 <argmax>
 8001280:	64f8      	str	r0, [r7, #76]	; 0x4c
          printf(": %d - %s\r\n", (int) class, activities[class]);
 8001282:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001284:	4a30      	ldr	r2, [pc, #192]	; (8001348 <main+0x49c>)
 8001286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128c:	461a      	mov	r2, r3
 800128e:	482f      	ldr	r0, [pc, #188]	; (800134c <main+0x4a0>)
 8001290:	f00c ff40 	bl	800e114 <iprintf>
      }
      if(slot == 383){
 8001294:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001296:	f240 127f 	movw	r2, #383	; 0x17f
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <main+0x3f6>
    	  // output data
    	  printArrays();
 800129e:	f000 f85d 	bl	800135c <printArrays>
      }
      slot ++;
 80012a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012a4:	3301      	adds	r3, #1
 80012a6:	66bb      	str	r3, [r7, #104]	; 0x68
      slot %= 400;
 80012a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012aa:	4a29      	ldr	r2, [pc, #164]	; (8001350 <main+0x4a4>)
 80012ac:	fb82 1203 	smull	r1, r2, r2, r3
 80012b0:	11d1      	asrs	r1, r2, #7
 80012b2:	17da      	asrs	r2, r3, #31
 80012b4:	1a8a      	subs	r2, r1, r2
 80012b6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80012ba:	fb01 f202 	mul.w	r2, r1, r2
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	66bb      	str	r3, [r7, #104]	; 0x68
      uint32_t clockNum = Timer_Stop();
 80012c2:	f000 fb0b 	bl	80018dc <Timer_Stop>
 80012c6:	64b8      	str	r0, [r7, #72]	; 0x48
//      printf("clockNum %.d  \r\n",clockNum);

      double costTime = ((double)clockNum) / tim_freq ;
 80012c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80012ca:	f7ff f91b 	bl	8000504 <__aeabi_ui2d>
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80012d4:	f7ff f916 	bl	8000504 <__aeabi_ui2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4620      	mov	r0, r4
 80012de:	4629      	mov	r1, r5
 80012e0:	f7ff fab4 	bl	800084c <__aeabi_ddiv>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      int roundedUp = (int)ceil(costTime);
 80012ec:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80012f0:	f00f f93a 	bl	8010568 <ceil>
 80012f4:	ec53 2b10 	vmov	r2, r3, d0
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fc2c 	bl	8000b58 <__aeabi_d2iz>
 8001300:	4603      	mov	r3, r0
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c

//      printf("executing time %.2e ms \r\n", costTime * 1000);
      HAL_Delay(costTime >= 1.5? 0 : (int)(2.5 -costTime));
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <main+0x4a8>)
 800130a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800130e:	f7ff fbf9 	bl	8000b04 <__aeabi_dcmpge>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <main+0x470>
 8001318:	2300      	movs	r3, #0
 800131a:	e00d      	b.n	8001338 <main+0x48c>
 800131c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001320:	f04f 0000 	mov.w	r0, #0
 8001324:	490c      	ldr	r1, [pc, #48]	; (8001358 <main+0x4ac>)
 8001326:	f7fe ffaf 	bl	8000288 <__aeabi_dsub>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fc11 	bl	8000b58 <__aeabi_d2iz>
 8001336:	4603      	mov	r3, r0
 8001338:	4618      	mov	r0, r3
 800133a:	f004 ffcf 	bl	80062dc <HAL_Delay>
  {
 800133e:	e661      	b.n	8001004 <main+0x158>
 8001340:	20001530 	.word	0x20001530
 8001344:	08010a50 	.word	0x08010a50
 8001348:	20000000 	.word	0x20000000
 800134c:	08010a58 	.word	0x08010a58
 8001350:	51eb851f 	.word	0x51eb851f
 8001354:	3ff80000 	.word	0x3ff80000
 8001358:	40040000 	.word	0x40040000

0800135c <printArrays>:
  }
  /* USER CODE END 3 */
}

//void printArrays(float* anglarSpeed, int size1, float* pressureArr, int size2, float* magneticArr, int size3, float* speedArr, int size4) {
void printArrays() {
 800135c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001360:	b09a      	sub	sp, #104	; 0x68
 8001362:	af06      	add	r7, sp, #24
	LSM6DSL_Axes_t* anglarSpeed = angularVelocityBuffer;
 8001364:	4b8c      	ldr	r3, [pc, #560]	; (8001598 <printArrays+0x23c>)
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
    int bufferSize = 1024;
 8001368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136c:	64fb      	str	r3, [r7, #76]	; 0x4c
	int size1 = 40;
 800136e:	2328      	movs	r3, #40	; 0x28
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
    char* result = malloc(bufferSize); // 初始分配
 8001372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001374:	4618      	mov	r0, r3
 8001376:	f00c f95d 	bl	800d634 <malloc>
 800137a:	4603      	mov	r3, r0
 800137c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (!result) {
 800137e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001380:	2b00      	cmp	r3, #0
 8001382:	d103      	bne.n	800138c <printArrays+0x30>
        printf("Memory allocation failed\n");
 8001384:	4885      	ldr	r0, [pc, #532]	; (800159c <printArrays+0x240>)
 8001386:	f00c ff4b 	bl	800e220 <puts>
        return;
 800138a:	e245      	b.n	8001818 <printArrays+0x4bc>
    }
    result[0] = '\0'; // 初始化为空字符串
 800138c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]

    int usedLength = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	647b      	str	r3, [r7, #68]	; 0x44
    int tem_written =  snprintf(result + usedLength, bufferSize - usedLength, "\r\n angular speed data:");
 8001396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800139a:	18d0      	adds	r0, r2, r3
 800139c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800139e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4a7f      	ldr	r2, [pc, #508]	; (80015a0 <printArrays+0x244>)
 80013a4:	4619      	mov	r1, r3
 80013a6:	f00c ff5b 	bl	800e260 <sniprintf>
 80013aa:	62b8      	str	r0, [r7, #40]	; 0x28
    if (usedLength >= bufferSize - 1) { // 检查是否需要扩展缓冲区
 80013ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013b2:	429a      	cmp	r2, r3
 80013b4:	db0f      	blt.n	80013d6 <printArrays+0x7a>
        bufferSize *= 2;
 80013b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	64fb      	str	r3, [r7, #76]	; 0x4c
        result = realloc(result, bufferSize);
 80013bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013be:	4619      	mov	r1, r3
 80013c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80013c2:	f00c ff35 	bl	800e230 <realloc>
 80013c6:	64b8      	str	r0, [r7, #72]	; 0x48
        if (!result) {
 80013c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d103      	bne.n	80013d6 <printArrays+0x7a>
            printf("Memory reallocation failed\n");
 80013ce:	4875      	ldr	r0, [pc, #468]	; (80015a4 <printArrays+0x248>)
 80013d0:	f00c ff26 	bl	800e220 <puts>
            return;
 80013d4:	e220      	b.n	8001818 <printArrays+0x4bc>
        }
    }
    usedLength += tem_written; // 更新已使用的长度
 80013d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013da:	4413      	add	r3, r2
 80013dc:	647b      	str	r3, [r7, #68]	; 0x44
    for (int i = 0; i < size1; ++i) {
 80013de:	2300      	movs	r3, #0
 80013e0:	643b      	str	r3, [r7, #64]	; 0x40
 80013e2:	e045      	b.n	8001470 <printArrays+0x114>
        int written = snprintf(result + usedLength, bufferSize - usedLength, "x:%.2f y:%.2f z:%.2f,", anglarSpeed[i].x,  anglarSpeed[i].y,  anglarSpeed[i].z);
 80013e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013e8:	18d0      	adds	r0, r2, r3
 80013ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80013ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	461d      	mov	r5, r3
 80013f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	461a      	mov	r2, r3
 80013fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001400:	4413      	add	r3, r2
 8001402:	681c      	ldr	r4, [r3, #0]
 8001404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	461a      	mov	r2, r3
 8001410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001412:	4413      	add	r3, r2
 8001414:	6859      	ldr	r1, [r3, #4]
 8001416:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	461a      	mov	r2, r3
 8001422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001424:	4413      	add	r3, r2
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	9100      	str	r1, [sp, #0]
 800142c:	4623      	mov	r3, r4
 800142e:	4a5e      	ldr	r2, [pc, #376]	; (80015a8 <printArrays+0x24c>)
 8001430:	4629      	mov	r1, r5
 8001432:	f00c ff15 	bl	800e260 <sniprintf>
 8001436:	6038      	str	r0, [r7, #0]
        usedLength += written; // 更新已使用的长度
 8001438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	4413      	add	r3, r2
 800143e:	647b      	str	r3, [r7, #68]	; 0x44
        if (usedLength >= bufferSize - 1) { // 检查是否需要扩展缓冲区
 8001440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001442:	3b01      	subs	r3, #1
 8001444:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001446:	429a      	cmp	r2, r3
 8001448:	db0f      	blt.n	800146a <printArrays+0x10e>
            bufferSize *= 2;
 800144a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	64fb      	str	r3, [r7, #76]	; 0x4c
            result = realloc(result, bufferSize);
 8001450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001452:	4619      	mov	r1, r3
 8001454:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001456:	f00c feeb 	bl	800e230 <realloc>
 800145a:	64b8      	str	r0, [r7, #72]	; 0x48
            if (!result) {
 800145c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800145e:	2b00      	cmp	r3, #0
 8001460:	d103      	bne.n	800146a <printArrays+0x10e>
                printf("Memory reallocation failed\n");
 8001462:	4850      	ldr	r0, [pc, #320]	; (80015a4 <printArrays+0x248>)
 8001464:	f00c fedc 	bl	800e220 <puts>
                return;
 8001468:	e1d6      	b.n	8001818 <printArrays+0x4bc>
    for (int i = 0; i < size1; ++i) {
 800146a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800146c:	3301      	adds	r3, #1
 800146e:	643b      	str	r3, [r7, #64]	; 0x40
 8001470:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001474:	429a      	cmp	r2, r3
 8001476:	dbb5      	blt.n	80013e4 <printArrays+0x88>
            }
        }
    }
    float* pressureArr = pressureBuffer;
 8001478:	4b4c      	ldr	r3, [pc, #304]	; (80015ac <printArrays+0x250>)
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    int size2 = 40;
 800147c:	2328      	movs	r3, #40	; 0x28
 800147e:	623b      	str	r3, [r7, #32]
    tem_written =  snprintf(result + usedLength, bufferSize - usedLength, "\r\n pressure data:");
 8001480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001484:	18d0      	adds	r0, r2, r3
 8001486:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	4a48      	ldr	r2, [pc, #288]	; (80015b0 <printArrays+0x254>)
 800148e:	4619      	mov	r1, r3
 8001490:	f00c fee6 	bl	800e260 <sniprintf>
 8001494:	62b8      	str	r0, [r7, #40]	; 0x28
    usedLength += tem_written; // 更新已使用的长度
 8001496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149a:	4413      	add	r3, r2
 800149c:	647b      	str	r3, [r7, #68]	; 0x44
    // 遍历第二个数组
    if (usedLength >= bufferSize - 1) { // 检查是否需要扩展缓冲区
 800149e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014a0:	3b01      	subs	r3, #1
 80014a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014a4:	429a      	cmp	r2, r3
 80014a6:	db0f      	blt.n	80014c8 <printArrays+0x16c>
        bufferSize *= 2;
 80014a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	64fb      	str	r3, [r7, #76]	; 0x4c
        result = realloc(result, bufferSize);
 80014ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b0:	4619      	mov	r1, r3
 80014b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80014b4:	f00c febc 	bl	800e230 <realloc>
 80014b8:	64b8      	str	r0, [r7, #72]	; 0x48
        if (!result) {
 80014ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d103      	bne.n	80014c8 <printArrays+0x16c>
            printf("Memory reallocation failed\n");
 80014c0:	4838      	ldr	r0, [pc, #224]	; (80015a4 <printArrays+0x248>)
 80014c2:	f00c fead 	bl	800e220 <puts>
            return;
 80014c6:	e1a7      	b.n	8001818 <printArrays+0x4bc>
        }
    }
    for (int i = 0; i < size2; ++i) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014cc:	e034      	b.n	8001538 <printArrays+0x1dc>
        int written = snprintf(result + usedLength, bufferSize - usedLength, "%.2f, ", pressureArr[i]);
 80014ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014d2:	18d4      	adds	r4, r2, r3
 80014d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	461d      	mov	r5, r3
 80014dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e2:	4413      	add	r3, r2
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f82e 	bl	8000548 <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	e9cd 2300 	strd	r2, r3, [sp]
 80014f4:	4a2f      	ldr	r2, [pc, #188]	; (80015b4 <printArrays+0x258>)
 80014f6:	4629      	mov	r1, r5
 80014f8:	4620      	mov	r0, r4
 80014fa:	f00c feb1 	bl	800e260 <sniprintf>
 80014fe:	6078      	str	r0, [r7, #4]
        usedLength += written; // 更新已使用的长度
 8001500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	647b      	str	r3, [r7, #68]	; 0x44
        if (usedLength >= bufferSize - 1) { // 检查是否需要扩展缓冲区
 8001508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800150a:	3b01      	subs	r3, #1
 800150c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800150e:	429a      	cmp	r2, r3
 8001510:	db0f      	blt.n	8001532 <printArrays+0x1d6>
            bufferSize *= 2;
 8001512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	64fb      	str	r3, [r7, #76]	; 0x4c
            result = realloc(result, bufferSize);
 8001518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800151a:	4619      	mov	r1, r3
 800151c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800151e:	f00c fe87 	bl	800e230 <realloc>
 8001522:	64b8      	str	r0, [r7, #72]	; 0x48
            if (!result) {
 8001524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <printArrays+0x1d6>
                printf("Memory reallocation failed\n");
 800152a:	481e      	ldr	r0, [pc, #120]	; (80015a4 <printArrays+0x248>)
 800152c:	f00c fe78 	bl	800e220 <puts>
                return;
 8001530:	e172      	b.n	8001818 <printArrays+0x4bc>
    for (int i = 0; i < size2; ++i) {
 8001532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001534:	3301      	adds	r3, #1
 8001536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbc6      	blt.n	80014ce <printArrays+0x172>
            }
        }
    }
    tem_written =  snprintf(result + usedLength, bufferSize - usedLength, "\r\n magnetic data:");
 8001540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001544:	18d0      	adds	r0, r2, r3
 8001546:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <printArrays+0x25c>)
 800154e:	4619      	mov	r1, r3
 8001550:	f00c fe86 	bl	800e260 <sniprintf>
 8001554:	62b8      	str	r0, [r7, #40]	; 0x28
    usedLength += tem_written; // 更新已使用的长度
 8001556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	4413      	add	r3, r2
 800155c:	647b      	str	r3, [r7, #68]	; 0x44
    if (usedLength >= bufferSize - 1) { // 检查是否需要扩展缓冲区
 800155e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001560:	3b01      	subs	r3, #1
 8001562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001564:	429a      	cmp	r2, r3
 8001566:	db0f      	blt.n	8001588 <printArrays+0x22c>
        bufferSize *= 2;
 8001568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	64fb      	str	r3, [r7, #76]	; 0x4c
        result = realloc(result, bufferSize);
 800156e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001570:	4619      	mov	r1, r3
 8001572:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001574:	f00c fe5c 	bl	800e230 <realloc>
 8001578:	64b8      	str	r0, [r7, #72]	; 0x48
        if (!result) {
 800157a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800157c:	2b00      	cmp	r3, #0
 800157e:	d103      	bne.n	8001588 <printArrays+0x22c>
            printf("Memory reallocation failed\n");
 8001580:	4808      	ldr	r0, [pc, #32]	; (80015a4 <printArrays+0x248>)
 8001582:	f00c fe4d 	bl	800e220 <puts>
            return;
 8001586:	e147      	b.n	8001818 <printArrays+0x4bc>
        }
    }
    LIS3MDL_Axes_t* magneticArr = magneticBuffer;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <printArrays+0x260>)
 800158a:	61fb      	str	r3, [r7, #28]
    int size3 = 80;
 800158c:	2350      	movs	r3, #80	; 0x50
 800158e:	61bb      	str	r3, [r7, #24]
    // 遍历第三个数组
    for (int i = 0; i < size3; ++i) {
 8001590:	2300      	movs	r3, #0
 8001592:	63bb      	str	r3, [r7, #56]	; 0x38
 8001594:	e05a      	b.n	800164c <printArrays+0x2f0>
 8001596:	bf00      	nop
 8001598:	20001c90 	.word	0x20001c90
 800159c:	08010a64 	.word	0x08010a64
 80015a0:	08010a80 	.word	0x08010a80
 80015a4:	08010a98 	.word	0x08010a98
 80015a8:	08010ab4 	.word	0x08010ab4
 80015ac:	20001bf0 	.word	0x20001bf0
 80015b0:	08010acc 	.word	0x08010acc
 80015b4:	08010ae0 	.word	0x08010ae0
 80015b8:	08010ae8 	.word	0x08010ae8
 80015bc:	20001e70 	.word	0x20001e70
        int written = snprintf(result + usedLength, bufferSize - usedLength, "x:%.2f y:%.2f z:%.2f, ", magneticArr[i].x, magneticArr[i].y, magneticArr[i].z);
 80015c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80015c4:	18d0      	adds	r0, r2, r3
 80015c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	461d      	mov	r5, r3
 80015ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	461a      	mov	r2, r3
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	4413      	add	r3, r2
 80015de:	681c      	ldr	r4, [r3, #0]
 80015e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	461a      	mov	r2, r3
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	4413      	add	r3, r2
 80015f0:	6859      	ldr	r1, [r3, #4]
 80015f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	461a      	mov	r2, r3
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	4413      	add	r3, r2
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	9100      	str	r1, [sp, #0]
 8001608:	4623      	mov	r3, r4
 800160a:	4a85      	ldr	r2, [pc, #532]	; (8001820 <printArrays+0x4c4>)
 800160c:	4629      	mov	r1, r5
 800160e:	f00c fe27 	bl	800e260 <sniprintf>
 8001612:	60b8      	str	r0, [r7, #8]
        usedLength += written; // 更新已使用的长度
 8001614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	4413      	add	r3, r2
 800161a:	647b      	str	r3, [r7, #68]	; 0x44
        if (usedLength >= bufferSize - 1) { // 检查是否需要扩展缓冲区
 800161c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800161e:	3b01      	subs	r3, #1
 8001620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001622:	429a      	cmp	r2, r3
 8001624:	db0f      	blt.n	8001646 <printArrays+0x2ea>
            bufferSize *= 2;
 8001626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	64fb      	str	r3, [r7, #76]	; 0x4c
            result = realloc(result, bufferSize);
 800162c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800162e:	4619      	mov	r1, r3
 8001630:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001632:	f00c fdfd 	bl	800e230 <realloc>
 8001636:	64b8      	str	r0, [r7, #72]	; 0x48
            if (!result) {
 8001638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800163a:	2b00      	cmp	r3, #0
 800163c:	d103      	bne.n	8001646 <printArrays+0x2ea>
                printf("Memory reallocation failed\n");
 800163e:	4879      	ldr	r0, [pc, #484]	; (8001824 <printArrays+0x4c8>)
 8001640:	f00c fdee 	bl	800e220 <puts>
                return;
 8001644:	e0e8      	b.n	8001818 <printArrays+0x4bc>
    for (int i = 0; i < size3; ++i) {
 8001646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001648:	3301      	adds	r3, #1
 800164a:	63bb      	str	r3, [r7, #56]	; 0x38
 800164c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbb5      	blt.n	80015c0 <printArrays+0x264>
            }
        }
    }
    tem_written =  snprintf(result + usedLength, bufferSize - usedLength, "\r\n speedArr data:");
 8001654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001656:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001658:	18d0      	adds	r0, r2, r3
 800165a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800165c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	4a71      	ldr	r2, [pc, #452]	; (8001828 <printArrays+0x4cc>)
 8001662:	4619      	mov	r1, r3
 8001664:	f00c fdfc 	bl	800e260 <sniprintf>
 8001668:	62b8      	str	r0, [r7, #40]	; 0x28
    usedLength += tem_written; // 更新已使用的长度
 800166a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166e:	4413      	add	r3, r2
 8001670:	647b      	str	r3, [r7, #68]	; 0x44
    if (usedLength >= bufferSize - 1) { // 检查是否需要扩展缓冲区
 8001672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001674:	3b01      	subs	r3, #1
 8001676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001678:	429a      	cmp	r2, r3
 800167a:	db0f      	blt.n	800169c <printArrays+0x340>
        bufferSize *= 2;
 800167c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	64fb      	str	r3, [r7, #76]	; 0x4c
        result = realloc(result, bufferSize);
 8001682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001684:	4619      	mov	r1, r3
 8001686:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001688:	f00c fdd2 	bl	800e230 <realloc>
 800168c:	64b8      	str	r0, [r7, #72]	; 0x48
        if (!result) {
 800168e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001690:	2b00      	cmp	r3, #0
 8001692:	d103      	bne.n	800169c <printArrays+0x340>
            printf("Memory reallocation failed\n");
 8001694:	4863      	ldr	r0, [pc, #396]	; (8001824 <printArrays+0x4c8>)
 8001696:	f00c fdc3 	bl	800e220 <puts>
            return;
 800169a:	e0bd      	b.n	8001818 <printArrays+0x4bc>
        }
    }
    // 遍历第四个数组
    float* speedArr = aiInData;
 800169c:	4b63      	ldr	r3, [pc, #396]	; (800182c <printArrays+0x4d0>)
 800169e:	617b      	str	r3, [r7, #20]
    int size4 = AI_NETWORK_IN_1_SIZE;
 80016a0:	234e      	movs	r3, #78	; 0x4e
 80016a2:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < size4; i+=3) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	637b      	str	r3, [r7, #52]	; 0x34
 80016a8:	e04e      	b.n	8001748 <printArrays+0x3ec>
        int written = snprintf(result + usedLength, bufferSize - usedLength, "x:%.2f y:%.2f z:%.2f ", speedArr[i], speedArr[i + 1], speedArr[i + 2]);
 80016aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80016ae:	18d6      	adds	r6, r2, r3
 80016b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	469a      	mov	sl, r3
 80016b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	4413      	add	r3, r2
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff40 	bl	8000548 <__aeabi_f2d>
 80016c8:	4604      	mov	r4, r0
 80016ca:	460d      	mov	r5, r1
 80016cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ce:	3301      	adds	r3, #1
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4413      	add	r3, r2
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff35 	bl	8000548 <__aeabi_f2d>
 80016de:	4680      	mov	r8, r0
 80016e0:	4689      	mov	r9, r1
 80016e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e4:	3302      	adds	r3, #2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4413      	add	r3, r2
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ff2a 	bl	8000548 <__aeabi_f2d>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80016fc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001700:	e9cd 4500 	strd	r4, r5, [sp]
 8001704:	4a4a      	ldr	r2, [pc, #296]	; (8001830 <printArrays+0x4d4>)
 8001706:	4651      	mov	r1, sl
 8001708:	4630      	mov	r0, r6
 800170a:	f00c fda9 	bl	800e260 <sniprintf>
 800170e:	60f8      	str	r0, [r7, #12]
        usedLength += written; // 更新已使用的长度
 8001710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4413      	add	r3, r2
 8001716:	647b      	str	r3, [r7, #68]	; 0x44
        if (usedLength >= bufferSize - 1) { // 检查是否需要扩展缓冲区
 8001718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171a:	3b01      	subs	r3, #1
 800171c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800171e:	429a      	cmp	r2, r3
 8001720:	db0f      	blt.n	8001742 <printArrays+0x3e6>
            bufferSize *= 2;
 8001722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	64fb      	str	r3, [r7, #76]	; 0x4c
            result = realloc(result, bufferSize);
 8001728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800172a:	4619      	mov	r1, r3
 800172c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800172e:	f00c fd7f 	bl	800e230 <realloc>
 8001732:	64b8      	str	r0, [r7, #72]	; 0x48
            if (!result) {
 8001734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <printArrays+0x3e6>
                printf("Memory reallocation failed\n");
 800173a:	483a      	ldr	r0, [pc, #232]	; (8001824 <printArrays+0x4c8>)
 800173c:	f00c fd70 	bl	800e220 <puts>
                return;
 8001740:	e06a      	b.n	8001818 <printArrays+0x4bc>
    for (int i = 0; i < size4; i+=3) {
 8001742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001744:	3303      	adds	r3, #3
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
 8001748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbac      	blt.n	80016aa <printArrays+0x34e>
            }
        }
    }
    tem_written =  snprintf(result + usedLength, bufferSize - usedLength, "\r\n  humidity:%.2f", humidity);
 8001750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001754:	18d4      	adds	r4, r2, r3
 8001756:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	461d      	mov	r5, r3
 800175e:	4b35      	ldr	r3, [pc, #212]	; (8001834 <printArrays+0x4d8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fef0 	bl	8000548 <__aeabi_f2d>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	e9cd 2300 	strd	r2, r3, [sp]
 8001770:	4a31      	ldr	r2, [pc, #196]	; (8001838 <printArrays+0x4dc>)
 8001772:	4629      	mov	r1, r5
 8001774:	4620      	mov	r0, r4
 8001776:	f00c fd73 	bl	800e260 <sniprintf>
 800177a:	62b8      	str	r0, [r7, #40]	; 0x28
    usedLength += tem_written; // 更新已使用的长度
 800177c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800177e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001780:	4413      	add	r3, r2
 8001782:	647b      	str	r3, [r7, #68]	; 0x44
    if (usedLength >= bufferSize - 1) { // 检查是否需要扩展缓冲区
 8001784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001786:	3b01      	subs	r3, #1
 8001788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800178a:	429a      	cmp	r2, r3
 800178c:	db0f      	blt.n	80017ae <printArrays+0x452>
        bufferSize *= 2;
 800178e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	64fb      	str	r3, [r7, #76]	; 0x4c
        result = realloc(result, bufferSize);
 8001794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001796:	4619      	mov	r1, r3
 8001798:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800179a:	f00c fd49 	bl	800e230 <realloc>
 800179e:	64b8      	str	r0, [r7, #72]	; 0x48
        if (!result) {
 80017a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d103      	bne.n	80017ae <printArrays+0x452>
            printf("Memory reallocation failed\n");
 80017a6:	481f      	ldr	r0, [pc, #124]	; (8001824 <printArrays+0x4c8>)
 80017a8:	f00c fd3a 	bl	800e220 <puts>
            return;
 80017ac:	e034      	b.n	8001818 <printArrays+0x4bc>
        }
    }
    tem_written =  snprintf(result + usedLength, bufferSize - usedLength, "\r\n  temperature:%.2f", temperature);
 80017ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017b2:	18d4      	adds	r4, r2, r3
 80017b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	461d      	mov	r5, r3
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <printArrays+0x4e0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fec1 	bl	8000548 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	e9cd 2300 	strd	r2, r3, [sp]
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <printArrays+0x4e4>)
 80017d0:	4629      	mov	r1, r5
 80017d2:	4620      	mov	r0, r4
 80017d4:	f00c fd44 	bl	800e260 <sniprintf>
 80017d8:	62b8      	str	r0, [r7, #40]	; 0x28
    usedLength += tem_written; // 更新已使用的长度
 80017da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	4413      	add	r3, r2
 80017e0:	647b      	str	r3, [r7, #68]	; 0x44
    if (usedLength >= bufferSize - 1) { // 检查是否需要扩展缓冲区
 80017e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017e4:	3b01      	subs	r3, #1
 80017e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017e8:	429a      	cmp	r2, r3
 80017ea:	db0f      	blt.n	800180c <printArrays+0x4b0>
        bufferSize *= 2;
 80017ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	64fb      	str	r3, [r7, #76]	; 0x4c
        result = realloc(result, bufferSize);
 80017f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017f4:	4619      	mov	r1, r3
 80017f6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80017f8:	f00c fd1a 	bl	800e230 <realloc>
 80017fc:	64b8      	str	r0, [r7, #72]	; 0x48
        if (!result) {
 80017fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001800:	2b00      	cmp	r3, #0
 8001802:	d103      	bne.n	800180c <printArrays+0x4b0>
            printf("Memory reallocation failed\n");
 8001804:	4807      	ldr	r0, [pc, #28]	; (8001824 <printArrays+0x4c8>)
 8001806:	f00c fd0b 	bl	800e220 <puts>
            return;
 800180a:	e005      	b.n	8001818 <printArrays+0x4bc>
        }
    }

    printf("%s\n", result); // 打印结果
 800180c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800180e:	f00c fd07 	bl	800e220 <puts>
    free(result); // 释放内存
 8001812:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001814:	f00b ff16 	bl	800d644 <free>
}
 8001818:	3750      	adds	r7, #80	; 0x50
 800181a:	46bd      	mov	sp, r7
 800181c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001820:	08010afc 	.word	0x08010afc
 8001824:	08010a98 	.word	0x08010a98
 8001828:	08010b14 	.word	0x08010b14
 800182c:	200013f8 	.word	0x200013f8
 8001830:	08010b28 	.word	0x08010b28
 8001834:	2000223c 	.word	0x2000223c
 8001838:	08010b40 	.word	0x08010b40
 800183c:	20002240 	.word	0x20002240
 8001840:	08010b54 	.word	0x08010b54

08001844 <Timer_Init>:

void Timer_Init(void) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
  __HAL_RCC_TIM2_CLK_ENABLE();  // 使能TIM2时钟
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <Timer_Init+0x6c>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <Timer_Init+0x6c>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6593      	str	r3, [r2, #88]	; 0x58
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <Timer_Init+0x6c>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]

  htim2.Instance = TIM2;  // 指定定时器实例
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <Timer_Init+0x70>)
 8001864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001868:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (uint32_t)((SystemCoreClock / 2) / 1000000) - 1;  // 预分频器，假设时钟频率为80MHz，我们想要定时器时钟为1MHz
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <Timer_Init+0x74>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a13      	ldr	r2, [pc, #76]	; (80018bc <Timer_Init+0x78>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	0cdb      	lsrs	r3, r3, #19
 8001876:	3b01      	subs	r3, #1
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <Timer_Init+0x70>)
 800187a:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;  // 向上计数模式
 800187c:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <Timer_Init+0x70>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;  // 设置自动重装载寄存器周期的最大值
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <Timer_Init+0x70>)
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;  // 不分频
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <Timer_Init+0x70>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;  // 禁用自动重载预装载
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <Timer_Init+0x70>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {  // 初始化基本定时器
 8001896:	4807      	ldr	r0, [pc, #28]	; (80018b4 <Timer_Init+0x70>)
 8001898:	f007 ff83 	bl	80097a2 <HAL_TIM_Base_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <Timer_Init+0x62>
    Error_Handler();
 80018a2:	f000 fd95 	bl	80023d0 <Error_Handler>
  }
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	200013a8 	.word	0x200013a8
 80018b8:	2000000c 	.word	0x2000000c
 80018bc:	431bde83 	.word	0x431bde83

080018c0 <Timer_Start>:
/* 启动定时器 */
void Timer_Start(void) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);  // 清除更新标志
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <Timer_Start+0x18>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0201 	mvn.w	r2, #1
 80018cc:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start(&htim2);  // 启动定时器
 80018ce:	4802      	ldr	r0, [pc, #8]	; (80018d8 <Timer_Start+0x18>)
 80018d0:	f007 ffc8 	bl	8009864 <HAL_TIM_Base_Start>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200013a8 	.word	0x200013a8

080018dc <Timer_Stop>:

/* 停止定时器并获取当前计时 */
uint32_t Timer_Stop(void) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop(&htim2);  // 停止定时器
 80018e2:	4808      	ldr	r0, [pc, #32]	; (8001904 <Timer_Stop+0x28>)
 80018e4:	f008 f826 	bl	8009934 <HAL_TIM_Base_Stop>
    uint32_t elapsedTime = __HAL_TIM_GET_COUNTER(&htim2);  // 获取当前计数值
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <Timer_Stop+0x28>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	607b      	str	r3, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // 重置计数器为0
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <Timer_Stop+0x28>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2200      	movs	r2, #0
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24
    return elapsedTime;  // 返回计时
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200013a8 	.word	0x200013a8

08001908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b096      	sub	sp, #88	; 0x58
 800190c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	2244      	movs	r2, #68	; 0x44
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f00b feaa 	bl	800d670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800191c:	463b      	mov	r3, r7
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800192a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800192e:	f006 faa7 	bl	8007e80 <HAL_PWREx_ControlVoltageScaling>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001938:	f000 fd4a 	bl	80023d0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800193c:	f006 fa82 	bl	8007e44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <SystemClock_Config+0xc0>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	4a20      	ldr	r2, [pc, #128]	; (80019c8 <SystemClock_Config+0xc0>)
 8001948:	f023 0318 	bic.w	r3, r3, #24
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001950:	2314      	movs	r3, #20
 8001952:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001954:	2301      	movs	r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001958:	2301      	movs	r3, #1
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001960:	2360      	movs	r3, #96	; 0x60
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001964:	2302      	movs	r3, #2
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001968:	2301      	movs	r3, #1
 800196a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800196c:	2301      	movs	r3, #1
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001970:	2328      	movs	r3, #40	; 0x28
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001974:	2307      	movs	r3, #7
 8001976:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001978:	2302      	movs	r3, #2
 800197a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800197c:	2302      	movs	r3, #2
 800197e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4618      	mov	r0, r3
 8001986:	f006 fb9d 	bl	80080c4 <HAL_RCC_OscConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001990:	f000 fd1e 	bl	80023d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001994:	230f      	movs	r3, #15
 8001996:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001998:	2303      	movs	r3, #3
 800199a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	2104      	movs	r1, #4
 80019ac:	4618      	mov	r0, r3
 80019ae:	f006 ff65 	bl	800887c <HAL_RCC_ClockConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80019b8:	f000 fd0a 	bl	80023d0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80019bc:	f007 fc6c 	bl	8009298 <HAL_RCCEx_EnableMSIPLLMode>
}
 80019c0:	bf00      	nop
 80019c2:	3758      	adds	r7, #88	; 0x58
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000

080019cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <MX_CRC_Init+0x3c>)
 80019d2:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <MX_CRC_Init+0x40>)
 80019d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_CRC_Init+0x3c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <MX_CRC_Init+0x3c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_CRC_Init+0x3c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <MX_CRC_Init+0x3c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_CRC_Init+0x3c>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	; (8001a08 <MX_CRC_Init+0x3c>)
 80019f6:	f004 fda7 	bl	8006548 <HAL_CRC_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001a00:	f000 fce6 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000c58 	.word	0x20000c58
 8001a0c:	40023000 	.word	0x40023000

08001a10 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <MX_DFSDM1_Init+0x68>)
 8001a16:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <MX_DFSDM1_Init+0x6c>)
 8001a18:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <MX_DFSDM1_Init+0x68>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <MX_DFSDM1_Init+0x68>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <MX_DFSDM1_Init+0x68>)
 8001a28:	2202      	movs	r2, #2
 8001a2a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <MX_DFSDM1_Init+0x68>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_DFSDM1_Init+0x68>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_DFSDM1_Init+0x68>)
 8001a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a3e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <MX_DFSDM1_Init+0x68>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <MX_DFSDM1_Init+0x68>)
 8001a48:	2204      	movs	r2, #4
 8001a4a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <MX_DFSDM1_Init+0x68>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MX_DFSDM1_Init+0x68>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <MX_DFSDM1_Init+0x68>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <MX_DFSDM1_Init+0x68>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <MX_DFSDM1_Init+0x68>)
 8001a66:	f004 fe59 	bl	800671c <HAL_DFSDM_ChannelInit>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001a70:	f000 fcae 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000c7c 	.word	0x20000c7c
 8001a7c:	40016020 	.word	0x40016020

08001a80 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_QUADSPI_Init+0x44>)
 8001a86:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <MX_QUADSPI_Init+0x48>)
 8001a88:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_QUADSPI_Init+0x44>)
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_QUADSPI_Init+0x44>)
 8001a92:	2204      	movs	r2, #4
 8001a94:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_QUADSPI_Init+0x44>)
 8001a98:	2210      	movs	r2, #16
 8001a9a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_QUADSPI_Init+0x44>)
 8001a9e:	2217      	movs	r2, #23
 8001aa0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_QUADSPI_Init+0x44>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_QUADSPI_Init+0x44>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_QUADSPI_Init+0x44>)
 8001ab0:	f006 fa4c 	bl	8007f4c <HAL_QSPI_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001aba:	f000 fc89 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000cb4 	.word	0x20000cb4
 8001ac8:	a0001000 	.word	0xa0001000

08001acc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <MX_SPI3_Init+0x78>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001adc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001ae6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001aea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b1a:	2207      	movs	r2, #7
 8001b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b26:	2208      	movs	r2, #8
 8001b28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b2c:	f007 fd96 	bl	800965c <HAL_SPI_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001b36:	f000 fc4b 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000cf8 	.word	0x20000cf8
 8001b44:	40003c00 	.word	0x40003c00

08001b48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b4e:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <MX_USART1_UART_Init+0x5c>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b8c:	f007 ff94 	bl	8009ab8 <HAL_UART_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b96:	f000 fc1b 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000d5c 	.word	0x20000d5c
 8001ba4:	40013800 	.word	0x40013800

08001ba8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bac:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_USART3_UART_Init+0x58>)
 8001bae:	4a15      	ldr	r2, [pc, #84]	; (8001c04 <MX_USART3_UART_Init+0x5c>)
 8001bb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <MX_USART3_UART_Init+0x58>)
 8001bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_USART3_UART_Init+0x58>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_USART3_UART_Init+0x58>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_USART3_UART_Init+0x58>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_USART3_UART_Init+0x58>)
 8001bce:	220c      	movs	r2, #12
 8001bd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_USART3_UART_Init+0x58>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_USART3_UART_Init+0x58>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <MX_USART3_UART_Init+0x58>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_USART3_UART_Init+0x58>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_USART3_UART_Init+0x58>)
 8001bec:	f007 ff64 	bl	8009ab8 <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001bf6:	f000 fbeb 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000de0 	.word	0x20000de0
 8001c04:	40004800 	.word	0x40004800

08001c08 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c16:	2206      	movs	r2, #6
 8001c18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c22:	2202      	movs	r2, #2
 8001c24:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c4c:	f005 ffb1 	bl	8007bb2 <HAL_PCD_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c56:	f000 fbbb 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000e64 	.word	0x20000e64

08001c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c7a:	4bbd      	ldr	r3, [pc, #756]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4abc      	ldr	r2, [pc, #752]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001c80:	f043 0310 	orr.w	r3, r3, #16
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4bba      	ldr	r3, [pc, #744]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c92:	4bb7      	ldr	r3, [pc, #732]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	4ab6      	ldr	r2, [pc, #728]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9e:	4bb4      	ldr	r3, [pc, #720]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	4bb1      	ldr	r3, [pc, #708]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	4ab0      	ldr	r2, [pc, #704]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb6:	4bae      	ldr	r3, [pc, #696]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	4bab      	ldr	r3, [pc, #684]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	4aaa      	ldr	r2, [pc, #680]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cce:	4ba8      	ldr	r3, [pc, #672]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cda:	4ba5      	ldr	r3, [pc, #660]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	4aa4      	ldr	r2, [pc, #656]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001ce0:	f043 0308 	orr.w	r3, r3, #8
 8001ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce6:	4ba2      	ldr	r3, [pc, #648]	; (8001f70 <MX_GPIO_Init+0x30c>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001cf8:	489e      	ldr	r0, [pc, #632]	; (8001f74 <MX_GPIO_Init+0x310>)
 8001cfa:	f005 f8b9 	bl	8006e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f248 1104 	movw	r1, #33028	; 0x8104
 8001d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d08:	f005 f8b2 	bl	8006e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001d12:	4899      	ldr	r0, [pc, #612]	; (8001f78 <MX_GPIO_Init+0x314>)
 8001d14:	f005 f8ac 	bl	8006e70 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f241 0181 	movw	r1, #4225	; 0x1081
 8001d1e:	4897      	ldr	r0, [pc, #604]	; (8001f7c <MX_GPIO_Init+0x318>)
 8001d20:	f005 f8a6 	bl	8006e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001d24:	2201      	movs	r2, #1
 8001d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d2a:	4894      	ldr	r0, [pc, #592]	; (8001f7c <MX_GPIO_Init+0x318>)
 8001d2c:	f005 f8a0 	bl	8006e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001d36:	4892      	ldr	r0, [pc, #584]	; (8001f80 <MX_GPIO_Init+0x31c>)
 8001d38:	f005 f89a 	bl	8006e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2120      	movs	r1, #32
 8001d40:	488d      	ldr	r0, [pc, #564]	; (8001f78 <MX_GPIO_Init+0x314>)
 8001d42:	f005 f895 	bl	8006e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001d46:	2201      	movs	r2, #1
 8001d48:	2101      	movs	r1, #1
 8001d4a:	488a      	ldr	r0, [pc, #552]	; (8001f74 <MX_GPIO_Init+0x310>)
 8001d4c:	f005 f890 	bl	8006e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001d50:	f240 1315 	movw	r3, #277	; 0x115
 8001d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	4882      	ldr	r0, [pc, #520]	; (8001f74 <MX_GPIO_Init+0x310>)
 8001d6a:	f004 fde3 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001d6e:	236a      	movs	r3, #106	; 0x6a
 8001d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	487c      	ldr	r0, [pc, #496]	; (8001f74 <MX_GPIO_Init+0x310>)
 8001d84:	f004 fdd6 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d8e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4878      	ldr	r0, [pc, #480]	; (8001f80 <MX_GPIO_Init+0x31c>)
 8001da0:	f004 fdc8 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001da4:	233f      	movs	r3, #63	; 0x3f
 8001da6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001da8:	230b      	movs	r3, #11
 8001daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	4872      	ldr	r0, [pc, #456]	; (8001f80 <MX_GPIO_Init+0x31c>)
 8001db8:	f004 fdbc 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001dcc:	2308      	movs	r3, #8
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dda:	f004 fdab 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001dde:	f248 1304 	movw	r3, #33028	; 0x8104
 8001de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4619      	mov	r1, r3
 8001df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfa:	f004 fd9b 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001dfe:	2308      	movs	r3, #8
 8001e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1c:	f004 fd8a 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001e20:	2310      	movs	r3, #16
 8001e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e24:	230b      	movs	r3, #11
 8001e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e36:	f004 fd7d 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001e3a:	23e0      	movs	r3, #224	; 0xe0
 8001e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e58:	f004 fd6c 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4841      	ldr	r0, [pc, #260]	; (8001f78 <MX_GPIO_Init+0x314>)
 8001e72:	f004 fd5f 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001e76:	2302      	movs	r3, #2
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e7a:	230b      	movs	r3, #11
 8001e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	483b      	ldr	r0, [pc, #236]	; (8001f78 <MX_GPIO_Init+0x314>)
 8001e8a:	f004 fd53 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001e8e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001e92:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4834      	ldr	r0, [pc, #208]	; (8001f78 <MX_GPIO_Init+0x314>)
 8001ea8:	f004 fd44 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001eac:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001eb0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	482e      	ldr	r0, [pc, #184]	; (8001f7c <MX_GPIO_Init+0x318>)
 8001ec4:	f004 fd36 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001ec8:	f243 0381 	movw	r3, #12417	; 0x3081
 8001ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4826      	ldr	r0, [pc, #152]	; (8001f7c <MX_GPIO_Init+0x318>)
 8001ee2:	f004 fd27 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001ee6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eec:	2301      	movs	r3, #1
 8001eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4619      	mov	r1, r3
 8001efe:	4820      	ldr	r0, [pc, #128]	; (8001f80 <MX_GPIO_Init+0x31c>)
 8001f00:	f004 fd18 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001f04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4819      	ldr	r0, [pc, #100]	; (8001f80 <MX_GPIO_Init+0x31c>)
 8001f1c:	f004 fd0a 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001f20:	2302      	movs	r3, #2
 8001f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f30:	2305      	movs	r3, #5
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4810      	ldr	r0, [pc, #64]	; (8001f7c <MX_GPIO_Init+0x318>)
 8001f3c:	f004 fcfa 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001f40:	2378      	movs	r3, #120	; 0x78
 8001f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f50:	2307      	movs	r3, #7
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4808      	ldr	r0, [pc, #32]	; (8001f7c <MX_GPIO_Init+0x318>)
 8001f5c:	f004 fcea 	bl	8006934 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001f60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f66:	2312      	movs	r3, #18
 8001f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e00a      	b.n	8001f84 <MX_GPIO_Init+0x320>
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	48001000 	.word	0x48001000
 8001f78:	48000400 	.word	0x48000400
 8001f7c:	48000c00 	.word	0x48000c00
 8001f80:	48000800 	.word	0x48000800
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	480b      	ldr	r0, [pc, #44]	; (8001fc4 <MX_GPIO_Init+0x360>)
 8001f96:	f004 fccd 	bl	8006934 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2017      	movs	r0, #23
 8001fa0:	f004 fa9b 	bl	80064da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fa4:	2017      	movs	r0, #23
 8001fa6:	f004 fab4 	bl	8006512 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	2028      	movs	r0, #40	; 0x28
 8001fb0:	f004 fa93 	bl	80064da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fb4:	2028      	movs	r0, #40	; 0x28
 8001fb6:	f004 faac 	bl	8006512 <HAL_NVIC_EnableIRQ>

}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	48000400 	.word	0x48000400

08001fc8 <AI_Init>:

/* USER CODE BEGIN 4 */

static void AI_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <AI_Init+0x64>)
 8001fd0:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4815      	ldr	r0, [pc, #84]	; (8002030 <AI_Init+0x68>)
 8001fda:	f008 fed7 	bl	800ad8c <ai_network_create_and_init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 8001fe2:	793b      	ldrb	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8001fe8:	793b      	ldrb	r3, [r7, #4]
 8001fea:	4619      	mov	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	480f      	ldr	r0, [pc, #60]	; (8002034 <AI_Init+0x6c>)
 8001ff6:	f00c f88d 	bl	800e114 <iprintf>
    Error_Handler();
 8001ffa:	f000 f9e9 	bl	80023d0 <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <AI_Init+0x68>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f008 ff35 	bl	800ae74 <ai_network_inputs_get>
 800200a:	4603      	mov	r3, r0
 800200c:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <AI_Init+0x70>)
 800200e:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <AI_Init+0x68>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f008 ff46 	bl	800aea8 <ai_network_outputs_get>
 800201c:	4603      	mov	r3, r0
 800201e:	4a07      	ldr	r2, [pc, #28]	; (800203c <AI_Init+0x74>)
 8002020:	6013      	str	r3, [r2, #0]
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000153c 	.word	0x2000153c
 8002030:	200013f4 	.word	0x200013f4
 8002034:	08010b6c 	.word	0x08010b6c
 8002038:	20001be8 	.word	0x20001be8
 800203c:	20001bec 	.word	0x20001bec

08002040 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <AI_Run+0x60>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <AI_Run+0x64>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <AI_Run+0x68>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a10      	ldr	r2, [pc, #64]	; (80020a0 <AI_Run+0x60>)
 8002060:	6811      	ldr	r1, [r2, #0]
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <AI_Run+0x64>)
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f008 ff74 	bl	800af54 <ai_network_run>
 800206c:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d011      	beq.n	8002098 <AI_Run+0x58>
    err = ai_network_get_error(network);
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <AI_Run+0x68>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f008 fe65 	bl	800ad48 <ai_network_get_error>
 800207e:	4603      	mov	r3, r0
 8002080:	60bb      	str	r3, [r7, #8]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8002082:	7a3b      	ldrb	r3, [r7, #8]
 8002084:	4619      	mov	r1, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800208c:	461a      	mov	r2, r3
 800208e:	4807      	ldr	r0, [pc, #28]	; (80020ac <AI_Run+0x6c>)
 8002090:	f00c f840 	bl	800e114 <iprintf>
    Error_Handler();
 8002094:	f000 f99c 	bl	80023d0 <Error_Handler>
  }
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20001be8 	.word	0x20001be8
 80020a4:	20001bec 	.word	0x20001bec
 80020a8:	200013f4 	.word	0x200013f4
 80020ac:	08010b98 	.word	0x08010b98

080020b0 <argmax>:

static uint32_t argmax(const float * values, uint32_t len)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 80020c4:	2301      	movs	r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	e017      	b.n	80020fa <argmax+0x4a>
    if (values[i] > max_value) {
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80020da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e2:	d507      	bpl.n	80020f4 <argmax+0x44>
      max_value = values[i];
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	617b      	str	r3, [r7, #20]
      max_index = i;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	3301      	adds	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d3e3      	bcc.n	80020ca <argmax+0x1a>
    }
  }
  return max_index;
 8002102:	693b      	ldr	r3, [r7, #16]
}
 8002104:	4618      	mov	r0, r3
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <MEMS_Init>:


static void MEMS_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t io_ctx;
  uint8_t id;
  LSM6DSL_AxesRaw_t axes;

  /* Link I2C functions to the LSM6DSL driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
  io_ctx.Address     = LSM6DSL_I2C_ADD_L;
 800211a:	23d5      	movs	r3, #213	; 0xd5
 800211c:	753b      	strb	r3, [r7, #20]
  io_ctx.Init        = BSP_I2C2_Init;
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <MEMS_Init+0x7c>)
 8002120:	60bb      	str	r3, [r7, #8]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8002122:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <MEMS_Init+0x80>)
 8002124:	60fb      	str	r3, [r7, #12]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <MEMS_Init+0x84>)
 8002128:	61fb      	str	r3, [r7, #28]
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <MEMS_Init+0x88>)
 800212c:	61bb      	str	r3, [r7, #24]
  io_ctx.GetTick     = BSP_GetTick;
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <MEMS_Init+0x8c>)
 8002130:	623b      	str	r3, [r7, #32]
  LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 8002132:	f107 0308 	add.w	r3, r7, #8
 8002136:	4619      	mov	r1, r3
 8002138:	4819      	ldr	r0, [pc, #100]	; (80021a0 <MEMS_Init+0x90>)
 800213a:	f002 fdaf 	bl	8004c9c <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MotionSensor, &id);
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	4619      	mov	r1, r3
 8002142:	4817      	ldr	r0, [pc, #92]	; (80021a0 <MEMS_Init+0x90>)
 8002144:	f002 fe7d 	bl	8004e42 <LSM6DSL_ReadID>
  if (id != LSM6DSL_ID) {
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	2b6a      	cmp	r3, #106	; 0x6a
 800214c:	d001      	beq.n	8002152 <MEMS_Init+0x42>
    Error_Handler();
 800214e:	f000 f93f 	bl	80023d0 <Error_Handler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MotionSensor);
 8002152:	4813      	ldr	r0, [pc, #76]	; (80021a0 <MEMS_Init+0x90>)
 8002154:	f002 fe0c 	bl	8004d70 <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 25.0f); /* 26 Hz */
 8002158:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 800215c:	4810      	ldr	r0, [pc, #64]	; (80021a0 <MEMS_Init+0x90>)
 800215e:	f002 ff75 	bl	800504c <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);          /* [-4000mg; +4000mg] */
 8002162:	2104      	movs	r1, #4
 8002164:	480e      	ldr	r0, [pc, #56]	; (80021a0 <MEMS_Init+0x90>)
 8002166:	f002 ff8d 	bl	8005084 <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 800216a:	2101      	movs	r1, #1
 800216c:	480c      	ldr	r0, [pc, #48]	; (80021a0 <MEMS_Init+0x90>)
 800216e:	f003 f96a 	bl	8005446 <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 8002172:	463b      	mov	r3, r7
 8002174:	4619      	mov	r1, r3
 8002176:	480a      	ldr	r0, [pc, #40]	; (80021a0 <MEMS_Init+0x90>)
 8002178:	f002 ffac 	bl	80050d4 <LSM6DSL_ACC_GetAxesRaw>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MotionSensor);
 800217c:	4808      	ldr	r0, [pc, #32]	; (80021a0 <MEMS_Init+0x90>)
 800217e:	f002 fe76 	bl	8004e6e <LSM6DSL_ACC_Enable>
}
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	; 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	08002a59 	.word	0x08002a59
 8002190:	08002ad5 	.word	0x08002ad5
 8002194:	08002b89 	.word	0x08002b89
 8002198:	08002b25 	.word	0x08002b25
 800219c:	08002bed 	.word	0x08002bed
 80021a0:	20001370 	.word	0x20001370

080021a4 <PRESSURE_Init>:

//气压计初始化
static void PRESSURE_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Initialize the pressure sensor */
  PressureSensor.IO.BusType = LPS22HB_I2C_BUS;
 80021a8:	4b1c      	ldr	r3, [pc, #112]	; (800221c <PRESSURE_Init+0x78>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  PressureSensor.IO.Address = LPS22HB_I2C_ADD_H;
 80021ae:	4b1b      	ldr	r3, [pc, #108]	; (800221c <PRESSURE_Init+0x78>)
 80021b0:	22bb      	movs	r2, #187	; 0xbb
 80021b2:	731a      	strb	r2, [r3, #12]
  PressureSensor.IO.Init = BSP_I2C2_Init;
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <PRESSURE_Init+0x78>)
 80021b6:	4a1a      	ldr	r2, [pc, #104]	; (8002220 <PRESSURE_Init+0x7c>)
 80021b8:	601a      	str	r2, [r3, #0]
  PressureSensor.IO.DeInit = BSP_I2C2_DeInit;
 80021ba:	4b18      	ldr	r3, [pc, #96]	; (800221c <PRESSURE_Init+0x78>)
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <PRESSURE_Init+0x80>)
 80021be:	605a      	str	r2, [r3, #4]
  PressureSensor.IO.ReadReg = BSP_I2C2_ReadReg;
 80021c0:	4b16      	ldr	r3, [pc, #88]	; (800221c <PRESSURE_Init+0x78>)
 80021c2:	4a19      	ldr	r2, [pc, #100]	; (8002228 <PRESSURE_Init+0x84>)
 80021c4:	615a      	str	r2, [r3, #20]
  PressureSensor.IO.WriteReg = BSP_I2C2_WriteReg;
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <PRESSURE_Init+0x78>)
 80021c8:	4a18      	ldr	r2, [pc, #96]	; (800222c <PRESSURE_Init+0x88>)
 80021ca:	611a      	str	r2, [r3, #16]
  PressureSensor.IO.Delay = HAL_Delay;
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <PRESSURE_Init+0x78>)
 80021ce:	4a18      	ldr	r2, [pc, #96]	; (8002230 <PRESSURE_Init+0x8c>)
 80021d0:	61da      	str	r2, [r3, #28]

  if (LPS22HB_RegisterBusIO(&PressureSensor, &PressureSensor.IO) != LPS22HB_OK)
 80021d2:	4912      	ldr	r1, [pc, #72]	; (800221c <PRESSURE_Init+0x78>)
 80021d4:	4811      	ldr	r0, [pc, #68]	; (800221c <PRESSURE_Init+0x78>)
 80021d6:	f002 f90b 	bl	80043f0 <LPS22HB_RegisterBusIO>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <PRESSURE_Init+0x40>
  {
    Error_Handler();
 80021e0:	f000 f8f6 	bl	80023d0 <Error_Handler>
  }

  if (LPS22HB_Init(&PressureSensor) != LPS22HB_OK)
 80021e4:	480d      	ldr	r0, [pc, #52]	; (800221c <PRESSURE_Init+0x78>)
 80021e6:	f002 f96d 	bl	80044c4 <LPS22HB_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <PRESSURE_Init+0x50>
  {
    Error_Handler();
 80021f0:	f000 f8ee 	bl	80023d0 <Error_Handler>
  }

  /* Enable pressure sensor */
  if (LPS22HB_PRESS_Enable(&PressureSensor) != LPS22HB_OK)
 80021f4:	4809      	ldr	r0, [pc, #36]	; (800221c <PRESSURE_Init+0x78>)
 80021f6:	f002 f980 	bl	80044fa <LPS22HB_PRESS_Enable>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <PRESSURE_Init+0x60>
  {
    Error_Handler();
 8002200:	f000 f8e6 	bl	80023d0 <Error_Handler>
  }

  /* Set pressure output data rate */
  if (LPS22HB_PRESS_SetOutputDataRate(&PressureSensor, 25.0f) != LPS22HB_OK)
 8002204:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8002208:	4804      	ldr	r0, [pc, #16]	; (800221c <PRESSURE_Init+0x78>)
 800220a:	f002 f9a8 	bl	800455e <LPS22HB_PRESS_SetOutputDataRate>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <PRESSURE_Init+0x74>
  {
    Error_Handler();
 8002214:	f000 f8dc 	bl	80023d0 <Error_Handler>
  }
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000ba8 	.word	0x20000ba8
 8002220:	08002a59 	.word	0x08002a59
 8002224:	08002ad5 	.word	0x08002ad5
 8002228:	08002b89 	.word	0x08002b89
 800222c:	08002b25 	.word	0x08002b25
 8002230:	080062dd 	.word	0x080062dd

08002234 <HTS221_Init_Custom>:


//温度计初始化
static void HTS221_Init_Custom(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b090      	sub	sp, #64	; 0x40
 8002238:	af00      	add	r7, sp, #0
    HTS221_IO_t io_ctx = {0};
 800223a:	f107 0320 	add.w	r3, r7, #32
 800223e:	2220      	movs	r2, #32
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f00b fa14 	bl	800d670 <memset>
    HTS221_Capabilities_t cap;

    /* Configure the HTS221 driver with the I2C bus handlers */
    io_ctx.BusType = HTS221_I2C_BUS; /* Assuming I2C bus */
 8002248:	2300      	movs	r3, #0
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
    io_ctx.Address = HTS221_I2C_ADDRESS;
 800224c:	23bf      	movs	r3, #191	; 0xbf
 800224e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    io_ctx.Init = BSP_I2C2_Init;
 8002252:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <HTS221_Init_Custom+0x90>)
 8002254:	623b      	str	r3, [r7, #32]
    io_ctx.DeInit = BSP_I2C2_DeInit;
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <HTS221_Init_Custom+0x94>)
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
    io_ctx.ReadReg = BSP_I2C2_ReadReg;
 800225a:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <HTS221_Init_Custom+0x98>)
 800225c:	637b      	str	r3, [r7, #52]	; 0x34
    io_ctx.WriteReg = BSP_I2C2_WriteReg;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HTS221_Init_Custom+0x9c>)
 8002260:	633b      	str	r3, [r7, #48]	; 0x30
    io_ctx.GetTick = BSP_GetTick;
 8002262:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <HTS221_Init_Custom+0xa0>)
 8002264:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Register the bus IOs */
    if (HTS221_RegisterBusIO(&HTS221Sensor, &io_ctx) != HTS221_OK)
 8002266:	f107 0320 	add.w	r3, r7, #32
 800226a:	4619      	mov	r1, r3
 800226c:	481a      	ldr	r0, [pc, #104]	; (80022d8 <HTS221_Init_Custom+0xa4>)
 800226e:	f000 fd85 	bl	8002d7c <HTS221_RegisterBusIO>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HTS221_Init_Custom+0x48>
    {
        Error_Handler();
 8002278:	f000 f8aa 	bl	80023d0 <Error_Handler>
    }

    /* Initialize the HTS221 sensor */
    if (HTS221_Init(&HTS221Sensor) != HTS221_OK)
 800227c:	4816      	ldr	r0, [pc, #88]	; (80022d8 <HTS221_Init_Custom+0xa4>)
 800227e:	f000 fdc7 	bl	8002e10 <HTS221_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HTS221_Init_Custom+0x58>
    {
        Error_Handler();
 8002288:	f000 f8a2 	bl	80023d0 <Error_Handler>
    }

    /* Check device ID */
    uint8_t id;
    if (HTS221_ReadID(&HTS221Sensor, &id) != HTS221_OK || id != HTS221_ID)
 800228c:	1dfb      	adds	r3, r7, #7
 800228e:	4619      	mov	r1, r3
 8002290:	4811      	ldr	r0, [pc, #68]	; (80022d8 <HTS221_Init_Custom+0xa4>)
 8002292:	f000 fdd8 	bl	8002e46 <HTS221_ReadID>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <HTS221_Init_Custom+0x6e>
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	2bbc      	cmp	r3, #188	; 0xbc
 80022a0:	d001      	beq.n	80022a6 <HTS221_Init_Custom+0x72>
    {
        Error_Handler();
 80022a2:	f000 f895 	bl	80023d0 <Error_Handler>
    }

    /* Get capabilities */
    if (HTS221_GetCapabilities(&HTS221Sensor, &cap) != HTS221_OK)
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	4619      	mov	r1, r3
 80022ac:	480a      	ldr	r0, [pc, #40]	; (80022d8 <HTS221_Init_Custom+0xa4>)
 80022ae:	f000 fde1 	bl	8002e74 <HTS221_GetCapabilities>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HTS221_Init_Custom+0x88>
    {
        Error_Handler();
 80022b8:	f000 f88a 	bl	80023d0 <Error_Handler>
    }
}
 80022bc:	bf00      	nop
 80022be:	3740      	adds	r7, #64	; 0x40
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	08002a59 	.word	0x08002a59
 80022c8:	08002ad5 	.word	0x08002ad5
 80022cc:	08002b89 	.word	0x08002b89
 80022d0:	08002b25 	.word	0x08002b25
 80022d4:	08002bed 	.word	0x08002bed
 80022d8:	20000bf0 	.word	0x20000bf0

080022dc <LIS3MDL_Init_Custom>:


//磁力计初始化
static void LIS3MDL_Init_Custom(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
    LIS3MDL_IO_t io_ctx;
    uint8_t id;
    float sensitivity;

    // 初始化接口函数
    io_ctx.BusType = LIS3MDL_I2C_BUS;
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
    io_ctx.Address = LIS3MDL_I2C_ADD_H; // 确保这是您的设备I2C地址
 80022e6:	233d      	movs	r3, #61	; 0x3d
 80022e8:	753b      	strb	r3, [r7, #20]
    io_ctx.Init = BSP_I2C2_Init;
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <LIS3MDL_Init_Custom+0x6c>)
 80022ec:	60bb      	str	r3, [r7, #8]
    io_ctx.DeInit = BSP_I2C2_DeInit;
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <LIS3MDL_Init_Custom+0x70>)
 80022f0:	60fb      	str	r3, [r7, #12]
    io_ctx.ReadReg = BSP_I2C2_ReadReg;
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <LIS3MDL_Init_Custom+0x74>)
 80022f4:	61fb      	str	r3, [r7, #28]
    io_ctx.WriteReg = BSP_I2C2_WriteReg;
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <LIS3MDL_Init_Custom+0x78>)
 80022f8:	61bb      	str	r3, [r7, #24]
    io_ctx.GetTick = BSP_GetTick;
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <LIS3MDL_Init_Custom+0x7c>)
 80022fc:	623b      	str	r3, [r7, #32]


    // 注册接口函数到LIS3MDL对象
    if (LIS3MDL_RegisterBusIO(&LIS3MDLSensor, &io_ctx) != LIS3MDL_OK) {
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	4619      	mov	r1, r3
 8002304:	4815      	ldr	r0, [pc, #84]	; (800235c <LIS3MDL_Init_Custom+0x80>)
 8002306:	f001 fa8b 	bl	8003820 <LIS3MDL_RegisterBusIO>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <LIS3MDL_Init_Custom+0x38>
        Error_Handler(); // 错误处理
 8002310:	f000 f85e 	bl	80023d0 <Error_Handler>
    }

    // 初始化LIS3MDL
    if (LIS3MDL_Init(&LIS3MDLSensor) != LIS3MDL_OK) {
 8002314:	4811      	ldr	r0, [pc, #68]	; (800235c <LIS3MDL_Init_Custom+0x80>)
 8002316:	f001 faed 	bl	80038f4 <LIS3MDL_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <LIS3MDL_Init_Custom+0x48>
        Error_Handler(); // 错误处理
 8002320:	f000 f856 	bl	80023d0 <Error_Handler>
    }

    // 检查设备ID
    if (LIS3MDL_ReadID(&LIS3MDLSensor, &id) != LIS3MDL_OK || id != LIS3MDL_ID) {
 8002324:	1dfb      	adds	r3, r7, #7
 8002326:	4619      	mov	r1, r3
 8002328:	480c      	ldr	r0, [pc, #48]	; (800235c <LIS3MDL_Init_Custom+0x80>)
 800232a:	f001 fb1f 	bl	800396c <LIS3MDL_ReadID>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <LIS3MDL_Init_Custom+0x5e>
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	2b3d      	cmp	r3, #61	; 0x3d
 8002338:	d001      	beq.n	800233e <LIS3MDL_Init_Custom+0x62>
        Error_Handler(); // 错误处理
 800233a:	f000 f849 	bl	80023d0 <Error_Handler>
    }

}
 800233e:	bf00      	nop
 8002340:	3728      	adds	r7, #40	; 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	08002a59 	.word	0x08002a59
 800234c:	08002ad5 	.word	0x08002ad5
 8002350:	08002b89 	.word	0x08002b89
 8002354:	08002b25 	.word	0x08002b25
 8002358:	08002bed 	.word	0x08002bed
 800235c:	20000c24 	.word	0x20000c24

08002360 <HAL_GPIO_EXTI_Callback>:
    currentPressureIndex = 0;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin) {
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002370:	d003      	beq.n	800237a <HAL_GPIO_EXTI_Callback+0x1a>
 8002372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002376:	d006      	beq.n	8002386 <HAL_GPIO_EXTI_Callback+0x26>
    dataRdyIntReceived++;
    break;
  case 2048:
	    dataRdyIntReceived++;
  default:
    break;
 8002378:	e00a      	b.n	8002390 <HAL_GPIO_EXTI_Callback+0x30>
    dataRdyIntReceived++;
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_GPIO_EXTI_Callback+0x40>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_GPIO_EXTI_Callback+0x40>)
 8002382:	6013      	str	r3, [r2, #0]
    break;
 8002384:	e005      	b.n	8002392 <HAL_GPIO_EXTI_Callback+0x32>
	    dataRdyIntReceived++;
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_GPIO_EXTI_Callback+0x40>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3301      	adds	r3, #1
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_GPIO_EXTI_Callback+0x40>)
 800238e:	6013      	str	r3, [r2, #0]
    break;
 8002390:	bf00      	nop
  }
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000be0 	.word	0x20000be0

080023a4 <_write>:
//    dataRdyIntReceived++;
//  }
//}

int _write(int fd, char * ptr, int len)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	4804      	ldr	r0, [pc, #16]	; (80023cc <_write+0x28>)
 80023bc:	f007 fbca 	bl	8009b54 <HAL_UART_Transmit>
  return len;
 80023c0:	687b      	ldr	r3, [r7, #4]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000d5c 	.word	0x20000d5c

080023d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80023d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023d8:	4803      	ldr	r0, [pc, #12]	; (80023e8 <Error_Handler+0x18>)
 80023da:	f004 fd61 	bl	8006ea0 <HAL_GPIO_TogglePin>
	HAL_Delay(50); /* wait 50 ms */
 80023de:	2032      	movs	r0, #50	; 0x32
 80023e0:	f003 ff7c 	bl	80062dc <HAL_Delay>

  /* USER CODE END Error_Handler_Debug */
}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	48000400 	.word	0x48000400

080023ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_MspInit+0x44>)
 80023f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f6:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <HAL_MspInit+0x44>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6613      	str	r3, [r2, #96]	; 0x60
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_MspInit+0x44>)
 8002400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_MspInit+0x44>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	4a08      	ldr	r2, [pc, #32]	; (8002430 <HAL_MspInit+0x44>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002414:	6593      	str	r3, [r2, #88]	; 0x58
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_MspInit+0x44>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000

08002434 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0a      	ldr	r2, [pc, #40]	; (800246c <HAL_CRC_MspInit+0x38>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d10b      	bne.n	800245e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_CRC_MspInit+0x3c>)
 8002448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800244a:	4a09      	ldr	r2, [pc, #36]	; (8002470 <HAL_CRC_MspInit+0x3c>)
 800244c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002450:	6493      	str	r3, [r2, #72]	; 0x48
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <HAL_CRC_MspInit+0x3c>)
 8002454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40023000 	.word	0x40023000
 8002470:	40021000 	.word	0x40021000

08002474 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b0ac      	sub	sp, #176	; 0xb0
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	2288      	movs	r2, #136	; 0x88
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f00b f8eb 	bl	800d670 <memset>
  if(DFSDM1_Init == 0)
 800249a:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d142      	bne.n	8002528 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80024a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4618      	mov	r0, r3
 80024b4:	f006 fc06 	bl	8008cc4 <HAL_RCCEx_PeriphCLKConfig>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80024be:	f7ff ff87 	bl	80023d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80024c2:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80024c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c6:	4a1b      	ldr	r2, [pc, #108]	; (8002534 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80024c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024cc:	6613      	str	r3, [r2, #96]	; 0x60
 80024ce:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80024d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024da:	4b16      	ldr	r3, [pc, #88]	; (8002534 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	4a15      	ldr	r2, [pc, #84]	; (8002534 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80024e0:	f043 0310 	orr.w	r3, r3, #16
 80024e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80024f2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80024f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800250c:	2306      	movs	r3, #6
 800250e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002512:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002516:	4619      	mov	r1, r3
 8002518:	4807      	ldr	r0, [pc, #28]	; (8002538 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800251a:	f004 fa0b 	bl	8006934 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800251e:	4b04      	ldr	r3, [pc, #16]	; (8002530 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	4a02      	ldr	r2, [pc, #8]	; (8002530 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002526:	6013      	str	r3, [r2, #0]
  }

}
 8002528:	bf00      	nop
 800252a:	37b0      	adds	r7, #176	; 0xb0
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20002244 	.word	0x20002244
 8002534:	40021000 	.word	0x40021000
 8002538:	48001000 	.word	0x48001000

0800253c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <HAL_QSPI_MspInit+0x7c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d128      	bne.n	80025b0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_QSPI_MspInit+0x80>)
 8002560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002562:	4a16      	ldr	r2, [pc, #88]	; (80025bc <HAL_QSPI_MspInit+0x80>)
 8002564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002568:	6513      	str	r3, [r2, #80]	; 0x50
 800256a:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_QSPI_MspInit+0x80>)
 800256c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_QSPI_MspInit+0x80>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	4a10      	ldr	r2, [pc, #64]	; (80025bc <HAL_QSPI_MspInit+0x80>)
 800257c:	f043 0310 	orr.w	r3, r3, #16
 8002580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_QSPI_MspInit+0x80>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800258e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002592:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80025a0:	230a      	movs	r3, #10
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4619      	mov	r1, r3
 80025aa:	4805      	ldr	r0, [pc, #20]	; (80025c0 <HAL_QSPI_MspInit+0x84>)
 80025ac:	f004 f9c2 	bl	8006934 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80025b0:	bf00      	nop
 80025b2:	3728      	adds	r7, #40	; 0x28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	a0001000 	.word	0xa0001000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	48001000 	.word	0x48001000

080025c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a17      	ldr	r2, [pc, #92]	; (8002640 <HAL_SPI_MspInit+0x7c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d128      	bne.n	8002638 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80025e6:	4b17      	ldr	r3, [pc, #92]	; (8002644 <HAL_SPI_MspInit+0x80>)
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	4a16      	ldr	r2, [pc, #88]	; (8002644 <HAL_SPI_MspInit+0x80>)
 80025ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f0:	6593      	str	r3, [r2, #88]	; 0x58
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_SPI_MspInit+0x80>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_SPI_MspInit+0x80>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	4a10      	ldr	r2, [pc, #64]	; (8002644 <HAL_SPI_MspInit+0x80>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_SPI_MspInit+0x80>)
 800260c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002616:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800261a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002628:	2306      	movs	r3, #6
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	4619      	mov	r1, r3
 8002632:	4805      	ldr	r0, [pc, #20]	; (8002648 <HAL_SPI_MspInit+0x84>)
 8002634:	f004 f97e 	bl	8006934 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002638:	bf00      	nop
 800263a:	3728      	adds	r7, #40	; 0x28
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40003c00 	.word	0x40003c00
 8002644:	40021000 	.word	0x40021000
 8002648:	48000800 	.word	0x48000800

0800264c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b0ae      	sub	sp, #184	; 0xb8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	2288      	movs	r2, #136	; 0x88
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f00a ffff 	bl	800d670 <memset>
  if(huart->Instance==USART1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a42      	ldr	r2, [pc, #264]	; (8002780 <HAL_UART_MspInit+0x134>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d13b      	bne.n	80026f4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800267c:	2301      	movs	r3, #1
 800267e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002680:	2300      	movs	r3, #0
 8002682:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002684:	f107 031c 	add.w	r3, r7, #28
 8002688:	4618      	mov	r0, r3
 800268a:	f006 fb1b 	bl	8008cc4 <HAL_RCCEx_PeriphCLKConfig>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002694:	f7ff fe9c 	bl	80023d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002698:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <HAL_UART_MspInit+0x138>)
 800269a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269c:	4a39      	ldr	r2, [pc, #228]	; (8002784 <HAL_UART_MspInit+0x138>)
 800269e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a2:	6613      	str	r3, [r2, #96]	; 0x60
 80026a4:	4b37      	ldr	r3, [pc, #220]	; (8002784 <HAL_UART_MspInit+0x138>)
 80026a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b0:	4b34      	ldr	r3, [pc, #208]	; (8002784 <HAL_UART_MspInit+0x138>)
 80026b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b4:	4a33      	ldr	r2, [pc, #204]	; (8002784 <HAL_UART_MspInit+0x138>)
 80026b6:	f043 0302 	orr.w	r3, r3, #2
 80026ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026bc:	4b31      	ldr	r3, [pc, #196]	; (8002784 <HAL_UART_MspInit+0x138>)
 80026be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80026c8:	23c0      	movs	r3, #192	; 0xc0
 80026ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026e0:	2307      	movs	r3, #7
 80026e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026ea:	4619      	mov	r1, r3
 80026ec:	4826      	ldr	r0, [pc, #152]	; (8002788 <HAL_UART_MspInit+0x13c>)
 80026ee:	f004 f921 	bl	8006934 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026f2:	e040      	b.n	8002776 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a24      	ldr	r2, [pc, #144]	; (800278c <HAL_UART_MspInit+0x140>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d13b      	bne.n	8002776 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026fe:	2304      	movs	r3, #4
 8002700:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002702:	2300      	movs	r3, #0
 8002704:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	4618      	mov	r0, r3
 800270c:	f006 fada 	bl	8008cc4 <HAL_RCCEx_PeriphCLKConfig>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002716:	f7ff fe5b 	bl	80023d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800271a:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <HAL_UART_MspInit+0x138>)
 800271c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271e:	4a19      	ldr	r2, [pc, #100]	; (8002784 <HAL_UART_MspInit+0x138>)
 8002720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002724:	6593      	str	r3, [r2, #88]	; 0x58
 8002726:	4b17      	ldr	r3, [pc, #92]	; (8002784 <HAL_UART_MspInit+0x138>)
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002732:	4b14      	ldr	r3, [pc, #80]	; (8002784 <HAL_UART_MspInit+0x138>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	4a13      	ldr	r2, [pc, #76]	; (8002784 <HAL_UART_MspInit+0x138>)
 8002738:	f043 0308 	orr.w	r3, r3, #8
 800273c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_UART_MspInit+0x138>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800274a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800274e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275e:	2303      	movs	r3, #3
 8002760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002764:	2307      	movs	r3, #7
 8002766:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800276a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800276e:	4619      	mov	r1, r3
 8002770:	4807      	ldr	r0, [pc, #28]	; (8002790 <HAL_UART_MspInit+0x144>)
 8002772:	f004 f8df 	bl	8006934 <HAL_GPIO_Init>
}
 8002776:	bf00      	nop
 8002778:	37b8      	adds	r7, #184	; 0xb8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40013800 	.word	0x40013800
 8002784:	40021000 	.word	0x40021000
 8002788:	48000400 	.word	0x48000400
 800278c:	40004800 	.word	0x40004800
 8002790:	48000c00 	.word	0x48000c00

08002794 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b0ac      	sub	sp, #176	; 0xb0
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2288      	movs	r2, #136	; 0x88
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f00a ff5b 	bl	800d670 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c2:	d17c      	bne.n	80028be <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80027c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027c8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80027ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80027d2:	2301      	movs	r3, #1
 80027d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80027da:	2318      	movs	r3, #24
 80027dc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80027de:	2307      	movs	r3, #7
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80027e2:	2302      	movs	r3, #2
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80027e6:	2302      	movs	r3, #2
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80027ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027ee:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	4618      	mov	r0, r3
 80027f6:	f006 fa65 	bl	8008cc4 <HAL_RCCEx_PeriphCLKConfig>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002800:	f7ff fde6 	bl	80023d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_PCD_MspInit+0x134>)
 8002806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002808:	4a2f      	ldr	r2, [pc, #188]	; (80028c8 <HAL_PCD_MspInit+0x134>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_PCD_MspInit+0x134>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800281c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002820:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002830:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002834:	4619      	mov	r1, r3
 8002836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800283a:	f004 f87b 	bl	8006934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800283e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002842:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002858:	230a      	movs	r3, #10
 800285a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002862:	4619      	mov	r1, r3
 8002864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002868:	f004 f864 	bl	8006934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_PCD_MspInit+0x134>)
 800286e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002870:	4a15      	ldr	r2, [pc, #84]	; (80028c8 <HAL_PCD_MspInit+0x134>)
 8002872:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_PCD_MspInit+0x134>)
 800287a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002884:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_PCD_MspInit+0x134>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d114      	bne.n	80028ba <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002890:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_PCD_MspInit+0x134>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	4a0c      	ldr	r2, [pc, #48]	; (80028c8 <HAL_PCD_MspInit+0x134>)
 8002896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289a:	6593      	str	r3, [r2, #88]	; 0x58
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_PCD_MspInit+0x134>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80028a8:	f005 fb40 	bl	8007f2c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_PCD_MspInit+0x134>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <HAL_PCD_MspInit+0x134>)
 80028b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b6:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80028b8:	e001      	b.n	80028be <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80028ba:	f005 fb37 	bl	8007f2c <HAL_PWREx_EnableVddUSB>
}
 80028be:	bf00      	nop
 80028c0:	37b0      	adds	r7, #176	; 0xb0
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000

080028cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <NMI_Handler+0x4>

080028d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d6:	e7fe      	b.n	80028d6 <HardFault_Handler+0x4>

080028d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <MemManage_Handler+0x4>

080028de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002918:	f003 fcc0 	bl	800629c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}

08002920 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002924:	2020      	movs	r0, #32
 8002926:	f004 fad5 	bl	8006ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800292a:	2040      	movs	r0, #64	; 0x40
 800292c:	f004 fad2 	bl	8006ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002930:	2080      	movs	r0, #128	; 0x80
 8002932:	f004 facf 	bl	8006ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002936:	f44f 7080 	mov.w	r0, #256	; 0x100
 800293a:	f004 facb 	bl	8006ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}

08002942 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002946:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800294a:	f004 fac3 	bl	8006ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800294e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002952:	f004 fabf 	bl	8006ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002956:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800295a:	f004 fabb 	bl	8006ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800295e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002962:	f004 fab7 	bl	8006ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002966:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800296a:	f004 fab3 	bl	8006ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <_sbrk+0x5c>)
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <_sbrk+0x60>)
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <_sbrk+0x64>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <_sbrk+0x64>)
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <_sbrk+0x68>)
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <_sbrk+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d207      	bcs.n	80029b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a4:	f00a fe1c 	bl	800d5e0 <__errno>
 80029a8:	4603      	mov	r3, r0
 80029aa:	220c      	movs	r2, #12
 80029ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	e009      	b.n	80029c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <_sbrk+0x64>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <_sbrk+0x64>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <_sbrk+0x64>)
 80029c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029c6:	68fb      	ldr	r3, [r7, #12]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20018000 	.word	0x20018000
 80029d4:	00000800 	.word	0x00000800
 80029d8:	20002248 	.word	0x20002248
 80029dc:	200023a0 	.word	0x200023a0

080029e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <SystemInit+0x20>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <SystemInit+0x20>)
 80029ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a08:	f7ff ffea 	bl	80029e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a0c:	480c      	ldr	r0, [pc, #48]	; (8002a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a0e:	490d      	ldr	r1, [pc, #52]	; (8002a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a10:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <LoopForever+0xe>)
  movs r3, #0
 8002a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a14:	e002      	b.n	8002a1c <LoopCopyDataInit>

08002a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a1a:	3304      	adds	r3, #4

08002a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a20:	d3f9      	bcc.n	8002a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a24:	4c0a      	ldr	r4, [pc, #40]	; (8002a50 <LoopForever+0x16>)
  movs r3, #0
 8002a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a28:	e001      	b.n	8002a2e <LoopFillZerobss>

08002a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a2c:	3204      	adds	r2, #4

08002a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a30:	d3fb      	bcc.n	8002a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a32:	f00a fddb 	bl	800d5ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a36:	f7fe fa39 	bl	8000eac <main>

08002a3a <LoopForever>:

LoopForever:
    b LoopForever
 8002a3a:	e7fe      	b.n	8002a3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a44:	20000b8c 	.word	0x20000b8c
  ldr r2, =_sidata
 8002a48:	0801cd54 	.word	0x0801cd54
  ldr r2, =_sbss
 8002a4c:	20000b8c 	.word	0x20000b8c
  ldr r4, =_ebss
 8002a50:	2000239c 	.word	0x2000239c

08002a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a54:	e7fe      	b.n	8002a54 <ADC1_2_IRQHandler>
	...

08002a58 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8002a62:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <BSP_I2C2_Init+0x70>)
 8002a64:	4a19      	ldr	r2, [pc, #100]	; (8002acc <BSP_I2C2_Init+0x74>)
 8002a66:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <BSP_I2C2_Init+0x78>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	4918      	ldr	r1, [pc, #96]	; (8002ad0 <BSP_I2C2_Init+0x78>)
 8002a70:	600a      	str	r2, [r1, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d122      	bne.n	8002abc <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8002a76:	4814      	ldr	r0, [pc, #80]	; (8002ac8 <BSP_I2C2_Init+0x70>)
 8002a78:	f004 fd44 	bl	8007504 <HAL_I2C_GetState>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11c      	bne.n	8002abc <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8002a82:	4811      	ldr	r0, [pc, #68]	; (8002ac8 <BSP_I2C2_Init+0x70>)
 8002a84:	f000 f8fe 	bl	8002c84 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d116      	bne.n	8002abc <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8002a8e:	480e      	ldr	r0, [pc, #56]	; (8002ac8 <BSP_I2C2_Init+0x70>)
 8002a90:	f000 f8b4 	bl	8002bfc <MX_I2C2_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002a9a:	f06f 0307 	mvn.w	r3, #7
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	e00c      	b.n	8002abc <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4808      	ldr	r0, [pc, #32]	; (8002ac8 <BSP_I2C2_Init+0x70>)
 8002aa6:	f004 ffed 	bl	8007a84 <HAL_I2CEx_ConfigAnalogFilter>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002ab0:	f06f 0307 	mvn.w	r3, #7
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	e001      	b.n	8002abc <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002abc:	687b      	ldr	r3, [r7, #4]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	2000224c 	.word	0x2000224c
 8002acc:	40005800 	.word	0x40005800
 8002ad0:	200022a0 	.word	0x200022a0

08002ad4 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8002ade:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <BSP_I2C2_DeInit+0x48>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d014      	beq.n	8002b10 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <BSP_I2C2_DeInit+0x48>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <BSP_I2C2_DeInit+0x48>)
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <BSP_I2C2_DeInit+0x48>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8002af8:	4809      	ldr	r0, [pc, #36]	; (8002b20 <BSP_I2C2_DeInit+0x4c>)
 8002afa:	f000 f923 	bl	8002d44 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8002afe:	4808      	ldr	r0, [pc, #32]	; (8002b20 <BSP_I2C2_DeInit+0x4c>)
 8002b00:	f004 fa8f 	bl	8007022 <HAL_I2C_DeInit>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002b0a:	f06f 0307 	mvn.w	r3, #7
 8002b0e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002b10:	687b      	ldr	r3, [r7, #4]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200022a0 	.word	0x200022a0
 8002b20:	2000224c 	.word	0x2000224c

08002b24 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af04      	add	r7, sp, #16
 8002b2a:	60ba      	str	r2, [r7, #8]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	81fb      	strh	r3, [r7, #14]
 8002b32:	460b      	mov	r3, r1
 8002b34:	81bb      	strh	r3, [r7, #12]
 8002b36:	4613      	mov	r3, r2
 8002b38:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002b3e:	89ba      	ldrh	r2, [r7, #12]
 8002b40:	89f9      	ldrh	r1, [r7, #14]
 8002b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b46:	9302      	str	r3, [sp, #8]
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2301      	movs	r3, #1
 8002b52:	480c      	ldr	r0, [pc, #48]	; (8002b84 <BSP_I2C2_WriteReg+0x60>)
 8002b54:	f004 faa8 	bl	80070a8 <HAL_I2C_Mem_Write>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002b5e:	4809      	ldr	r0, [pc, #36]	; (8002b84 <BSP_I2C2_WriteReg+0x60>)
 8002b60:	f004 fcde 	bl	8007520 <HAL_I2C_GetError>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d103      	bne.n	8002b72 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002b6a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	e002      	b.n	8002b78 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002b72:	f06f 0303 	mvn.w	r3, #3
 8002b76:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002b78:	697b      	ldr	r3, [r7, #20]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	2000224c 	.word	0x2000224c

08002b88 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af04      	add	r7, sp, #16
 8002b8e:	60ba      	str	r2, [r7, #8]
 8002b90:	461a      	mov	r2, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	81fb      	strh	r3, [r7, #14]
 8002b96:	460b      	mov	r3, r1
 8002b98:	81bb      	strh	r3, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002ba2:	89ba      	ldrh	r2, [r7, #12]
 8002ba4:	89f9      	ldrh	r1, [r7, #14]
 8002ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002baa:	9302      	str	r3, [sp, #8]
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	480c      	ldr	r0, [pc, #48]	; (8002be8 <BSP_I2C2_ReadReg+0x60>)
 8002bb8:	f004 fb8a 	bl	80072d0 <HAL_I2C_Mem_Read>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002bc2:	4809      	ldr	r0, [pc, #36]	; (8002be8 <BSP_I2C2_ReadReg+0x60>)
 8002bc4:	f004 fcac 	bl	8007520 <HAL_I2C_GetError>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d103      	bne.n	8002bd6 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002bce:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e002      	b.n	8002bdc <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002bd6:	f06f 0303 	mvn.w	r3, #3
 8002bda:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002bdc:	697b      	ldr	r3, [r7, #20]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	2000224c 	.word	0x2000224c

08002bec <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002bf0:	f003 fb68 	bl	80062c4 <HAL_GetTick>
 8002bf4:	4603      	mov	r3, r0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <MX_I2C2_Init+0x80>)
 8002c0c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00702991;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <MX_I2C2_Init+0x84>)
 8002c12:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f004 f960 	bl	8006f04 <HAL_I2C_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c4e:	2100      	movs	r1, #0
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f004 ff17 	bl	8007a84 <HAL_I2CEx_ConfigAnalogFilter>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002c60:	2100      	movs	r1, #0
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f004 ff59 	bl	8007b1a <HAL_I2CEx_ConfigDigitalFilter>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40005800 	.word	0x40005800
 8002c80:	00702991 	.word	0x00702991

08002c84 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b0ac      	sub	sp, #176	; 0xb0
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	2288      	movs	r2, #136	; 0x88
 8002c92:	2100      	movs	r1, #0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f00a fceb 	bl	800d670 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c9a:	2380      	movs	r3, #128	; 0x80
 8002c9c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002ca2:	f107 0314 	add.w	r3, r7, #20
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f006 f80c 	bl	8008cc4 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cac:	4b23      	ldr	r3, [pc, #140]	; (8002d3c <I2C2_MspInit+0xb8>)
 8002cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb0:	4a22      	ldr	r2, [pc, #136]	; (8002d3c <I2C2_MspInit+0xb8>)
 8002cb2:	f043 0302 	orr.w	r3, r3, #2
 8002cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb8:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <I2C2_MspInit+0xb8>)
 8002cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8002cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ccc:	2312      	movs	r3, #18
 8002cce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8002cde:	2304      	movs	r3, #4
 8002ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002ce4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4815      	ldr	r0, [pc, #84]	; (8002d40 <I2C2_MspInit+0xbc>)
 8002cec:	f003 fe22 	bl	8006934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8002cf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cf8:	2312      	movs	r3, #18
 8002cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d04:	2303      	movs	r3, #3
 8002d06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002d10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d14:	4619      	mov	r1, r3
 8002d16:	480a      	ldr	r0, [pc, #40]	; (8002d40 <I2C2_MspInit+0xbc>)
 8002d18:	f003 fe0c 	bl	8006934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d1c:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <I2C2_MspInit+0xb8>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	4a06      	ldr	r2, [pc, #24]	; (8002d3c <I2C2_MspInit+0xb8>)
 8002d22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d26:	6593      	str	r3, [r2, #88]	; 0x58
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <I2C2_MspInit+0xb8>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8002d34:	bf00      	nop
 8002d36:	37b0      	adds	r7, #176	; 0xb0
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	48000400 	.word	0x48000400

08002d44 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <I2C2_MspDeInit+0x30>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <I2C2_MspDeInit+0x30>)
 8002d52:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002d56:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d5c:	4806      	ldr	r0, [pc, #24]	; (8002d78 <I2C2_MspDeInit+0x34>)
 8002d5e:	f003 ff93 	bl	8006c88 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002d62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d66:	4804      	ldr	r0, [pc, #16]	; (8002d78 <I2C2_MspDeInit+0x34>)
 8002d68:	f003 ff8e 	bl	8006c88 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	48000400 	.word	0x48000400

08002d7c <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	e034      	b.n	8002dfe <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	7b1a      	ldrb	r2, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <HTS221_RegisterBusIO+0x8c>)
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a0d      	ldr	r2, [pc, #52]	; (8002e0c <HTS221_RegisterBusIO+0x90>)
 8002dd6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d004      	beq.n	8002df8 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4798      	blx	r3
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	e002      	b.n	8002dfe <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8002df8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	0800329b 	.word	0x0800329b
 8002e0c:	080032fd 	.word	0x080032fd

08002e10 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d108      	bne.n	8002e34 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f9d4 	bl	80031d0 <HTS221_Initialize>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	e004      	b.n	8002e3e <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3320      	adds	r3, #32
 8002e54:	6839      	ldr	r1, [r7, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fb7c 	bl	8003554 <hts221_device_id_get>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
 8002e66:	e000      	b.n	8002e6a <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2201      	movs	r2, #1
 8002e82:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2200      	movs	r2, #0
 8002e88:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <HTS221_GetCapabilities+0x54>)
 8002ea0:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	4a08      	ldr	r2, [pc, #32]	; (8002ec8 <HTS221_GetCapabilities+0x54>)
 8002ea6:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	41480000 	.word	0x41480000

08002ecc <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002ed6:	6839      	ldr	r1, [r7, #0]
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f905 	bl	80030e8 <HTS221_GetOutputDataRate>
 8002ede:	4603      	mov	r3, r0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3320      	adds	r3, #32
 8002ef6:	f107 020c 	add.w	r2, r7, #12
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fbfe 	bl	80036fe <hts221_hum_adc_point_0_get>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8002f08:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0c:	e06b      	b.n	8002fe6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f103 0220 	add.w	r2, r3, #32
 8002f14:	f107 030c 	add.w	r3, r7, #12
 8002f18:	3304      	adds	r3, #4
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f000 fb50 	bl	80035c2 <hts221_hum_rh_point_0_get>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8002f28:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2c:	e05b      	b.n	8002fe6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f103 0220 	add.w	r2, r3, #32
 8002f34:	f107 030c 	add.w	r3, r7, #12
 8002f38:	3308      	adds	r3, #8
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	f000 fc02 	bl	8003746 <hts221_hum_adc_point_1_get>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8002f48:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4c:	e04b      	b.n	8002fe6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f103 0220 	add.w	r2, r3, #32
 8002f54:	f107 030c 	add.w	r3, r7, #12
 8002f58:	330c      	adds	r3, #12
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f000 fb4e 	bl	80035fe <hts221_hum_rh_point_1_get>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8002f68:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6c:	e03b      	b.n	8002fe6 <HTS221_HUM_GetHumidity+0xfe>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3320      	adds	r3, #32
 8002f76:	f107 021c 	add.w	r2, r7, #28
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 faa3 	bl	80034c8 <hts221_humidity_raw_get>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8002f88:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8c:	e02b      	b.n	8002fe6 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002f8e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f9a:	f107 030c 	add.w	r3, r7, #12
 8002f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f940 	bl	8003228 <Linear_Interpolation>
 8002fa8:	eef0 7a40 	vmov.f32	s15, s0
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	edd3 7a00 	vldr	s15, [r3]
 8002fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc0:	d503      	bpl.n	8002fca <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	edd3 7a00 	vldr	s15, [r3]
 8002fd0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002ff0 <HTS221_HUM_GetHumidity+0x108>
 8002fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fdc:	dd02      	ble.n	8002fe4 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <HTS221_HUM_GetHumidity+0x10c>)
 8002fe2:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3720      	adds	r7, #32
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	42c80000 	.word	0x42c80000
 8002ff4:	42c80000 	.word	0x42c80000

08002ff8 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003002:	6839      	ldr	r1, [r7, #0]
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f86f 	bl	80030e8 <HTS221_GetOutputDataRate>
 800300a:	4603      	mov	r3, r0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3320      	adds	r3, #32
 8003022:	f107 020c 	add.w	r2, r7, #12
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fbb0 	bl	800378e <hts221_temp_adc_point_0_get>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003034:	f04f 33ff 	mov.w	r3, #4294967295
 8003038:	e052      	b.n	80030e0 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f103 0220 	add.w	r2, r3, #32
 8003040:	f107 030c 	add.w	r3, r7, #12
 8003044:	3304      	adds	r3, #4
 8003046:	4619      	mov	r1, r3
 8003048:	4610      	mov	r0, r2
 800304a:	f000 faf6 	bl	800363a <hts221_temp_deg_point_0_get>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8003054:	f04f 33ff 	mov.w	r3, #4294967295
 8003058:	e042      	b.n	80030e0 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f103 0220 	add.w	r2, r3, #32
 8003060:	f107 030c 	add.w	r3, r7, #12
 8003064:	3308      	adds	r3, #8
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f000 fbb4 	bl	80037d6 <hts221_temp_adc_point_1_get>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8003074:	f04f 33ff 	mov.w	r3, #4294967295
 8003078:	e032      	b.n	80030e0 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f103 0220 	add.w	r2, r3, #32
 8003080:	f107 030c 	add.w	r3, r7, #12
 8003084:	330c      	adds	r3, #12
 8003086:	4619      	mov	r1, r3
 8003088:	4610      	mov	r0, r2
 800308a:	f000 fb07 	bl	800369c <hts221_temp_deg_point_1_get>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8003094:	f04f 33ff 	mov.w	r3, #4294967295
 8003098:	e022      	b.n	80030e0 <HTS221_TEMP_GetTemperature+0xcc>
 800309a:	2300      	movs	r3, #0
 800309c:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3320      	adds	r3, #32
 80030a2:	f107 021c 	add.w	r2, r7, #28
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fa30 	bl	800350e <hts221_temperature_raw_get>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80030b4:	f04f 33ff 	mov.w	r3, #4294967295
 80030b8:	e012      	b.n	80030e0 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80030ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c6:	f107 030c 	add.w	r3, r7, #12
 80030ca:	eeb0 0a67 	vmov.f32	s0, s15
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f8aa 	bl	8003228 <Linear_Interpolation>
 80030d4:	eef0 7a40 	vmov.f32	s15, s0
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3320      	adds	r3, #32
 80030fa:	f107 020b 	add.w	r2, r7, #11
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f000 f983 	bl	800340c <hts221_data_rate_get>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 800310c:	f04f 33ff 	mov.w	r3, #4294967295
 8003110:	e025      	b.n	800315e <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8003112:	7afb      	ldrb	r3, [r7, #11]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d81d      	bhi.n	8003154 <HTS221_GetOutputDataRate+0x6c>
 8003118:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <HTS221_GetOutputDataRate+0x38>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003131 	.word	0x08003131
 8003124:	0800313b 	.word	0x0800313b
 8003128:	08003145 	.word	0x08003145
 800312c:	0800314d 	.word	0x0800314d
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
      break;
 8003138:	e010      	b.n	800315c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003140:	601a      	str	r2, [r3, #0]
      break;
 8003142:	e00b      	b.n	800315c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4a08      	ldr	r2, [pc, #32]	; (8003168 <HTS221_GetOutputDataRate+0x80>)
 8003148:	601a      	str	r2, [r3, #0]
      break;
 800314a:	e007      	b.n	800315c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4a07      	ldr	r2, [pc, #28]	; (800316c <HTS221_GetOutputDataRate+0x84>)
 8003150:	601a      	str	r2, [r3, #0]
      break;
 8003152:	e003      	b.n	800315c <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003154:	f04f 33ff 	mov.w	r3, #4294967295
 8003158:	60fb      	str	r3, [r7, #12]
      break;
 800315a:	bf00      	nop
  }

  return ret;
 800315c:	68fb      	ldr	r3, [r7, #12]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40e00000 	.word	0x40e00000
 800316c:	41480000 	.word	0x41480000

08003170 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800317c:	edd7 7a00 	vldr	s15, [r7]
 8003180:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318c:	d801      	bhi.n	8003192 <HTS221_SetOutputDataRate+0x22>
 800318e:	2301      	movs	r3, #1
 8003190:	e00b      	b.n	80031aa <HTS221_SetOutputDataRate+0x3a>
 8003192:	edd7 7a00 	vldr	s15, [r7]
 8003196:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800319a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800319e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a2:	d801      	bhi.n	80031a8 <HTS221_SetOutputDataRate+0x38>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e000      	b.n	80031aa <HTS221_SetOutputDataRate+0x3a>
 80031a8:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80031aa:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3320      	adds	r3, #32
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 f902 	bl	80033be <hts221_data_rate_set>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295
 80031c4:	e000      	b.n	80031c8 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3320      	adds	r3, #32
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f9c9 	bl	8003576 <hts221_power_on_set>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80031ea:	f04f 33ff 	mov.w	r3, #4294967295
 80031ee:	e017      	b.n	8003220 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3320      	adds	r3, #32
 80031f4:	2101      	movs	r1, #1
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f940 	bl	800347c <hts221_block_data_update_set>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8003202:	f04f 33ff 	mov.w	r3, #4294967295
 8003206:	e00b      	b.n	8003220 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003208:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff ffaf 	bl	8003170 <HTS221_SetOutputDataRate>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003218:	f04f 33ff 	mov.w	r3, #4294967295
 800321c:	e000      	b.n	8003220 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	ed93 7a03 	vldr	s14, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003240:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003244:	edd7 7a00 	vldr	s15, [r7]
 8003248:	ee27 7a27 	vmul.f32	s14, s14, s15
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	edd3 7a01 	vldr	s15, [r3, #4]
 8003258:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	ed93 6a00 	vldr	s12, [r3]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	edd3 7a03 	vldr	s15, [r3, #12]
 8003268:	ee66 7a27 	vmul.f32	s15, s12, s15
 800326c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003270:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	edd3 6a02 	vldr	s13, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	edd3 7a00 	vldr	s15, [r3]
 8003280:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003284:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003288:	eef0 7a66 	vmov.f32	s15, s13
}
 800328c:	eeb0 0a67 	vmov.f32	s0, s15
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800329a:	b590      	push	{r4, r7, lr}
 800329c:	b087      	sub	sp, #28
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	461a      	mov	r2, r3
 80032a6:	460b      	mov	r3, r1
 80032a8:	72fb      	strb	r3, [r7, #11]
 80032aa:	4613      	mov	r3, r2
 80032ac:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10e      	bne.n	80032d8 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	695c      	ldr	r4, [r3, #20]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	7b1b      	ldrb	r3, [r3, #12]
 80032c2:	b298      	uxth	r0, r3
 80032c4:	7afb      	ldrb	r3, [r7, #11]
 80032c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	b299      	uxth	r1, r3
 80032ce:	893b      	ldrh	r3, [r7, #8]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	47a0      	blx	r4
 80032d4:	4603      	mov	r3, r0
 80032d6:	e00d      	b.n	80032f4 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	695c      	ldr	r4, [r3, #20]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	7b1b      	ldrb	r3, [r3, #12]
 80032e0:	b298      	uxth	r0, r3
 80032e2:	7afb      	ldrb	r3, [r7, #11]
 80032e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	b299      	uxth	r1, r3
 80032ec:	893b      	ldrh	r3, [r7, #8]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	47a0      	blx	r4
 80032f2:	4603      	mov	r3, r0
  }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd90      	pop	{r4, r7, pc}

080032fc <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	461a      	mov	r2, r3
 8003308:	460b      	mov	r3, r1
 800330a:	72fb      	strb	r3, [r7, #11]
 800330c:	4613      	mov	r3, r2
 800330e:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10e      	bne.n	800333a <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	691c      	ldr	r4, [r3, #16]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	7b1b      	ldrb	r3, [r3, #12]
 8003324:	b298      	uxth	r0, r3
 8003326:	7afb      	ldrb	r3, [r7, #11]
 8003328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800332c:	b2db      	uxtb	r3, r3
 800332e:	b299      	uxth	r1, r3
 8003330:	893b      	ldrh	r3, [r7, #8]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	47a0      	blx	r4
 8003336:	4603      	mov	r3, r0
 8003338:	e00d      	b.n	8003356 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	691c      	ldr	r4, [r3, #16]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	7b1b      	ldrb	r3, [r3, #12]
 8003342:	b298      	uxth	r0, r3
 8003344:	7afb      	ldrb	r3, [r7, #11]
 8003346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800334a:	b2db      	uxtb	r3, r3
 800334c:	b299      	uxth	r1, r3
 800334e:	893b      	ldrh	r3, [r7, #8]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	47a0      	blx	r4
 8003354:	4603      	mov	r3, r0
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	bd90      	pop	{r4, r7, pc}

0800335e <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800335e:	b590      	push	{r4, r7, lr}
 8003360:	b087      	sub	sp, #28
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	461a      	mov	r2, r3
 800336a:	460b      	mov	r3, r1
 800336c:	72fb      	strb	r3, [r7, #11]
 800336e:	4613      	mov	r3, r2
 8003370:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685c      	ldr	r4, [r3, #4]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	68d8      	ldr	r0, [r3, #12]
 800337a:	893b      	ldrh	r3, [r7, #8]
 800337c:	7af9      	ldrb	r1, [r7, #11]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	47a0      	blx	r4
 8003382:	6178      	str	r0, [r7, #20]

  return ret;
 8003384:	697b      	ldr	r3, [r7, #20]
}
 8003386:	4618      	mov	r0, r3
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	bd90      	pop	{r4, r7, pc}

0800338e <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800338e:	b590      	push	{r4, r7, lr}
 8003390:	b087      	sub	sp, #28
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	461a      	mov	r2, r3
 800339a:	460b      	mov	r3, r1
 800339c:	72fb      	strb	r3, [r7, #11]
 800339e:	4613      	mov	r3, r2
 80033a0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681c      	ldr	r4, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68d8      	ldr	r0, [r3, #12]
 80033aa:	893b      	ldrh	r3, [r7, #8]
 80033ac:	7af9      	ldrb	r1, [r7, #11]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	47a0      	blx	r4
 80033b2:	6178      	str	r0, [r7, #20]

  return ret;
 80033b4:	697b      	ldr	r3, [r7, #20]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd90      	pop	{r4, r7, pc}

080033be <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	460b      	mov	r3, r1
 80033c8:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80033ca:	f107 0208 	add.w	r2, r7, #8
 80033ce:	2301      	movs	r3, #1
 80033d0:	2120      	movs	r1, #32
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ffc3 	bl	800335e <hts221_read_reg>
 80033d8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10f      	bne.n	8003400 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	7a3b      	ldrb	r3, [r7, #8]
 80033ea:	f362 0301 	bfi	r3, r2, #0, #2
 80033ee:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80033f0:	f107 0208 	add.w	r2, r7, #8
 80033f4:	2301      	movs	r3, #1
 80033f6:	2120      	movs	r1, #32
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ffc8 	bl	800338e <hts221_write_reg>
 80033fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003400:	68fb      	ldr	r3, [r7, #12]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003416:	f107 0208 	add.w	r2, r7, #8
 800341a:	2301      	movs	r3, #1
 800341c:	2120      	movs	r1, #32
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ff9d 	bl	800335e <hts221_read_reg>
 8003424:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003426:	7a3b      	ldrb	r3, [r7, #8]
 8003428:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b03      	cmp	r3, #3
 8003430:	d81a      	bhi.n	8003468 <hts221_data_rate_get+0x5c>
 8003432:	a201      	add	r2, pc, #4	; (adr r2, 8003438 <hts221_data_rate_get+0x2c>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	08003449 	.word	0x08003449
 800343c:	08003451 	.word	0x08003451
 8003440:	08003459 	.word	0x08003459
 8003444:	08003461 	.word	0x08003461
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
      break;
 800344e:	e00f      	b.n	8003470 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
      break;
 8003456:	e00b      	b.n	8003470 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2202      	movs	r2, #2
 800345c:	701a      	strb	r2, [r3, #0]
      break;
 800345e:	e007      	b.n	8003470 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2203      	movs	r2, #3
 8003464:	701a      	strb	r2, [r3, #0]
      break;
 8003466:	e003      	b.n	8003470 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2204      	movs	r2, #4
 800346c:	701a      	strb	r2, [r3, #0]
      break;
 800346e:	bf00      	nop
  }

  return ret;
 8003470:	68fb      	ldr	r3, [r7, #12]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop

0800347c <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003488:	f107 0208 	add.w	r2, r7, #8
 800348c:	2301      	movs	r3, #1
 800348e:	2120      	movs	r1, #32
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff64 	bl	800335e <hts221_read_reg>
 8003496:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10f      	bne.n	80034be <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	7a3b      	ldrb	r3, [r7, #8]
 80034a8:	f362 0382 	bfi	r3, r2, #2, #1
 80034ac:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80034ae:	f107 0208 	add.w	r2, r7, #8
 80034b2:	2301      	movs	r3, #1
 80034b4:	2120      	movs	r1, #32
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff ff69 	bl	800338e <hts221_write_reg>
 80034bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80034be:	68fb      	ldr	r3, [r7, #12]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80034d2:	f107 0208 	add.w	r2, r7, #8
 80034d6:	2302      	movs	r3, #2
 80034d8:	2128      	movs	r1, #40	; 0x28
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff ff3f 	bl	800335e <hts221_read_reg>
 80034e0:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80034e2:	7a7b      	ldrb	r3, [r7, #9]
 80034e4:	b21a      	sxth	r2, r3
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	7a3b      	ldrb	r3, [r7, #8]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	b21a      	sxth	r2, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	801a      	strh	r2, [r3, #0]

  return ret;
 8003504:	68fb      	ldr	r3, [r7, #12]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003518:	f107 0208 	add.w	r2, r7, #8
 800351c:	2302      	movs	r3, #2
 800351e:	212a      	movs	r1, #42	; 0x2a
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff ff1c 	bl	800335e <hts221_read_reg>
 8003526:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003528:	7a7b      	ldrb	r3, [r7, #9]
 800352a:	b21a      	sxth	r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003536:	b29b      	uxth	r3, r3
 8003538:	021b      	lsls	r3, r3, #8
 800353a:	b29a      	uxth	r2, r3
 800353c:	7a3b      	ldrb	r3, [r7, #8]
 800353e:	b29b      	uxth	r3, r3
 8003540:	4413      	add	r3, r2
 8003542:	b29b      	uxth	r3, r3
 8003544:	b21a      	sxth	r2, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	801a      	strh	r2, [r3, #0]

  return ret;
 800354a:	68fb      	ldr	r3, [r7, #12]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800355e:	2301      	movs	r3, #1
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	210f      	movs	r1, #15
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff fefa 	bl	800335e <hts221_read_reg>
 800356a:	60f8      	str	r0, [r7, #12]

  return ret;
 800356c:	68fb      	ldr	r3, [r7, #12]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003582:	f107 0208 	add.w	r2, r7, #8
 8003586:	2301      	movs	r3, #1
 8003588:	2120      	movs	r1, #32
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fee7 	bl	800335e <hts221_read_reg>
 8003590:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10f      	bne.n	80035b8 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	7a3b      	ldrb	r3, [r7, #8]
 80035a2:	f362 13c7 	bfi	r3, r2, #7, #1
 80035a6:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80035a8:	f107 0208 	add.w	r2, r7, #8
 80035ac:	2301      	movs	r3, #1
 80035ae:	2120      	movs	r1, #32
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff feec 	bl	800338e <hts221_write_reg>
 80035b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80035b8:	68fb      	ldr	r3, [r7, #12]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80035cc:	f107 020b 	add.w	r2, r7, #11
 80035d0:	2301      	movs	r3, #1
 80035d2:	2130      	movs	r1, #48	; 0x30
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff fec2 	bl	800335e <hts221_read_reg>
 80035da:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80035dc:	7afb      	ldrb	r3, [r7, #11]
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035e6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80035ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80035f4:	68fb      	ldr	r3, [r7, #12]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003608:	f107 020b 	add.w	r2, r7, #11
 800360c:	2301      	movs	r3, #1
 800360e:	2131      	movs	r1, #49	; 0x31
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff fea4 	bl	800335e <hts221_read_reg>
 8003616:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003618:	7afb      	ldrb	r3, [r7, #11]
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003622:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003626:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003630:	68fb      	ldr	r3, [r7, #12]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003644:	f107 020f 	add.w	r2, r7, #15
 8003648:	2301      	movs	r3, #1
 800364a:	2132      	movs	r1, #50	; 0x32
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fe86 	bl	800335e <hts221_read_reg>
 8003652:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d11b      	bne.n	8003692 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800365a:	f107 0210 	add.w	r2, r7, #16
 800365e:	2301      	movs	r3, #1
 8003660:	2135      	movs	r1, #53	; 0x35
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fe7b 	bl	800335e <hts221_read_reg>
 8003668:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 800366a:	7c3b      	ldrb	r3, [r7, #16]
 800366c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003670:	b2db      	uxtb	r3, r3
 8003672:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	4413      	add	r3, r2
 800367c:	ee07 3a90 	vmov	s15, r3
 8003680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003684:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003688:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003692:	697b      	ldr	r3, [r7, #20]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80036a6:	f107 020f 	add.w	r2, r7, #15
 80036aa:	2301      	movs	r3, #1
 80036ac:	2133      	movs	r1, #51	; 0x33
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff fe55 	bl	800335e <hts221_read_reg>
 80036b4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d11b      	bne.n	80036f4 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80036bc:	f107 0210 	add.w	r2, r7, #16
 80036c0:	2301      	movs	r3, #1
 80036c2:	2135      	movs	r1, #53	; 0x35
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff fe4a 	bl	800335e <hts221_read_reg>
 80036ca:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80036cc:	7c3b      	ldrb	r3, [r7, #16]
 80036ce:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80036d6:	7cfb      	ldrb	r3, [r7, #19]
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	4413      	add	r3, r2
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036e6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80036ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80036f4:	697b      	ldr	r3, [r7, #20]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003708:	f107 0208 	add.w	r2, r7, #8
 800370c:	2302      	movs	r3, #2
 800370e:	2136      	movs	r1, #54	; 0x36
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff fe24 	bl	800335e <hts221_read_reg>
 8003716:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003718:	7a7b      	ldrb	r3, [r7, #9]
 800371a:	b29b      	uxth	r3, r3
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	b29a      	uxth	r2, r3
 8003720:	7a3b      	ldrb	r3, [r7, #8]
 8003722:	b29b      	uxth	r3, r3
 8003724:	4413      	add	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800372a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800373c:	68fb      	ldr	r3, [r7, #12]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003750:	f107 0208 	add.w	r2, r7, #8
 8003754:	2302      	movs	r3, #2
 8003756:	213a      	movs	r1, #58	; 0x3a
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff fe00 	bl	800335e <hts221_read_reg>
 800375e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003760:	7a7b      	ldrb	r3, [r7, #9]
 8003762:	b29b      	uxth	r3, r3
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	b29a      	uxth	r2, r3
 8003768:	7a3b      	ldrb	r3, [r7, #8]
 800376a:	b29b      	uxth	r3, r3
 800376c:	4413      	add	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003772:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003784:	68fb      	ldr	r3, [r7, #12]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8003798:	f107 0208 	add.w	r2, r7, #8
 800379c:	2302      	movs	r3, #2
 800379e:	213c      	movs	r1, #60	; 0x3c
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff fddc 	bl	800335e <hts221_read_reg>
 80037a6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80037a8:	7a7b      	ldrb	r3, [r7, #9]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	7a3b      	ldrb	r3, [r7, #8]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80037ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80037cc:	68fb      	ldr	r3, [r7, #12]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80037e0:	f107 0208 	add.w	r2, r7, #8
 80037e4:	2302      	movs	r3, #2
 80037e6:	213e      	movs	r1, #62	; 0x3e
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff fdb8 	bl	800335e <hts221_read_reg>
 80037ee:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80037f0:	7a7b      	ldrb	r3, [r7, #9]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	7a3b      	ldrb	r3, [r7, #8]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	b29b      	uxth	r3, r3
 8003800:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003802:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003814:	68fb      	ldr	r3, [r7, #12]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <LIS3MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_RegisterBusIO(LIS3MDL_Object_t *pObj, LIS3MDL_IO_t *pIO)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS3MDL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d103      	bne.n	800383c <LIS3MDL_RegisterBusIO+0x1c>
  {
    ret = LIS3MDL_ERROR;
 8003834:	f04f 33ff 	mov.w	r3, #4294967295
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	e051      	b.n	80038e0 <LIS3MDL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	7b1a      	ldrb	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	695a      	ldr	r2, [r3, #20]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	699a      	ldr	r2, [r3, #24]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <LIS3MDL_RegisterBusIO+0xcc>)
 8003878:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <LIS3MDL_RegisterBusIO+0xd0>)
 800387e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <LIS3MDL_RegisterBusIO+0x7e>
    {
      ret = LIS3MDL_ERROR;
 8003896:	f04f 33ff 	mov.w	r3, #4294967295
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e020      	b.n	80038e0 <LIS3MDL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS3MDL_OK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4798      	blx	r3
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <LIS3MDL_RegisterBusIO+0x92>
    {
      ret = LIS3MDL_ERROR;
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e016      	b.n	80038e0 <LIS3MDL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS3MDL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d112      	bne.n	80038e0 <LIS3MDL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10d      	bne.n	80038e0 <LIS3MDL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x07;
 80038c4:	2307      	movs	r3, #7
 80038c6:	72fb      	strb	r3, [r7, #11]

          if (LIS3MDL_Write_Reg(pObj, LIS3MDL_CTRL_REG3, data) != LIS3MDL_OK)
 80038c8:	7afb      	ldrb	r3, [r7, #11]
 80038ca:	461a      	mov	r2, r3
 80038cc:	2122      	movs	r1, #34	; 0x22
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa71 	bl	8003db6 <LIS3MDL_Write_Reg>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <LIS3MDL_RegisterBusIO+0xc0>
          {
            ret = LIS3MDL_ERROR;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295
 80038de:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ret;
 80038e0:	68fb      	ldr	r3, [r7, #12]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	08003ded 	.word	0x08003ded
 80038f0:	08003e4f 	.word	0x08003e4f

080038f4 <LIS3MDL_Init>:
  * @brief  Component initialization
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_Init(LIS3MDL_Object_t *pObj)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Operating mode selection - power down */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_POWER_DOWN) != LIS3MDL_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3320      	adds	r3, #32
 8003900:	2102      	movs	r1, #2
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fccc 	bl	80042a0 <lis3mdl_operating_mode_set>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <LIS3MDL_Init+0x20>
  {
    return LIS3MDL_ERROR;
 800390e:	f04f 33ff 	mov.w	r3, #4294967295
 8003912:	e025      	b.n	8003960 <LIS3MDL_Init+0x6c>
  }

  /* Enable BDU */
  if (lis3mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS3MDL_OK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3320      	adds	r3, #32
 8003918:	2101      	movs	r1, #1
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fce6 	bl	80042ec <lis3mdl_block_data_update_set>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <LIS3MDL_Init+0x38>
  {
    return LIS3MDL_ERROR;
 8003926:	f04f 33ff 	mov.w	r3, #4294967295
 800392a:	e019      	b.n	8003960 <LIS3MDL_Init+0x6c>
  }

  /* Set Output data rate. */
  if (LIS3MDL_MAG_SetOutputDataRate(pObj, 80.0f) != LIS3MDL_OK)
 800392c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8003968 <LIS3MDL_Init+0x74>
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f957 	bl	8003be4 <LIS3MDL_MAG_SetOutputDataRate>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <LIS3MDL_Init+0x4e>
  {
    return LIS3MDL_ERROR;
 800393c:	f04f 33ff 	mov.w	r3, #4294967295
 8003940:	e00e      	b.n	8003960 <LIS3MDL_Init+0x6c>
  }

  /* Full scale selection. */
  if (LIS3MDL_MAG_SetFullScale(pObj, 4) != LIS3MDL_OK)
 8003942:	2104      	movs	r1, #4
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f9b7 	bl	8003cb8 <LIS3MDL_MAG_SetFullScale>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <LIS3MDL_Init+0x62>
  {
    return LIS3MDL_ERROR;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
 8003954:	e004      	b.n	8003960 <LIS3MDL_Init+0x6c>
  }

  pObj->is_initialized = 1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS3MDL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	42a00000 	.word	0x42a00000

0800396c <LIS3MDL_ReadID>:
  * @param  pObj pointer to Component object
  * @param  Id pointer to Component ID
  * @retval Component status
  */
int32_t LIS3MDL_ReadID(LIS3MDL_Object_t *pObj, uint8_t *Id)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  if (lis3mdl_device_id_get(&(pObj->Ctx), Id) != LIS3MDL_OK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3320      	adds	r3, #32
 800397a:	6839      	ldr	r1, [r7, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fd26 	bl	80043ce <lis3mdl_device_id_get>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <LIS3MDL_ReadID+0x22>
  {
    return LIS3MDL_ERROR;
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
 800398c:	e000      	b.n	8003990 <LIS3MDL_ReadID+0x24>
  }

  return LIS3MDL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <LIS3MDL_MAG_GetSensitivity>:
  * @param pObj the device pObj
  * @param Sensitivity pointer to Sensitivity value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_GetSensitivity(LIS3MDL_Object_t *pObj, float *Sensitivity)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lis3mdl_full_scale_get(&(pObj->Ctx), &full_scale) != LIS3MDL_OK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3320      	adds	r3, #32
 80039a6:	f107 020f 	add.w	r2, r7, #15
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fc3f 	bl	8004230 <lis3mdl_full_scale_get>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <LIS3MDL_MAG_GetSensitivity+0x26>
  {
    return LIS3MDL_ERROR;
 80039b8:	f04f 33ff 	mov.w	r3, #4294967295
 80039bc:	e020      	b.n	8003a00 <LIS3MDL_MAG_GetSensitivity+0x68>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d81b      	bhi.n	80039fc <LIS3MDL_MAG_GetSensitivity+0x64>
 80039c4:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <LIS3MDL_MAG_GetSensitivity+0x34>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	080039dd 	.word	0x080039dd
 80039d0:	080039e5 	.word	0x080039e5
 80039d4:	080039ed 	.word	0x080039ed
 80039d8:	080039f5 	.word	0x080039f5
  {
    case LIS3MDL_4_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_4GAUSS;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <LIS3MDL_MAG_GetSensitivity+0x70>)
 80039e0:	601a      	str	r2, [r3, #0]
      break;
 80039e2:	e00c      	b.n	80039fe <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_8_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_8GAUSS;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4a09      	ldr	r2, [pc, #36]	; (8003a0c <LIS3MDL_MAG_GetSensitivity+0x74>)
 80039e8:	601a      	str	r2, [r3, #0]
      break;
 80039ea:	e008      	b.n	80039fe <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_12_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_12GAUSS;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <LIS3MDL_MAG_GetSensitivity+0x78>)
 80039f0:	601a      	str	r2, [r3, #0]
      break;
 80039f2:	e004      	b.n	80039fe <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_16_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_16GAUSS;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <LIS3MDL_MAG_GetSensitivity+0x7c>)
 80039f8:	601a      	str	r2, [r3, #0]
      break;
 80039fa:	e000      	b.n	80039fe <LIS3MDL_MAG_GetSensitivity+0x66>
    default:
      break;
 80039fc:	bf00      	nop
  }

  return LIS3MDL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	3e158106 	.word	0x3e158106
 8003a0c:	3e958106 	.word	0x3e958106
 8003a10:	3ee04189 	.word	0x3ee04189
 8003a14:	3f158106 	.word	0x3f158106

08003a18 <LIS3MDL_MAG_GetOutputDataRate>:
  * @param pObj the device pObj
  * @param Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_GetOutputDataRate(LIS3MDL_Object_t *pObj, float *Odr)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  lis3mdl_om_t odr_low_level;

  /* Get current output data rate. */
  if (lis3mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS3MDL_OK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3320      	adds	r3, #32
 8003a26:	f107 020f 	add.w	r2, r7, #15
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fab5 	bl	8003f9c <lis3mdl_data_rate_get>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <LIS3MDL_MAG_GetOutputDataRate+0x26>
  {
    return LIS3MDL_ERROR;
 8003a38:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3c:	e0b6      	b.n	8003bac <LIS3MDL_MAG_GetOutputDataRate+0x194>
  }

  switch (odr_low_level)
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b3e      	cmp	r3, #62	; 0x3e
 8003a42:	f200 80b1 	bhi.w	8003ba8 <LIS3MDL_MAG_GetOutputDataRate+0x190>
 8003a46:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <LIS3MDL_MAG_GetOutputDataRate+0x34>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003b49 	.word	0x08003b49
 8003a50:	08003ba1 	.word	0x08003ba1
 8003a54:	08003b51 	.word	0x08003b51
 8003a58:	08003ba9 	.word	0x08003ba9
 8003a5c:	08003b59 	.word	0x08003b59
 8003a60:	08003ba9 	.word	0x08003ba9
 8003a64:	08003b61 	.word	0x08003b61
 8003a68:	08003ba9 	.word	0x08003ba9
 8003a6c:	08003b69 	.word	0x08003b69
 8003a70:	08003ba9 	.word	0x08003ba9
 8003a74:	08003b71 	.word	0x08003b71
 8003a78:	08003ba9 	.word	0x08003ba9
 8003a7c:	08003b79 	.word	0x08003b79
 8003a80:	08003ba9 	.word	0x08003ba9
 8003a84:	08003b81 	.word	0x08003b81
 8003a88:	08003ba9 	.word	0x08003ba9
 8003a8c:	08003ba9 	.word	0x08003ba9
 8003a90:	08003b99 	.word	0x08003b99
 8003a94:	08003b51 	.word	0x08003b51
 8003a98:	08003ba9 	.word	0x08003ba9
 8003a9c:	08003b59 	.word	0x08003b59
 8003aa0:	08003ba9 	.word	0x08003ba9
 8003aa4:	08003b61 	.word	0x08003b61
 8003aa8:	08003ba9 	.word	0x08003ba9
 8003aac:	08003b69 	.word	0x08003b69
 8003ab0:	08003ba9 	.word	0x08003ba9
 8003ab4:	08003b71 	.word	0x08003b71
 8003ab8:	08003ba9 	.word	0x08003ba9
 8003abc:	08003b79 	.word	0x08003b79
 8003ac0:	08003ba9 	.word	0x08003ba9
 8003ac4:	08003b81 	.word	0x08003b81
 8003ac8:	08003ba9 	.word	0x08003ba9
 8003acc:	08003ba9 	.word	0x08003ba9
 8003ad0:	08003b91 	.word	0x08003b91
 8003ad4:	08003b51 	.word	0x08003b51
 8003ad8:	08003ba9 	.word	0x08003ba9
 8003adc:	08003b59 	.word	0x08003b59
 8003ae0:	08003ba9 	.word	0x08003ba9
 8003ae4:	08003b61 	.word	0x08003b61
 8003ae8:	08003ba9 	.word	0x08003ba9
 8003aec:	08003b69 	.word	0x08003b69
 8003af0:	08003ba9 	.word	0x08003ba9
 8003af4:	08003b71 	.word	0x08003b71
 8003af8:	08003ba9 	.word	0x08003ba9
 8003afc:	08003b79 	.word	0x08003b79
 8003b00:	08003ba9 	.word	0x08003ba9
 8003b04:	08003b81 	.word	0x08003b81
 8003b08:	08003ba9 	.word	0x08003ba9
 8003b0c:	08003ba9 	.word	0x08003ba9
 8003b10:	08003b89 	.word	0x08003b89
 8003b14:	08003b51 	.word	0x08003b51
 8003b18:	08003ba9 	.word	0x08003ba9
 8003b1c:	08003b59 	.word	0x08003b59
 8003b20:	08003ba9 	.word	0x08003ba9
 8003b24:	08003b61 	.word	0x08003b61
 8003b28:	08003ba9 	.word	0x08003ba9
 8003b2c:	08003b69 	.word	0x08003b69
 8003b30:	08003ba9 	.word	0x08003ba9
 8003b34:	08003b71 	.word	0x08003b71
 8003b38:	08003ba9 	.word	0x08003ba9
 8003b3c:	08003b79 	.word	0x08003b79
 8003b40:	08003ba9 	.word	0x08003ba9
 8003b44:	08003b81 	.word	0x08003b81
  {
    case LIS3MDL_LP_Hz625:
      *Odr = 0.625f;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	4a1a      	ldr	r2, [pc, #104]	; (8003bb4 <LIS3MDL_MAG_GetOutputDataRate+0x19c>)
 8003b4c:	601a      	str	r2, [r3, #0]
      break;
 8003b4e:	e02c      	b.n	8003baa <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_1Hz25:
    case LIS3MDL_MP_1Hz25:
    case LIS3MDL_HP_1Hz25:
    case LIS3MDL_UHP_1Hz25:
      *Odr = 1.250f;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	4a19      	ldr	r2, [pc, #100]	; (8003bb8 <LIS3MDL_MAG_GetOutputDataRate+0x1a0>)
 8003b54:	601a      	str	r2, [r3, #0]
      break;
 8003b56:	e028      	b.n	8003baa <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_2Hz5:
    case LIS3MDL_MP_2Hz5:
    case LIS3MDL_HP_2Hz5:
    case LIS3MDL_UHP_2Hz5:
      *Odr = 2.500f;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <LIS3MDL_MAG_GetOutputDataRate+0x1a4>)
 8003b5c:	601a      	str	r2, [r3, #0]
      break;
 8003b5e:	e024      	b.n	8003baa <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_5Hz:
    case LIS3MDL_MP_5Hz:
    case LIS3MDL_HP_5Hz:
    case LIS3MDL_UHP_5Hz:
      *Odr = 5.000f;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	4a17      	ldr	r2, [pc, #92]	; (8003bc0 <LIS3MDL_MAG_GetOutputDataRate+0x1a8>)
 8003b64:	601a      	str	r2, [r3, #0]
      break;
 8003b66:	e020      	b.n	8003baa <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_10Hz:
    case LIS3MDL_MP_10Hz:
    case LIS3MDL_HP_10Hz:
    case LIS3MDL_UHP_10Hz:
      *Odr = 10.000f;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	4a16      	ldr	r2, [pc, #88]	; (8003bc4 <LIS3MDL_MAG_GetOutputDataRate+0x1ac>)
 8003b6c:	601a      	str	r2, [r3, #0]
      break;
 8003b6e:	e01c      	b.n	8003baa <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_20Hz:
    case LIS3MDL_MP_20Hz:
    case LIS3MDL_HP_20Hz:
    case LIS3MDL_UHP_20Hz:
      *Odr = 20.000f;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <LIS3MDL_MAG_GetOutputDataRate+0x1b0>)
 8003b74:	601a      	str	r2, [r3, #0]
      break;
 8003b76:	e018      	b.n	8003baa <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_40Hz:
    case LIS3MDL_MP_40Hz:
    case LIS3MDL_HP_40Hz:
    case LIS3MDL_UHP_40Hz:
      *Odr = 40.000f;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	4a14      	ldr	r2, [pc, #80]	; (8003bcc <LIS3MDL_MAG_GetOutputDataRate+0x1b4>)
 8003b7c:	601a      	str	r2, [r3, #0]
      break;
 8003b7e:	e014      	b.n	8003baa <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_80Hz:
    case LIS3MDL_MP_80Hz:
    case LIS3MDL_HP_80Hz:
    case LIS3MDL_UHP_80Hz:
      *Odr = 80.000f;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	4a13      	ldr	r2, [pc, #76]	; (8003bd0 <LIS3MDL_MAG_GetOutputDataRate+0x1b8>)
 8003b84:	601a      	str	r2, [r3, #0]
      break;
 8003b86:	e010      	b.n	8003baa <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_UHP_155Hz:
      *Odr = 155.000f;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	4a12      	ldr	r2, [pc, #72]	; (8003bd4 <LIS3MDL_MAG_GetOutputDataRate+0x1bc>)
 8003b8c:	601a      	str	r2, [r3, #0]
      break;
 8003b8e:	e00c      	b.n	8003baa <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_HP_300Hz:
      *Odr = 300.000f;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4a11      	ldr	r2, [pc, #68]	; (8003bd8 <LIS3MDL_MAG_GetOutputDataRate+0x1c0>)
 8003b94:	601a      	str	r2, [r3, #0]
      break;
 8003b96:	e008      	b.n	8003baa <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_MP_560Hz:
      *Odr = 560.000f;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	4a10      	ldr	r2, [pc, #64]	; (8003bdc <LIS3MDL_MAG_GetOutputDataRate+0x1c4>)
 8003b9c:	601a      	str	r2, [r3, #0]
      break;
 8003b9e:	e004      	b.n	8003baa <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_1kHz:
      *Odr = 1000.000f;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	4a0f      	ldr	r2, [pc, #60]	; (8003be0 <LIS3MDL_MAG_GetOutputDataRate+0x1c8>)
 8003ba4:	601a      	str	r2, [r3, #0]
      break;
 8003ba6:	e000      	b.n	8003baa <LIS3MDL_MAG_GetOutputDataRate+0x192>
    default:
      break;
 8003ba8:	bf00      	nop
  }

  return LIS3MDL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	3f200000 	.word	0x3f200000
 8003bb8:	3fa00000 	.word	0x3fa00000
 8003bbc:	40200000 	.word	0x40200000
 8003bc0:	40a00000 	.word	0x40a00000
 8003bc4:	41200000 	.word	0x41200000
 8003bc8:	41a00000 	.word	0x41a00000
 8003bcc:	42200000 	.word	0x42200000
 8003bd0:	42a00000 	.word	0x42a00000
 8003bd4:	431b0000 	.word	0x431b0000
 8003bd8:	43960000 	.word	0x43960000
 8003bdc:	440c0000 	.word	0x440c0000
 8003be0:	447a0000 	.word	0x447a0000

08003be4 <LIS3MDL_MAG_SetOutputDataRate>:
  * @param pObj the device pObj
  * @param Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_SetOutputDataRate(LIS3MDL_Object_t *pObj, float Odr)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	ed87 0a00 	vstr	s0, [r7]
  lis3mdl_om_t new_odr;

  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
            : (Odr <=  1.250f) ? LIS3MDL_LP_1Hz25
 8003bf0:	edd7 7a00 	vldr	s15, [r7]
 8003bf4:	eeb6 7a04 	vmov.f32	s14, #100	; 0x3f200000  0.625
 8003bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c00:	d801      	bhi.n	8003c06 <LIS3MDL_MAG_SetOutputDataRate+0x22>
 8003c02:	2300      	movs	r3, #0
 8003c04:	e042      	b.n	8003c8c <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003c06:	edd7 7a00 	vldr	s15, [r7]
 8003c0a:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8003c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c16:	d801      	bhi.n	8003c1c <LIS3MDL_MAG_SetOutputDataRate+0x38>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e037      	b.n	8003c8c <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003c1c:	edd7 7a00 	vldr	s15, [r7]
 8003c20:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2c:	d801      	bhi.n	8003c32 <LIS3MDL_MAG_SetOutputDataRate+0x4e>
 8003c2e:	2304      	movs	r3, #4
 8003c30:	e02c      	b.n	8003c8c <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003c32:	edd7 7a00 	vldr	s15, [r7]
 8003c36:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c42:	d801      	bhi.n	8003c48 <LIS3MDL_MAG_SetOutputDataRate+0x64>
 8003c44:	2306      	movs	r3, #6
 8003c46:	e021      	b.n	8003c8c <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003c48:	edd7 7a00 	vldr	s15, [r7]
 8003c4c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c58:	d801      	bhi.n	8003c5e <LIS3MDL_MAG_SetOutputDataRate+0x7a>
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	e016      	b.n	8003c8c <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003c5e:	edd7 7a00 	vldr	s15, [r7]
 8003c62:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6e:	d801      	bhi.n	8003c74 <LIS3MDL_MAG_SetOutputDataRate+0x90>
 8003c70:	230a      	movs	r3, #10
 8003c72:	e00b      	b.n	8003c8c <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003c74:	edd7 7a00 	vldr	s15, [r7]
 8003c78:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003cb4 <LIS3MDL_MAG_SetOutputDataRate+0xd0>
 8003c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c84:	d801      	bhi.n	8003c8a <LIS3MDL_MAG_SetOutputDataRate+0xa6>
 8003c86:	230c      	movs	r3, #12
 8003c88:	e000      	b.n	8003c8c <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8003c8a:	230e      	movs	r3, #14
  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
 8003c8c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 10.000f) ? LIS3MDL_LP_10Hz
            : (Odr <= 20.000f) ? LIS3MDL_LP_20Hz
            : (Odr <= 40.000f) ? LIS3MDL_LP_40Hz
            :                      LIS3MDL_LP_80Hz;

  if (lis3mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS3MDL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3320      	adds	r3, #32
 8003c92:	7bfa      	ldrb	r2, [r7, #15]
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 f93a 	bl	8003f10 <lis3mdl_data_rate_set>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <LIS3MDL_MAG_SetOutputDataRate+0xc4>
  {
    return LIS3MDL_ERROR;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca6:	e000      	b.n	8003caa <LIS3MDL_MAG_SetOutputDataRate+0xc6>
  }

  return LIS3MDL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	42200000 	.word	0x42200000

08003cb8 <LIS3MDL_MAG_SetFullScale>:
  * @param pObj the device pObj
  * @param FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_SetFullScale(LIS3MDL_Object_t *pObj, int32_t FullScale)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t new_fs;

  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
           : (FullScale <= 8) ? LIS3MDL_8_GAUSS
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	dd0b      	ble.n	8003ce0 <LIS3MDL_MAG_SetFullScale+0x28>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	dd06      	ble.n	8003cdc <LIS3MDL_MAG_SetFullScale+0x24>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	dc01      	bgt.n	8003cd8 <LIS3MDL_MAG_SetFullScale+0x20>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e004      	b.n	8003ce2 <LIS3MDL_MAG_SetFullScale+0x2a>
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e002      	b.n	8003ce2 <LIS3MDL_MAG_SetFullScale+0x2a>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <LIS3MDL_MAG_SetFullScale+0x2a>
 8003ce0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
 8003ce2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 12) ? LIS3MDL_12_GAUSS
           :                       LIS3MDL_16_GAUSS;

  if (lis3mdl_full_scale_set(&(pObj->Ctx), new_fs) != LIS3MDL_OK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3320      	adds	r3, #32
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fa79 	bl	80041e4 <lis3mdl_full_scale_set>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <LIS3MDL_MAG_SetFullScale+0x46>
  {
    return LIS3MDL_ERROR;
 8003cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfc:	e000      	b.n	8003d00 <LIS3MDL_MAG_SetFullScale+0x48>
  }

  return LIS3MDL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <LIS3MDL_MAG_GetAxes>:
  * @param pObj the device pObj
  * @param MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_GetAxes(LIS3MDL_Object_t *pObj, LIS3MDL_Axes_t *MagneticField)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  lis3mdl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lis3mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS3MDL_OK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3320      	adds	r3, #32
 8003d1c:	f107 0210 	add.w	r2, r7, #16
 8003d20:	4611      	mov	r1, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fb08 	bl	8004338 <lis3mdl_magnetic_raw_get>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <LIS3MDL_MAG_GetAxes+0x2c>
  {
    return LIS3MDL_ERROR;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	e03c      	b.n	8003dae <LIS3MDL_MAG_GetAxes+0xa6>
  }

  /* Get LIS3MDL actual sensitivity. */
  if (LIS3MDL_MAG_GetSensitivity(pObj, &sensitivity) != LIS3MDL_OK)
 8003d34:	f107 030c 	add.w	r3, r7, #12
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fe2c 	bl	8003998 <LIS3MDL_MAG_GetSensitivity>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <LIS3MDL_MAG_GetAxes+0x44>
  {
    return LIS3MDL_ERROR;
 8003d46:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4a:	e030      	b.n	8003dae <LIS3MDL_MAG_GetAxes+0xa6>
  }

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003d4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d50:	ee07 3a90 	vmov	s15, r3
 8003d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d58:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d64:	ee17 2a90 	vmov	r2, s15
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003d6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d78:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d84:	ee17 2a90 	vmov	r2, s15
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003d8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d90:	ee07 3a90 	vmov	s15, r3
 8003d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d98:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003da4:	ee17 2a90 	vmov	r2, s15
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	609a      	str	r2, [r3, #8]

  return LIS3MDL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <LIS3MDL_Write_Reg>:
  * @param Reg address to be written
  * @param Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_Write_Reg(LIS3MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	70fb      	strb	r3, [r7, #3]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	70bb      	strb	r3, [r7, #2]
  if (lis3mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS3MDL_OK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f103 0020 	add.w	r0, r3, #32
 8003dcc:	1cba      	adds	r2, r7, #2
 8003dce:	78f9      	ldrb	r1, [r7, #3]
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f000 f885 	bl	8003ee0 <lis3mdl_write_reg>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <LIS3MDL_Write_Reg+0x2c>
  {
    return LIS3MDL_ERROR;
 8003ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8003de0:	e000      	b.n	8003de4 <LIS3MDL_Write_Reg+0x2e>
  }

  return LIS3MDL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <ReadRegWrap>:
  * @brief  Wrap Read register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003dec:	b590      	push	{r4, r7, lr}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	461a      	mov	r2, r3
 8003df8:	460b      	mov	r3, r1
 8003dfa:	72fb      	strb	r3, [r7, #11]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10e      	bne.n	8003e2a <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	695c      	ldr	r4, [r3, #20]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	7b1b      	ldrb	r3, [r3, #12]
 8003e14:	b298      	uxth	r0, r3
 8003e16:	7afb      	ldrb	r3, [r7, #11]
 8003e18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	b299      	uxth	r1, r3
 8003e20:	893b      	ldrh	r3, [r7, #8]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	47a0      	blx	r4
 8003e26:	4603      	mov	r3, r0
 8003e28:	e00d      	b.n	8003e46 <ReadRegWrap+0x5a>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	695c      	ldr	r4, [r3, #20]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	7b1b      	ldrb	r3, [r3, #12]
 8003e32:	b298      	uxth	r0, r3
 8003e34:	7afb      	ldrb	r3, [r7, #11]
 8003e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	b299      	uxth	r1, r3
 8003e3e:	893b      	ldrh	r3, [r7, #8]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	47a0      	blx	r4
 8003e44:	4603      	mov	r3, r0
  }
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd90      	pop	{r4, r7, pc}

08003e4e <WriteRegWrap>:
  * @brief  Wrap Write register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003e4e:	b590      	push	{r4, r7, lr}
 8003e50:	b087      	sub	sp, #28
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	72fb      	strb	r3, [r7, #11]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10e      	bne.n	8003e8c <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	691c      	ldr	r4, [r3, #16]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	7b1b      	ldrb	r3, [r3, #12]
 8003e76:	b298      	uxth	r0, r3
 8003e78:	7afb      	ldrb	r3, [r7, #11]
 8003e7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	b299      	uxth	r1, r3
 8003e82:	893b      	ldrh	r3, [r7, #8]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	47a0      	blx	r4
 8003e88:	4603      	mov	r3, r0
 8003e8a:	e00d      	b.n	8003ea8 <WriteRegWrap+0x5a>
  }
  else   /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	691c      	ldr	r4, [r3, #16]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	7b1b      	ldrb	r3, [r3, #12]
 8003e94:	b298      	uxth	r0, r3
 8003e96:	7afb      	ldrb	r3, [r7, #11]
 8003e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	b299      	uxth	r1, r3
 8003ea0:	893b      	ldrh	r3, [r7, #8]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	47a0      	blx	r4
 8003ea6:	4603      	mov	r3, r0
  }
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd90      	pop	{r4, r7, pc}

08003eb0 <lis3mdl_read_reg>:
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	72fb      	strb	r3, [r7, #11]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685c      	ldr	r4, [r3, #4]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68d8      	ldr	r0, [r3, #12]
 8003ecc:	893b      	ldrh	r3, [r7, #8]
 8003ece:	7af9      	ldrb	r1, [r7, #11]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	47a0      	blx	r4
 8003ed4:	6178      	str	r0, [r7, #20]

  return ret;
 8003ed6:	697b      	ldr	r3, [r7, #20]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd90      	pop	{r4, r7, pc}

08003ee0 <lis3mdl_write_reg>:
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003ee0:	b590      	push	{r4, r7, lr}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	461a      	mov	r2, r3
 8003eec:	460b      	mov	r3, r1
 8003eee:	72fb      	strb	r3, [r7, #11]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681c      	ldr	r4, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	68d8      	ldr	r0, [r3, #12]
 8003efc:	893b      	ldrh	r3, [r7, #8]
 8003efe:	7af9      	ldrb	r1, [r7, #11]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	47a0      	blx	r4
 8003f04:	6178      	str	r0, [r7, #20]

  return ret;
 8003f06:	697b      	ldr	r3, [r7, #20]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd90      	pop	{r4, r7, pc}

08003f10 <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003f1c:	f107 0210 	add.w	r2, r7, #16
 8003f20:	2301      	movs	r3, #1
 8003f22:	2120      	movs	r1, #32
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ffc3 	bl	8003eb0 <lis3mdl_read_reg>
 8003f2a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10f      	bne.n	8003f52 <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	7c3b      	ldrb	r3, [r7, #16]
 8003f3c:	f362 0346 	bfi	r3, r2, #1, #6
 8003f40:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003f42:	f107 0210 	add.w	r2, r7, #16
 8003f46:	2301      	movs	r3, #1
 8003f48:	2120      	movs	r1, #32
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ffc8 	bl	8003ee0 <lis3mdl_write_reg>
 8003f50:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d107      	bne.n	8003f68 <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8003f58:	f107 020c 	add.w	r2, r7, #12
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	2123      	movs	r1, #35	; 0x23
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ffa5 	bl	8003eb0 <lis3mdl_read_reg>
 8003f66:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d111      	bne.n	8003f92 <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	7b3b      	ldrb	r3, [r7, #12]
 8003f7c:	f362 0383 	bfi	r3, r2, #2, #2
 8003f80:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 8003f82:	f107 020c 	add.w	r2, r7, #12
 8003f86:	2301      	movs	r3, #1
 8003f88:	2123      	movs	r1, #35	; 0x23
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ffa8 	bl	8003ee0 <lis3mdl_write_reg>
 8003f90:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8003f92:	697b      	ldr	r3, [r7, #20]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <lis3mdl_data_rate_get>:
  * @param  val      Get the values of om in reg CTRL_REG1(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_get(stmdev_ctx_t *ctx, lis3mdl_om_t *val)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  /* z axis, ctrl_reg4 -> omz is aligned with x/y axis ctrl_reg1 -> om*/
  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003fa6:	f107 0208 	add.w	r2, r7, #8
 8003faa:	2301      	movs	r3, #1
 8003fac:	2120      	movs	r1, #32
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff ff7e 	bl	8003eb0 <lis3mdl_read_reg>
 8003fb4:	60f8      	str	r0, [r7, #12]

  switch (ctrl_reg1.om)
 8003fb6:	7a3b      	ldrb	r3, [r7, #8]
 8003fb8:	f3c3 0345 	ubfx	r3, r3, #1, #6
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b3e      	cmp	r3, #62	; 0x3e
 8003fc0:	f200 8106 	bhi.w	80041d0 <lis3mdl_data_rate_get+0x234>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <lis3mdl_data_rate_get+0x30>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	080040c9 	.word	0x080040c9
 8003fd0:	080040d1 	.word	0x080040d1
 8003fd4:	080040f1 	.word	0x080040f1
 8003fd8:	080041d1 	.word	0x080041d1
 8003fdc:	080040f9 	.word	0x080040f9
 8003fe0:	080041d1 	.word	0x080041d1
 8003fe4:	08004101 	.word	0x08004101
 8003fe8:	080041d1 	.word	0x080041d1
 8003fec:	08004109 	.word	0x08004109
 8003ff0:	080041d1 	.word	0x080041d1
 8003ff4:	08004111 	.word	0x08004111
 8003ff8:	080041d1 	.word	0x080041d1
 8003ffc:	08004119 	.word	0x08004119
 8004000:	080041d1 	.word	0x080041d1
 8004004:	08004121 	.word	0x08004121
 8004008:	080041d1 	.word	0x080041d1
 800400c:	080041d1 	.word	0x080041d1
 8004010:	080040d9 	.word	0x080040d9
 8004014:	08004129 	.word	0x08004129
 8004018:	080041d1 	.word	0x080041d1
 800401c:	08004131 	.word	0x08004131
 8004020:	080041d1 	.word	0x080041d1
 8004024:	08004139 	.word	0x08004139
 8004028:	080041d1 	.word	0x080041d1
 800402c:	08004141 	.word	0x08004141
 8004030:	080041d1 	.word	0x080041d1
 8004034:	08004149 	.word	0x08004149
 8004038:	080041d1 	.word	0x080041d1
 800403c:	08004151 	.word	0x08004151
 8004040:	080041d1 	.word	0x080041d1
 8004044:	08004159 	.word	0x08004159
 8004048:	080041d1 	.word	0x080041d1
 800404c:	080041d1 	.word	0x080041d1
 8004050:	080040e1 	.word	0x080040e1
 8004054:	08004161 	.word	0x08004161
 8004058:	080041d1 	.word	0x080041d1
 800405c:	08004169 	.word	0x08004169
 8004060:	080041d1 	.word	0x080041d1
 8004064:	08004171 	.word	0x08004171
 8004068:	080041d1 	.word	0x080041d1
 800406c:	08004179 	.word	0x08004179
 8004070:	080041d1 	.word	0x080041d1
 8004074:	08004181 	.word	0x08004181
 8004078:	080041d1 	.word	0x080041d1
 800407c:	08004189 	.word	0x08004189
 8004080:	080041d1 	.word	0x080041d1
 8004084:	08004191 	.word	0x08004191
 8004088:	080041d1 	.word	0x080041d1
 800408c:	080041d1 	.word	0x080041d1
 8004090:	080040e9 	.word	0x080040e9
 8004094:	08004199 	.word	0x08004199
 8004098:	080041d1 	.word	0x080041d1
 800409c:	080041a1 	.word	0x080041a1
 80040a0:	080041d1 	.word	0x080041d1
 80040a4:	080041a9 	.word	0x080041a9
 80040a8:	080041d1 	.word	0x080041d1
 80040ac:	080041b1 	.word	0x080041b1
 80040b0:	080041d1 	.word	0x080041d1
 80040b4:	080041b9 	.word	0x080041b9
 80040b8:	080041d1 	.word	0x080041d1
 80040bc:	080041c1 	.word	0x080041c1
 80040c0:	080041d1 	.word	0x080041d1
 80040c4:	080041c9 	.word	0x080041c9
  {
    case LIS3MDL_LP_Hz625:
      *val = LIS3MDL_LP_Hz625;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
      break;
 80040ce:	e083      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_1kHz:
      *val = LIS3MDL_LP_1kHz;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
      break;
 80040d6:	e07f      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_560Hz:
      *val = LIS3MDL_MP_560Hz;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2211      	movs	r2, #17
 80040dc:	701a      	strb	r2, [r3, #0]
      break;
 80040de:	e07b      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_300Hz:
      *val = LIS3MDL_HP_300Hz;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2221      	movs	r2, #33	; 0x21
 80040e4:	701a      	strb	r2, [r3, #0]
      break;
 80040e6:	e077      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_155Hz:
      *val = LIS3MDL_UHP_155Hz;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2231      	movs	r2, #49	; 0x31
 80040ec:	701a      	strb	r2, [r3, #0]
      break;
 80040ee:	e073      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_1Hz25:
      *val = LIS3MDL_LP_1Hz25;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2202      	movs	r2, #2
 80040f4:	701a      	strb	r2, [r3, #0]
      break;
 80040f6:	e06f      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_2Hz5:
      *val = LIS3MDL_LP_2Hz5;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2204      	movs	r2, #4
 80040fc:	701a      	strb	r2, [r3, #0]
      break;
 80040fe:	e06b      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_5Hz:
      *val = LIS3MDL_LP_5Hz;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2206      	movs	r2, #6
 8004104:	701a      	strb	r2, [r3, #0]
      break;
 8004106:	e067      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_10Hz:
      *val = LIS3MDL_LP_10Hz;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2208      	movs	r2, #8
 800410c:	701a      	strb	r2, [r3, #0]
      break;
 800410e:	e063      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_20Hz:
      *val = LIS3MDL_LP_20Hz;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	220a      	movs	r2, #10
 8004114:	701a      	strb	r2, [r3, #0]
      break;
 8004116:	e05f      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_40Hz:
      *val = LIS3MDL_LP_40Hz;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	220c      	movs	r2, #12
 800411c:	701a      	strb	r2, [r3, #0]
      break;
 800411e:	e05b      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_80Hz:
      *val = LIS3MDL_LP_80Hz;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	220e      	movs	r2, #14
 8004124:	701a      	strb	r2, [r3, #0]
      break;
 8004126:	e057      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_1Hz25:
      *val = LIS3MDL_MP_1Hz25;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2212      	movs	r2, #18
 800412c:	701a      	strb	r2, [r3, #0]
      break;
 800412e:	e053      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_2Hz5:
      *val = LIS3MDL_MP_2Hz5;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2214      	movs	r2, #20
 8004134:	701a      	strb	r2, [r3, #0]
      break;
 8004136:	e04f      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_5Hz:
      *val = LIS3MDL_MP_5Hz;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2216      	movs	r2, #22
 800413c:	701a      	strb	r2, [r3, #0]
      break;
 800413e:	e04b      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_10Hz:
      *val = LIS3MDL_MP_10Hz;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2218      	movs	r2, #24
 8004144:	701a      	strb	r2, [r3, #0]
      break;
 8004146:	e047      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_20Hz:
      *val = LIS3MDL_MP_20Hz;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	221a      	movs	r2, #26
 800414c:	701a      	strb	r2, [r3, #0]
      break;
 800414e:	e043      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_40Hz:
      *val = LIS3MDL_MP_40Hz;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	221c      	movs	r2, #28
 8004154:	701a      	strb	r2, [r3, #0]
      break;
 8004156:	e03f      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_80Hz:
      *val = LIS3MDL_MP_80Hz;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	221e      	movs	r2, #30
 800415c:	701a      	strb	r2, [r3, #0]
      break;
 800415e:	e03b      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_1Hz25:
      *val = LIS3MDL_HP_1Hz25;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2222      	movs	r2, #34	; 0x22
 8004164:	701a      	strb	r2, [r3, #0]
      break;
 8004166:	e037      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_2Hz5:
      *val = LIS3MDL_HP_2Hz5;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	701a      	strb	r2, [r3, #0]
      break;
 800416e:	e033      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_5Hz:
      *val = LIS3MDL_HP_5Hz;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2226      	movs	r2, #38	; 0x26
 8004174:	701a      	strb	r2, [r3, #0]
      break;
 8004176:	e02f      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_10Hz:
      *val = LIS3MDL_HP_10Hz;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2228      	movs	r2, #40	; 0x28
 800417c:	701a      	strb	r2, [r3, #0]
      break;
 800417e:	e02b      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_20Hz:
      *val = LIS3MDL_HP_20Hz;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	222a      	movs	r2, #42	; 0x2a
 8004184:	701a      	strb	r2, [r3, #0]
      break;
 8004186:	e027      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_40Hz:
      *val = LIS3MDL_HP_40Hz;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	222c      	movs	r2, #44	; 0x2c
 800418c:	701a      	strb	r2, [r3, #0]
      break;
 800418e:	e023      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_80Hz:
      *val = LIS3MDL_HP_80Hz;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	222e      	movs	r2, #46	; 0x2e
 8004194:	701a      	strb	r2, [r3, #0]
      break;
 8004196:	e01f      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_1Hz25:
      *val = LIS3MDL_UHP_1Hz25;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2232      	movs	r2, #50	; 0x32
 800419c:	701a      	strb	r2, [r3, #0]
      break;
 800419e:	e01b      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_2Hz5:
      *val = LIS3MDL_UHP_2Hz5;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2234      	movs	r2, #52	; 0x34
 80041a4:	701a      	strb	r2, [r3, #0]
      break;
 80041a6:	e017      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_5Hz:
      *val = LIS3MDL_UHP_5Hz;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2236      	movs	r2, #54	; 0x36
 80041ac:	701a      	strb	r2, [r3, #0]
      break;
 80041ae:	e013      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_10Hz:
      *val = LIS3MDL_UHP_10Hz;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2238      	movs	r2, #56	; 0x38
 80041b4:	701a      	strb	r2, [r3, #0]
      break;
 80041b6:	e00f      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_20Hz:
      *val = LIS3MDL_UHP_20Hz;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	223a      	movs	r2, #58	; 0x3a
 80041bc:	701a      	strb	r2, [r3, #0]
      break;
 80041be:	e00b      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_40Hz:
      *val = LIS3MDL_UHP_40Hz;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	223c      	movs	r2, #60	; 0x3c
 80041c4:	701a      	strb	r2, [r3, #0]
      break;
 80041c6:	e007      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_80Hz:
      *val = LIS3MDL_UHP_80Hz;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	223e      	movs	r2, #62	; 0x3e
 80041cc:	701a      	strb	r2, [r3, #0]
      break;
 80041ce:	e003      	b.n	80041d8 <lis3mdl_data_rate_get+0x23c>

    default:
      *val = LIS3MDL_UHP_80Hz;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	223e      	movs	r2, #62	; 0x3e
 80041d4:	701a      	strb	r2, [r3, #0]
      break;
 80041d6:	bf00      	nop
  }

  return ret;
 80041d8:	68fb      	ldr	r3, [r7, #12]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop

080041e4 <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80041f0:	f107 0208 	add.w	r2, r7, #8
 80041f4:	2301      	movs	r3, #1
 80041f6:	2121      	movs	r1, #33	; 0x21
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff fe59 	bl	8003eb0 <lis3mdl_read_reg>
 80041fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10f      	bne.n	8004226 <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	b2da      	uxtb	r2, r3
 800420e:	7a3b      	ldrb	r3, [r7, #8]
 8004210:	f362 1346 	bfi	r3, r2, #5, #2
 8004214:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004216:	f107 0208 	add.w	r2, r7, #8
 800421a:	2301      	movs	r3, #1
 800421c:	2121      	movs	r1, #33	; 0x21
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fe5e 	bl	8003ee0 <lis3mdl_write_reg>
 8004224:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004226:	68fb      	ldr	r3, [r7, #12]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <lis3mdl_full_scale_get>:
  * @param  val      get the values of fs in reg CTRL_REG2(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_get(stmdev_ctx_t *ctx, lis3mdl_fs_t *val)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800423a:	f107 0208 	add.w	r2, r7, #8
 800423e:	2301      	movs	r3, #1
 8004240:	2121      	movs	r1, #33	; 0x21
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff fe34 	bl	8003eb0 <lis3mdl_read_reg>
 8004248:	60f8      	str	r0, [r7, #12]

  switch (ctrl_reg2.fs)
 800424a:	7a3b      	ldrb	r3, [r7, #8]
 800424c:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b03      	cmp	r3, #3
 8004254:	d81a      	bhi.n	800428c <lis3mdl_full_scale_get+0x5c>
 8004256:	a201      	add	r2, pc, #4	; (adr r2, 800425c <lis3mdl_full_scale_get+0x2c>)
 8004258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425c:	0800426d 	.word	0x0800426d
 8004260:	08004275 	.word	0x08004275
 8004264:	0800427d 	.word	0x0800427d
 8004268:	08004285 	.word	0x08004285
  {
    case LIS3MDL_4_GAUSS:
      *val = LIS3MDL_4_GAUSS;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
      break;
 8004272:	e00f      	b.n	8004294 <lis3mdl_full_scale_get+0x64>

    case LIS3MDL_8_GAUSS:
      *val = LIS3MDL_8_GAUSS;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2201      	movs	r2, #1
 8004278:	701a      	strb	r2, [r3, #0]
      break;
 800427a:	e00b      	b.n	8004294 <lis3mdl_full_scale_get+0x64>

    case LIS3MDL_12_GAUSS:
      *val = LIS3MDL_12_GAUSS;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2202      	movs	r2, #2
 8004280:	701a      	strb	r2, [r3, #0]
      break;
 8004282:	e007      	b.n	8004294 <lis3mdl_full_scale_get+0x64>

    case LIS3MDL_16_GAUSS:
      *val = LIS3MDL_16_GAUSS;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2203      	movs	r2, #3
 8004288:	701a      	strb	r2, [r3, #0]
      break;
 800428a:	e003      	b.n	8004294 <lis3mdl_full_scale_get+0x64>

    default:
      *val = LIS3MDL_4_GAUSS;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
      break;
 8004292:	bf00      	nop
  }

  return ret;
 8004294:	68fb      	ldr	r3, [r7, #12]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop

080042a0 <lis3mdl_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis3mdl_md_t val)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 80042ac:	f107 0208 	add.w	r2, r7, #8
 80042b0:	2301      	movs	r3, #1
 80042b2:	2122      	movs	r1, #34	; 0x22
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff fdfb 	bl	8003eb0 <lis3mdl_read_reg>
 80042ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10f      	bne.n	80042e2 <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	7a3b      	ldrb	r3, [r7, #8]
 80042cc:	f362 0301 	bfi	r3, r2, #0, #2
 80042d0:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 80042d2:	f107 0208 	add.w	r2, r7, #8
 80042d6:	2301      	movs	r3, #1
 80042d8:	2122      	movs	r1, #34	; 0x22
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff fe00 	bl	8003ee0 <lis3mdl_write_reg>
 80042e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042e2:	68fb      	ldr	r3, [r7, #12]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 80042f8:	f107 0208 	add.w	r2, r7, #8
 80042fc:	2301      	movs	r3, #1
 80042fe:	2124      	movs	r1, #36	; 0x24
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff fdd5 	bl	8003eb0 <lis3mdl_read_reg>
 8004306:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10f      	bne.n	800432e <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	b2da      	uxtb	r2, r3
 8004316:	7a3b      	ldrb	r3, [r7, #8]
 8004318:	f362 1386 	bfi	r3, r2, #6, #1
 800431c:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 800431e:	f107 0208 	add.w	r2, r7, #8
 8004322:	2301      	movs	r3, #1
 8004324:	2124      	movs	r1, #36	; 0x24
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff fdda 	bl	8003ee0 <lis3mdl_write_reg>
 800432c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800432e:	68fb      	ldr	r3, [r7, #12]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t *) buff, 6);
 8004342:	f107 020c 	add.w	r2, r7, #12
 8004346:	2306      	movs	r3, #6
 8004348:	2128      	movs	r1, #40	; 0x28
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff fdb0 	bl	8003eb0 <lis3mdl_read_reg>
 8004350:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004352:	7b7b      	ldrb	r3, [r7, #13]
 8004354:	b21a      	sxth	r2, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004360:	b29b      	uxth	r3, r3
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	b29a      	uxth	r2, r3
 8004366:	7b3b      	ldrb	r3, [r7, #12]
 8004368:	b29b      	uxth	r3, r3
 800436a:	4413      	add	r3, r2
 800436c:	b29b      	uxth	r3, r3
 800436e:	b21a      	sxth	r2, r3
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004374:	7bfa      	ldrb	r2, [r7, #15]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	3302      	adds	r3, #2
 800437a:	b212      	sxth	r2, r2
 800437c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	3302      	adds	r3, #2
 8004382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004386:	b29b      	uxth	r3, r3
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	b29a      	uxth	r2, r3
 800438c:	7bbb      	ldrb	r3, [r7, #14]
 800438e:	b29b      	uxth	r3, r3
 8004390:	4413      	add	r3, r2
 8004392:	b29a      	uxth	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	3302      	adds	r3, #2
 8004398:	b212      	sxth	r2, r2
 800439a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800439c:	7c7a      	ldrb	r2, [r7, #17]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	3304      	adds	r3, #4
 80043a2:	b212      	sxth	r2, r2
 80043a4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	3304      	adds	r3, #4
 80043aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	7c3b      	ldrb	r3, [r7, #16]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	4413      	add	r3, r2
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	3304      	adds	r3, #4
 80043c0:	b212      	sxth	r2, r2
 80043c2:	801a      	strh	r2, [r3, #0]

  return ret;
 80043c4:	697b      	ldr	r3, [r7, #20]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 80043d8:	2301      	movs	r3, #1
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	210f      	movs	r1, #15
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff fd66 	bl	8003eb0 <lis3mdl_read_reg>
 80043e4:	60f8      	str	r0, [r7, #12]

  return ret;
 80043e6:	68fb      	ldr	r3, [r7, #12]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <LPS22HB_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d103      	bne.n	800440c <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8004404:	f04f 33ff 	mov.w	r3, #4294967295
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e051      	b.n	80044b0 <LPS22HB_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	7b1a      	ldrb	r2, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	695a      	ldr	r2, [r3, #20]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	699a      	ldr	r2, [r3, #24]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <LPS22HB_RegisterBusIO+0xcc>)
 8004448:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <LPS22HB_RegisterBusIO+0xd0>)
 800444e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <LPS22HB_RegisterBusIO+0x7e>
    {
      ret = LPS22HB_ERROR;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e020      	b.n	80044b0 <LPS22HB_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4798      	blx	r3
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <LPS22HB_RegisterBusIO+0x92>
    {
      ret = LPS22HB_ERROR;
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e016      	b.n	80044b0 <LPS22HB_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d112      	bne.n	80044b0 <LPS22HB_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10d      	bne.n	80044b0 <LPS22HB_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004494:	2301      	movs	r3, #1
 8004496:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8004498:	7afb      	ldrb	r3, [r7, #11]
 800449a:	461a      	mov	r2, r3
 800449c:	2110      	movs	r1, #16
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f8a1 	bl	80045e6 <LPS22HB_Write_Reg>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <LPS22HB_RegisterBusIO+0xc0>
          {
            ret = LPS22HB_ERROR;
 80044aa:	f04f 33ff 	mov.w	r3, #4294967295
 80044ae:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80044b0:	68fb      	ldr	r3, [r7, #12]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	080048a7 	.word	0x080048a7
 80044c0:	0800492d 	.word	0x0800492d

080044c4 <LPS22HB_Init>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d108      	bne.n	80044e8 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f98c 	bl	80047f4 <LPS22HB_Initialize>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 80044e2:	f04f 33ff 	mov.w	r3, #4294967295
 80044e6:	e004      	b.n	80044f2 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <LPS22HB_PRESS_Enable>:
  * @brief  Enable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e014      	b.n	800453a <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f103 0220 	add.w	r2, r3, #32
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800451c:	4619      	mov	r1, r3
 800451e:	4610      	mov	r0, r2
 8004520:	f000 fadc 	bl	8004adc <lps22hb_data_rate_set>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 800452a:	f04f 33ff 	mov.w	r3, #4294967295
 800452e:	e004      	b.n	800453a <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <LPS22HB_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f864 	bl	800461c <LPS22HB_GetOutputDataRate>
 8004554:	4603      	mov	r3, r0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <LPS22HB_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004570:	2b01      	cmp	r3, #1
 8004572:	d106      	bne.n	8004582 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004574:	ed97 0a00 	vldr	s0, [r7]
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f8a3 	bl	80046c4 <LPS22HB_SetOutputDataRate_When_Enabled>
 800457e:	4603      	mov	r3, r0
 8004580:	e005      	b.n	800458e <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004582:	ed97 0a00 	vldr	s0, [r7]
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f8f4 	bl	8004774 <LPS22HB_SetOutputDataRate_When_Disabled>
 800458c:	4603      	mov	r3, r0
  }
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <LPS22HB_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80045a0:	f107 030c 	add.w	r3, r7, #12
 80045a4:	2204      	movs	r2, #4
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f009 f861 	bl	800d670 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3320      	adds	r3, #32
 80045b2:	f107 020c 	add.w	r2, r7, #12
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 faf9 	bl	8004bb0 <lps22hb_pressure_raw_get>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 80045c4:	f04f 33ff 	mov.w	r3, #4294967295
 80045c8:	e009      	b.n	80045de <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fa21 	bl	8004a14 <lps22hb_from_lsb_to_hpa>
 80045d2:	eef0 7a40 	vmov.f32	s15, s0
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <LPS22HB_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	460b      	mov	r3, r1
 80045f0:	70fb      	strb	r3, [r7, #3]
 80045f2:	4613      	mov	r3, r2
 80045f4:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f103 0020 	add.w	r0, r3, #32
 80045fc:	1cba      	adds	r2, r7, #2
 80045fe:	78f9      	ldrb	r1, [r7, #3]
 8004600:	2301      	movs	r3, #1
 8004602:	f000 f9ee 	bl	80049e2 <lps22hb_write_reg>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 800460c:	f04f 33ff 	mov.w	r3, #4294967295
 8004610:	e000      	b.n	8004614 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <LPS22HB_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3320      	adds	r3, #32
 800462e:	f107 020b 	add.w	r2, r7, #11
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fa77 	bl	8004b28 <lps22hb_data_rate_get>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8004640:	f04f 33ff 	mov.w	r3, #4294967295
 8004644:	e031      	b.n	80046aa <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8004646:	7afb      	ldrb	r3, [r7, #11]
 8004648:	2b05      	cmp	r3, #5
 800464a:	d829      	bhi.n	80046a0 <LPS22HB_GetOutputDataRate+0x84>
 800464c:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <LPS22HB_GetOutputDataRate+0x38>)
 800464e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004652:	bf00      	nop
 8004654:	0800466d 	.word	0x0800466d
 8004658:	08004677 	.word	0x08004677
 800465c:	08004681 	.word	0x08004681
 8004660:	08004689 	.word	0x08004689
 8004664:	08004691 	.word	0x08004691
 8004668:	08004699 	.word	0x08004699
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
      break;
 8004674:	e018      	b.n	80046a8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800467c:	601a      	str	r2, [r3, #0]
      break;
 800467e:	e013      	b.n	80046a8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	4a0c      	ldr	r2, [pc, #48]	; (80046b4 <LPS22HB_GetOutputDataRate+0x98>)
 8004684:	601a      	str	r2, [r3, #0]
      break;
 8004686:	e00f      	b.n	80046a8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4a0b      	ldr	r2, [pc, #44]	; (80046b8 <LPS22HB_GetOutputDataRate+0x9c>)
 800468c:	601a      	str	r2, [r3, #0]
      break;
 800468e:	e00b      	b.n	80046a8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <LPS22HB_GetOutputDataRate+0xa0>)
 8004694:	601a      	str	r2, [r3, #0]
      break;
 8004696:	e007      	b.n	80046a8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <LPS22HB_GetOutputDataRate+0xa4>)
 800469c:	601a      	str	r2, [r3, #0]
      break;
 800469e:	e003      	b.n	80046a8 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 80046a0:	f04f 33ff 	mov.w	r3, #4294967295
 80046a4:	60fb      	str	r3, [r7, #12]
      break;
 80046a6:	bf00      	nop
  }

  return ret;
 80046a8:	68fb      	ldr	r3, [r7, #12]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	41200000 	.word	0x41200000
 80046b8:	41c80000 	.word	0x41c80000
 80046bc:	42480000 	.word	0x42480000
 80046c0:	42960000 	.word	0x42960000

080046c4 <LPS22HB_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80046d0:	edd7 7a00 	vldr	s15, [r7]
 80046d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e0:	d801      	bhi.n	80046e6 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e021      	b.n	800472a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80046e6:	edd7 7a00 	vldr	s15, [r7]
 80046ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80046ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f6:	d801      	bhi.n	80046fc <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e016      	b.n	800472a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80046fc:	edd7 7a00 	vldr	s15, [r7]
 8004700:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470c:	d801      	bhi.n	8004712 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 800470e:	2303      	movs	r3, #3
 8004710:	e00b      	b.n	800472a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8004712:	edd7 7a00 	vldr	s15, [r7]
 8004716:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004770 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 800471a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800471e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004722:	d801      	bhi.n	8004728 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8004724:	2304      	movs	r3, #4
 8004726:	e000      	b.n	800472a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8004728:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800472a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3320      	adds	r3, #32
 8004730:	7bfa      	ldrb	r2, [r7, #15]
 8004732:	4611      	mov	r1, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f000 f9d1 	bl	8004adc <lps22hb_data_rate_set>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8004740:	f04f 33ff 	mov.w	r3, #4294967295
 8004744:	e00f      	b.n	8004766 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f103 0220 	add.w	r2, r3, #32
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3333      	adds	r3, #51	; 0x33
 8004750:	4619      	mov	r1, r3
 8004752:	4610      	mov	r0, r2
 8004754:	f000 f9e8 	bl	8004b28 <lps22hb_data_rate_get>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 800475e:	f04f 33ff 	mov.w	r3, #4294967295
 8004762:	e000      	b.n	8004766 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	42480000 	.word	0x42480000

08004774 <LPS22HB_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004780:	edd7 7a00 	vldr	s15, [r7]
 8004784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004790:	d801      	bhi.n	8004796 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 8004792:	2301      	movs	r3, #1
 8004794:	e021      	b.n	80047da <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004796:	edd7 7a00 	vldr	s15, [r7]
 800479a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800479e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a6:	d801      	bhi.n	80047ac <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e016      	b.n	80047da <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80047ac:	edd7 7a00 	vldr	s15, [r7]
 80047b0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80047b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047bc:	d801      	bhi.n	80047c2 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 80047be:	2303      	movs	r3, #3
 80047c0:	e00b      	b.n	80047da <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80047c2:	edd7 7a00 	vldr	s15, [r7]
 80047c6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80047f0 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 80047ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d2:	d801      	bhi.n	80047d8 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 80047d4:	2304      	movs	r3, #4
 80047d6:	e000      	b.n	80047da <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80047d8:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	42480000 	.word	0x42480000

080047f4 <LPS22HB_Initialize>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3320      	adds	r3, #32
 8004800:	2101      	movs	r1, #1
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f9fd 	bl	8004c02 <lps22hb_low_power_set>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 800480e:	f04f 33ff 	mov.w	r3, #4294967295
 8004812:	e044      	b.n	800489e <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3320      	adds	r3, #32
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 f95e 	bl	8004adc <lps22hb_data_rate_set>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8004826:	f04f 33ff 	mov.w	r3, #4294967295
 800482a:	e038      	b.n	800489e <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3320      	adds	r3, #32
 8004830:	2102      	movs	r1, #2
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f92c 	bl	8004a90 <lps22hb_low_pass_filter_mode_set>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 800483e:	f04f 33ff 	mov.w	r3, #4294967295
 8004842:	e02c      	b.n	800489e <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3320      	adds	r3, #32
 8004848:	2101      	movs	r1, #1
 800484a:	4618      	mov	r0, r3
 800484c:	f000 f8fa 	bl	8004a44 <lps22hb_block_data_update_set>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8004856:	f04f 33ff 	mov.w	r3, #4294967295
 800485a:	e020      	b.n	800489e <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10b      	bne.n	800487c <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3320      	adds	r3, #32
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f000 f9ef 	bl	8004c4e <lps22hb_auto_add_inc_set>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00e      	beq.n	8004894 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004876:	f04f 33ff 	mov.w	r3, #4294967295
 800487a:	e010      	b.n	800489e <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3320      	adds	r3, #32
 8004880:	2101      	movs	r1, #1
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f9e3 	bl	8004c4e <lps22hb_auto_add_inc_set>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800488e:	f04f 33ff 	mov.w	r3, #4294967295
 8004892:	e004      	b.n	800489e <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2203      	movs	r2, #3
 8004898:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HB_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80048a6:	b590      	push	{r4, r7, lr}
 80048a8:	b089      	sub	sp, #36	; 0x24
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	461a      	mov	r2, r3
 80048b2:	460b      	mov	r3, r1
 80048b4:	72fb      	strb	r3, [r7, #11]
 80048b6:	4613      	mov	r3, r2
 80048b8:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d121      	bne.n	800490e <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80048ca:	2300      	movs	r3, #0
 80048cc:	83fb      	strh	r3, [r7, #30]
 80048ce:	e018      	b.n	8004902 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	695c      	ldr	r4, [r3, #20]
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	7b1b      	ldrb	r3, [r3, #12]
 80048d8:	b298      	uxth	r0, r3
 80048da:	7afb      	ldrb	r3, [r7, #11]
 80048dc:	b29a      	uxth	r2, r3
 80048de:	8bfb      	ldrh	r3, [r7, #30]
 80048e0:	4413      	add	r3, r2
 80048e2:	b299      	uxth	r1, r3
 80048e4:	8bfb      	ldrh	r3, [r7, #30]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	441a      	add	r2, r3
 80048ea:	2301      	movs	r3, #1
 80048ec:	47a0      	blx	r4
 80048ee:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80048f6:	f04f 33ff 	mov.w	r3, #4294967295
 80048fa:	e013      	b.n	8004924 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80048fc:	8bfb      	ldrh	r3, [r7, #30]
 80048fe:	3301      	adds	r3, #1
 8004900:	83fb      	strh	r3, [r7, #30]
 8004902:	8bfa      	ldrh	r2, [r7, #30]
 8004904:	893b      	ldrh	r3, [r7, #8]
 8004906:	429a      	cmp	r2, r3
 8004908:	d3e2      	bcc.n	80048d0 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	e00a      	b.n	8004924 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	695c      	ldr	r4, [r3, #20]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	7b1b      	ldrb	r3, [r3, #12]
 8004916:	b298      	uxth	r0, r3
 8004918:	7afb      	ldrb	r3, [r7, #11]
 800491a:	b299      	uxth	r1, r3
 800491c:	893b      	ldrh	r3, [r7, #8]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	47a0      	blx	r4
 8004922:	4603      	mov	r3, r0
  }
}
 8004924:	4618      	mov	r0, r3
 8004926:	3724      	adds	r7, #36	; 0x24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd90      	pop	{r4, r7, pc}

0800492c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800492c:	b590      	push	{r4, r7, lr}
 800492e:	b089      	sub	sp, #36	; 0x24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	461a      	mov	r2, r3
 8004938:	460b      	mov	r3, r1
 800493a:	72fb      	strb	r3, [r7, #11]
 800493c:	4613      	mov	r3, r2
 800493e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d121      	bne.n	8004994 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8004950:	2300      	movs	r3, #0
 8004952:	83fb      	strh	r3, [r7, #30]
 8004954:	e018      	b.n	8004988 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	691c      	ldr	r4, [r3, #16]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	7b1b      	ldrb	r3, [r3, #12]
 800495e:	b298      	uxth	r0, r3
 8004960:	7afb      	ldrb	r3, [r7, #11]
 8004962:	b29a      	uxth	r2, r3
 8004964:	8bfb      	ldrh	r3, [r7, #30]
 8004966:	4413      	add	r3, r2
 8004968:	b299      	uxth	r1, r3
 800496a:	8bfb      	ldrh	r3, [r7, #30]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	441a      	add	r2, r3
 8004970:	2301      	movs	r3, #1
 8004972:	47a0      	blx	r4
 8004974:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800497c:	f04f 33ff 	mov.w	r3, #4294967295
 8004980:	e013      	b.n	80049aa <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004982:	8bfb      	ldrh	r3, [r7, #30]
 8004984:	3301      	adds	r3, #1
 8004986:	83fb      	strh	r3, [r7, #30]
 8004988:	8bfa      	ldrh	r2, [r7, #30]
 800498a:	893b      	ldrh	r3, [r7, #8]
 800498c:	429a      	cmp	r2, r3
 800498e:	d3e2      	bcc.n	8004956 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	e00a      	b.n	80049aa <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	691c      	ldr	r4, [r3, #16]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	7b1b      	ldrb	r3, [r3, #12]
 800499c:	b298      	uxth	r0, r3
 800499e:	7afb      	ldrb	r3, [r7, #11]
 80049a0:	b299      	uxth	r1, r3
 80049a2:	893b      	ldrh	r3, [r7, #8]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	47a0      	blx	r4
 80049a8:	4603      	mov	r3, r0
  }
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3724      	adds	r7, #36	; 0x24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd90      	pop	{r4, r7, pc}

080049b2 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80049b2:	b590      	push	{r4, r7, lr}
 80049b4:	b087      	sub	sp, #28
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	461a      	mov	r2, r3
 80049be:	460b      	mov	r3, r1
 80049c0:	72fb      	strb	r3, [r7, #11]
 80049c2:	4613      	mov	r3, r2
 80049c4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685c      	ldr	r4, [r3, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	68d8      	ldr	r0, [r3, #12]
 80049ce:	893b      	ldrh	r3, [r7, #8]
 80049d0:	7af9      	ldrb	r1, [r7, #11]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	47a0      	blx	r4
 80049d6:	6178      	str	r0, [r7, #20]

  return ret;
 80049d8:	697b      	ldr	r3, [r7, #20]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd90      	pop	{r4, r7, pc}

080049e2 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80049e2:	b590      	push	{r4, r7, lr}
 80049e4:	b087      	sub	sp, #28
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	461a      	mov	r2, r3
 80049ee:	460b      	mov	r3, r1
 80049f0:	72fb      	strb	r3, [r7, #11]
 80049f2:	4613      	mov	r3, r2
 80049f4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681c      	ldr	r4, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	68d8      	ldr	r0, [r3, #12]
 80049fe:	893b      	ldrh	r3, [r7, #8]
 8004a00:	7af9      	ldrb	r1, [r7, #11]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	47a0      	blx	r4
 8004a06:	6178      	str	r0, [r7, #20]

  return ret;
 8004a08:	697b      	ldr	r3, [r7, #20]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd90      	pop	{r4, r7, pc}
	...

08004a14 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a26:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004a40 <lps22hb_from_lsb_to_hpa+0x2c>
 8004a2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a2e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004a32:	eeb0 0a67 	vmov.f32	s0, s15
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	49800000 	.word	0x49800000

08004a44 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004a50:	f107 0208 	add.w	r2, r7, #8
 8004a54:	2301      	movs	r3, #1
 8004a56:	2110      	movs	r1, #16
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff ffaa 	bl	80049b2 <lps22hb_read_reg>
 8004a5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10f      	bne.n	8004a86 <lps22hb_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	7a3b      	ldrb	r3, [r7, #8]
 8004a70:	f362 0341 	bfi	r3, r2, #1, #1
 8004a74:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004a76:	f107 0208 	add.w	r2, r7, #8
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	2110      	movs	r1, #16
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff ffaf 	bl	80049e2 <lps22hb_write_reg>
 8004a84:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a86:	68fb      	ldr	r3, [r7, #12]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004a9c:	f107 0208 	add.w	r2, r7, #8
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	2110      	movs	r1, #16
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ff84 	bl	80049b2 <lps22hb_read_reg>
 8004aaa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10f      	bne.n	8004ad2 <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	7a3b      	ldrb	r3, [r7, #8]
 8004abc:	f362 0383 	bfi	r3, r2, #2, #2
 8004ac0:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004ac2:	f107 0208 	add.w	r2, r7, #8
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	2110      	movs	r1, #16
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff ff89 	bl	80049e2 <lps22hb_write_reg>
 8004ad0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004ae8:	f107 0208 	add.w	r2, r7, #8
 8004aec:	2301      	movs	r3, #1
 8004aee:	2110      	movs	r1, #16
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff ff5e 	bl	80049b2 <lps22hb_read_reg>
 8004af6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10f      	bne.n	8004b1e <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8004afe:	78fb      	ldrb	r3, [r7, #3]
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	7a3b      	ldrb	r3, [r7, #8]
 8004b08:	f362 1306 	bfi	r3, r2, #4, #3
 8004b0c:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004b0e:	f107 0208 	add.w	r2, r7, #8
 8004b12:	2301      	movs	r3, #1
 8004b14:	2110      	movs	r1, #16
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ff63 	bl	80049e2 <lps22hb_write_reg>
 8004b1c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004b32:	f107 0208 	add.w	r2, r7, #8
 8004b36:	2301      	movs	r3, #1
 8004b38:	2110      	movs	r1, #16
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff ff39 	bl	80049b2 <lps22hb_read_reg>
 8004b40:	60f8      	str	r0, [r7, #12]

  switch (ctrl_reg1.odr)
 8004b42:	7a3b      	ldrb	r3, [r7, #8]
 8004b44:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	d826      	bhi.n	8004b9c <lps22hb_data_rate_get+0x74>
 8004b4e:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <lps22hb_data_rate_get+0x2c>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004b6d 	.word	0x08004b6d
 8004b58:	08004b75 	.word	0x08004b75
 8004b5c:	08004b7d 	.word	0x08004b7d
 8004b60:	08004b85 	.word	0x08004b85
 8004b64:	08004b8d 	.word	0x08004b8d
 8004b68:	08004b95 	.word	0x08004b95
  {
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	701a      	strb	r2, [r3, #0]
      break;
 8004b72:	e017      	b.n	8004ba4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2201      	movs	r2, #1
 8004b78:	701a      	strb	r2, [r3, #0]
      break;
 8004b7a:	e013      	b.n	8004ba4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	701a      	strb	r2, [r3, #0]
      break;
 8004b82:	e00f      	b.n	8004ba4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2203      	movs	r2, #3
 8004b88:	701a      	strb	r2, [r3, #0]
      break;
 8004b8a:	e00b      	b.n	8004ba4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2204      	movs	r2, #4
 8004b90:	701a      	strb	r2, [r3, #0]
      break;
 8004b92:	e007      	b.n	8004ba4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2205      	movs	r2, #5
 8004b98:	701a      	strb	r2, [r3, #0]
      break;
 8004b9a:	e003      	b.n	8004ba4 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	701a      	strb	r2, [r3, #0]
      break;
 8004ba2:	bf00      	nop
  }

  return ret;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop

08004bb0 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8004bba:	f107 0208 	add.w	r2, r7, #8
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	2128      	movs	r1, #40	; 0x28
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff fef5 	bl	80049b2 <lps22hb_read_reg>
 8004bc8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004bca:	7abb      	ldrb	r3, [r7, #10]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	7a7a      	ldrb	r2, [r7, #9]
 8004bda:	441a      	add	r2, r3
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	7a3a      	ldrb	r2, [r7, #8]
 8004be8:	441a      	add	r2, r3
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	021a      	lsls	r2, r3, #8
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	601a      	str	r2, [r3, #0]

  return ret;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 8004c0e:	f107 0208 	add.w	r2, r7, #8
 8004c12:	2301      	movs	r3, #1
 8004c14:	211a      	movs	r1, #26
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff fecb 	bl	80049b2 <lps22hb_read_reg>
 8004c1c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10f      	bne.n	8004c44 <lps22hb_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	7a3b      	ldrb	r3, [r7, #8]
 8004c2e:	f362 0300 	bfi	r3, r2, #0, #1
 8004c32:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 8004c34:	f107 0208 	add.w	r2, r7, #8
 8004c38:	2301      	movs	r3, #1
 8004c3a:	211a      	movs	r1, #26
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff fed0 	bl	80049e2 <lps22hb_write_reg>
 8004c42:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c44:	68fb      	ldr	r3, [r7, #12]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004c5a:	f107 0208 	add.w	r2, r7, #8
 8004c5e:	2301      	movs	r3, #1
 8004c60:	2111      	movs	r1, #17
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff fea5 	bl	80049b2 <lps22hb_read_reg>
 8004c68:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10f      	bne.n	8004c90 <lps22hb_auto_add_inc_set+0x42>
  {
    ctrl_reg2.if_add_inc = val;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	7a3b      	ldrb	r3, [r7, #8]
 8004c7a:	f362 1304 	bfi	r3, r2, #4, #1
 8004c7e:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004c80:	f107 0208 	add.w	r2, r7, #8
 8004c84:	2301      	movs	r3, #1
 8004c86:	2111      	movs	r1, #17
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff feaa 	bl	80049e2 <lps22hb_write_reg>
 8004c8e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c90:	68fb      	ldr	r3, [r7, #12]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d103      	bne.n	8004cb8 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8004cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	e051      	b.n	8004d5c <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	7b1a      	ldrb	r2, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	699a      	ldr	r2, [r3, #24]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a1d      	ldr	r2, [pc, #116]	; (8004d68 <LSM6DSL_RegisterBusIO+0xcc>)
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a1c      	ldr	r2, [pc, #112]	; (8004d6c <LSM6DSL_RegisterBusIO+0xd0>)
 8004cfa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d103      	bne.n	8004d1a <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8004d12:	f04f 33ff 	mov.w	r3, #4294967295
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	e020      	b.n	8004d5c <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4798      	blx	r3
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8004d26:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	e016      	b.n	8004d5c <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d112      	bne.n	8004d5c <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10d      	bne.n	8004d5c <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004d40:	230c      	movs	r3, #12
 8004d42:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8004d44:	7afb      	ldrb	r3, [r7, #11]
 8004d46:	461a      	mov	r2, r3
 8004d48:	2112      	movs	r1, #18
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fb60 	bl	8005410 <LSM6DSL_Write_Reg>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8004d56:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	080056cd 	.word	0x080056cd
 8004d6c:	08005703 	.word	0x08005703

08004d70 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3320      	adds	r3, #32
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 ffb3 	bl	8005cea <lsm6dsl_auto_increment_set>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8e:	e054      	b.n	8004e3a <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3320      	adds	r3, #32
 8004d94:	2101      	movs	r1, #1
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 feda 	bl	8005b50 <lsm6dsl_block_data_update_set>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8004da2:	f04f 33ff 	mov.w	r3, #4294967295
 8004da6:	e048      	b.n	8004e3a <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3320      	adds	r3, #32
 8004dac:	2100      	movs	r1, #0
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 f9fa 	bl	80061a8 <lsm6dsl_fifo_mode_set>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8004dba:	f04f 33ff 	mov.w	r3, #4294967295
 8004dbe:	e03c      	b.n	8004e3a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2204      	movs	r2, #4
 8004dc4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3320      	adds	r3, #32
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fd40 	bl	8005854 <lsm6dsl_xl_data_rate_set>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8004dda:	f04f 33ff 	mov.w	r3, #4294967295
 8004dde:	e02c      	b.n	8004e3a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3320      	adds	r3, #32
 8004de4:	2100      	movs	r1, #0
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fcd6 	bl	8005798 <lsm6dsl_xl_full_scale_set>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8004df2:	f04f 33ff 	mov.w	r3, #4294967295
 8004df6:	e020      	b.n	8004e3a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3320      	adds	r3, #32
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fe1a 	bl	8005a40 <lsm6dsl_gy_data_rate_set>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8004e12:	f04f 33ff 	mov.w	r3, #4294967295
 8004e16:	e010      	b.n	8004e3a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3320      	adds	r3, #32
 8004e1c:	2106      	movs	r1, #6
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fda6 	bl	8005970 <lsm6dsl_gy_full_scale_set>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8004e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2e:	e004      	b.n	8004e3a <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b082      	sub	sp, #8
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3320      	adds	r3, #32
 8004e50:	6839      	ldr	r1, [r7, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 ff38 	bl	8005cc8 <lsm6dsl_device_id_get>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8004e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e62:	e000      	b.n	8004e66 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e014      	b.n	8004eae <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f103 0220 	add.w	r2, r3, #32
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f000 fcde 	bl	8005854 <lsm6dsl_xl_data_rate_set>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea2:	e004      	b.n	8004eae <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3320      	adds	r3, #32
 8004eca:	f107 020b 	add.w	r2, r7, #11
 8004ece:	4611      	mov	r1, r2
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fc87 	bl	80057e4 <lsm6dsl_xl_full_scale_get>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004edc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee0:	e023      	b.n	8004f2a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004ee2:	7afb      	ldrb	r3, [r7, #11]
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d81b      	bhi.n	8004f20 <LSM6DSL_ACC_GetSensitivity+0x68>
 8004ee8:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8004eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eee:	bf00      	nop
 8004ef0:	08004f01 	.word	0x08004f01
 8004ef4:	08004f19 	.word	0x08004f19
 8004ef8:	08004f09 	.word	0x08004f09
 8004efc:	08004f11 	.word	0x08004f11
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	4a0c      	ldr	r2, [pc, #48]	; (8004f34 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004f04:	601a      	str	r2, [r3, #0]
      break;
 8004f06:	e00f      	b.n	8004f28 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	4a0b      	ldr	r2, [pc, #44]	; (8004f38 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8004f0c:	601a      	str	r2, [r3, #0]
      break;
 8004f0e:	e00b      	b.n	8004f28 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004f14:	601a      	str	r2, [r3, #0]
      break;
 8004f16:	e007      	b.n	8004f28 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8004f1c:	601a      	str	r2, [r3, #0]
      break;
 8004f1e:	e003      	b.n	8004f28 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004f20:	f04f 33ff 	mov.w	r3, #4294967295
 8004f24:	60fb      	str	r3, [r7, #12]
      break;
 8004f26:	bf00      	nop
  }

  return ret;
 8004f28:	68fb      	ldr	r3, [r7, #12]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	3d79db23 	.word	0x3d79db23
 8004f38:	3df9db23 	.word	0x3df9db23
 8004f3c:	3e79db23 	.word	0x3e79db23
 8004f40:	3ef9db23 	.word	0x3ef9db23

08004f44 <LSM6DSL_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3320      	adds	r3, #32
 8004f56:	f107 020b 	add.w	r2, r7, #11
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fc9f 	bl	80058a0 <lsm6dsl_xl_data_rate_get>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004f68:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6c:	e054      	b.n	8005018 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8004f6e:	7afb      	ldrb	r3, [r7, #11]
 8004f70:	2b0b      	cmp	r3, #11
 8004f72:	d84c      	bhi.n	800500e <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fad 	.word	0x08004fad
 8004f80:	08004fbf 	.word	0x08004fbf
 8004f84:	08004fc7 	.word	0x08004fc7
 8004f88:	08004fcf 	.word	0x08004fcf
 8004f8c:	08004fd7 	.word	0x08004fd7
 8004f90:	08004fdf 	.word	0x08004fdf
 8004f94:	08004fe7 	.word	0x08004fe7
 8004f98:	08004fef 	.word	0x08004fef
 8004f9c:	08004ff7 	.word	0x08004ff7
 8004fa0:	08004fff 	.word	0x08004fff
 8004fa4:	08005007 	.word	0x08005007
 8004fa8:	08004fb7 	.word	0x08004fb7
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
      break;
 8004fb4:	e02f      	b.n	8005016 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	4a19      	ldr	r2, [pc, #100]	; (8005020 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8004fba:	601a      	str	r2, [r3, #0]
      break;
 8004fbc:	e02b      	b.n	8005016 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	4a18      	ldr	r2, [pc, #96]	; (8005024 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8004fc2:	601a      	str	r2, [r3, #0]
      break;
 8004fc4:	e027      	b.n	8005016 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	4a17      	ldr	r2, [pc, #92]	; (8005028 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8004fca:	601a      	str	r2, [r3, #0]
      break;
 8004fcc:	e023      	b.n	8005016 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	4a16      	ldr	r2, [pc, #88]	; (800502c <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8004fd2:	601a      	str	r2, [r3, #0]
      break;
 8004fd4:	e01f      	b.n	8005016 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	4a15      	ldr	r2, [pc, #84]	; (8005030 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8004fda:	601a      	str	r2, [r3, #0]
      break;
 8004fdc:	e01b      	b.n	8005016 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	4a14      	ldr	r2, [pc, #80]	; (8005034 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8004fe2:	601a      	str	r2, [r3, #0]
      break;
 8004fe4:	e017      	b.n	8005016 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	4a13      	ldr	r2, [pc, #76]	; (8005038 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8004fea:	601a      	str	r2, [r3, #0]
      break;
 8004fec:	e013      	b.n	8005016 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	4a12      	ldr	r2, [pc, #72]	; (800503c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8004ff2:	601a      	str	r2, [r3, #0]
      break;
 8004ff4:	e00f      	b.n	8005016 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	4a11      	ldr	r2, [pc, #68]	; (8005040 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8004ffa:	601a      	str	r2, [r3, #0]
      break;
 8004ffc:	e00b      	b.n	8005016 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	4a10      	ldr	r2, [pc, #64]	; (8005044 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8005002:	601a      	str	r2, [r3, #0]
      break;
 8005004:	e007      	b.n	8005016 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	4a0f      	ldr	r2, [pc, #60]	; (8005048 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 800500a:	601a      	str	r2, [r3, #0]
      break;
 800500c:	e003      	b.n	8005016 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800500e:	f04f 33ff 	mov.w	r3, #4294967295
 8005012:	60fb      	str	r3, [r7, #12]
      break;
 8005014:	bf00      	nop
  }

  return ret;
 8005016:	68fb      	ldr	r3, [r7, #12]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	3fcccccd 	.word	0x3fcccccd
 8005024:	41480000 	.word	0x41480000
 8005028:	41d00000 	.word	0x41d00000
 800502c:	42500000 	.word	0x42500000
 8005030:	42d00000 	.word	0x42d00000
 8005034:	43500000 	.word	0x43500000
 8005038:	43d00000 	.word	0x43d00000
 800503c:	44504000 	.word	0x44504000
 8005040:	44cf8000 	.word	0x44cf8000
 8005044:	45502000 	.word	0x45502000
 8005048:	45d02000 	.word	0x45d02000

0800504c <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800505e:	2b01      	cmp	r3, #1
 8005060:	d106      	bne.n	8005070 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005062:	ed97 0a00 	vldr	s0, [r7]
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fa22 	bl	80054b0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 800506c:	4603      	mov	r3, r0
 800506e:	e005      	b.n	800507c <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005070:	ed97 0a00 	vldr	s0, [r7]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 faa7 	bl	80055c8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 800507a:	4603      	mov	r3, r0
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b02      	cmp	r3, #2
 8005092:	dd0b      	ble.n	80050ac <LSM6DSL_ACC_SetFullScale+0x28>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b04      	cmp	r3, #4
 8005098:	dd06      	ble.n	80050a8 <LSM6DSL_ACC_SetFullScale+0x24>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b08      	cmp	r3, #8
 800509e:	dc01      	bgt.n	80050a4 <LSM6DSL_ACC_SetFullScale+0x20>
 80050a0:	2303      	movs	r3, #3
 80050a2:	e004      	b.n	80050ae <LSM6DSL_ACC_SetFullScale+0x2a>
 80050a4:	2301      	movs	r3, #1
 80050a6:	e002      	b.n	80050ae <LSM6DSL_ACC_SetFullScale+0x2a>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e000      	b.n	80050ae <LSM6DSL_ACC_SetFullScale+0x2a>
 80050ac:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 80050ae:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3320      	adds	r3, #32
 80050b4:	7bfa      	ldrb	r2, [r7, #15]
 80050b6:	4611      	mov	r1, r2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fb6d 	bl	8005798 <lsm6dsl_xl_full_scale_set>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80050c4:	f04f 33ff 	mov.w	r3, #4294967295
 80050c8:	e000      	b.n	80050cc <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3320      	adds	r3, #32
 80050e2:	f107 0208 	add.w	r2, r7, #8
 80050e6:	4611      	mov	r1, r2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fda2 	bl	8005c32 <lsm6dsl_acceleration_raw_get>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80050f4:	f04f 33ff 	mov.w	r3, #4294967295
 80050f8:	e00c      	b.n	8005114 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80050fa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005102:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800510a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3320      	adds	r3, #32
 8005130:	f107 0210 	add.w	r2, r7, #16
 8005134:	4611      	mov	r1, r2
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fd7b 	bl	8005c32 <lsm6dsl_acceleration_raw_get>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8005142:	f04f 33ff 	mov.w	r3, #4294967295
 8005146:	e03c      	b.n	80051c2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8005148:	f107 030c 	add.w	r3, r7, #12
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff feb2 	bl	8004eb8 <LSM6DSL_ACC_GetSensitivity>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 800515a:	f04f 33ff 	mov.w	r3, #4294967295
 800515e:	e030      	b.n	80051c2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005160:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005164:	ee07 3a90 	vmov	s15, r3
 8005168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800516c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005178:	ee17 2a90 	vmov	r2, s15
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005180:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005184:	ee07 3a90 	vmov	s15, r3
 8005188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800518c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005198:	ee17 2a90 	vmov	r2, s15
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80051a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051a4:	ee07 3a90 	vmov	s15, r3
 80051a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80051b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051b8:	ee17 2a90 	vmov	r2, s15
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3320      	adds	r3, #32
 80051de:	f107 020b 	add.w	r2, r7, #11
 80051e2:	4611      	mov	r1, r2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fbe9 	bl	80059bc <lsm6dsl_gy_full_scale_get>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80051f0:	f04f 33ff 	mov.w	r3, #4294967295
 80051f4:	e02d      	b.n	8005252 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80051f6:	7afb      	ldrb	r3, [r7, #11]
 80051f8:	2b06      	cmp	r3, #6
 80051fa:	d825      	bhi.n	8005248 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80051fc:	a201      	add	r2, pc, #4	; (adr r2, 8005204 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80051fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005202:	bf00      	nop
 8005204:	08005229 	.word	0x08005229
 8005208:	08005221 	.word	0x08005221
 800520c:	08005231 	.word	0x08005231
 8005210:	08005249 	.word	0x08005249
 8005214:	08005239 	.word	0x08005239
 8005218:	08005249 	.word	0x08005249
 800521c:	08005241 	.word	0x08005241
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	4a0e      	ldr	r2, [pc, #56]	; (800525c <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8005224:	601a      	str	r2, [r3, #0]
      break;
 8005226:	e013      	b.n	8005250 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	4a0d      	ldr	r2, [pc, #52]	; (8005260 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 800522c:	601a      	str	r2, [r3, #0]
      break;
 800522e:	e00f      	b.n	8005250 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	4a0c      	ldr	r2, [pc, #48]	; (8005264 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8005234:	601a      	str	r2, [r3, #0]
      break;
 8005236:	e00b      	b.n	8005250 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	4a0b      	ldr	r2, [pc, #44]	; (8005268 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 800523c:	601a      	str	r2, [r3, #0]
      break;
 800523e:	e007      	b.n	8005250 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	4a0a      	ldr	r2, [pc, #40]	; (800526c <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8005244:	601a      	str	r2, [r3, #0]
      break;
 8005246:	e003      	b.n	8005250 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8005248:	f04f 33ff 	mov.w	r3, #4294967295
 800524c:	60fb      	str	r3, [r7, #12]
      break;
 800524e:	bf00      	nop
  }

  return ret;
 8005250:	68fb      	ldr	r3, [r7, #12]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	408c0000 	.word	0x408c0000
 8005260:	410c0000 	.word	0x410c0000
 8005264:	418c0000 	.word	0x418c0000
 8005268:	420c0000 	.word	0x420c0000
 800526c:	428c0000 	.word	0x428c0000

08005270 <LSM6DSL_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3320      	adds	r3, #32
 8005282:	f107 020b 	add.w	r2, r7, #11
 8005286:	4611      	mov	r1, r2
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fbff 	bl	8005a8c <lsm6dsl_gy_data_rate_get>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8005294:	f04f 33ff 	mov.w	r3, #4294967295
 8005298:	e04e      	b.n	8005338 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800529a:	7afb      	ldrb	r3, [r7, #11]
 800529c:	2b0a      	cmp	r3, #10
 800529e:	d846      	bhi.n	800532e <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 80052a0:	a201      	add	r2, pc, #4	; (adr r2, 80052a8 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 80052a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a6:	bf00      	nop
 80052a8:	080052d5 	.word	0x080052d5
 80052ac:	080052df 	.word	0x080052df
 80052b0:	080052e7 	.word	0x080052e7
 80052b4:	080052ef 	.word	0x080052ef
 80052b8:	080052f7 	.word	0x080052f7
 80052bc:	080052ff 	.word	0x080052ff
 80052c0:	08005307 	.word	0x08005307
 80052c4:	0800530f 	.word	0x0800530f
 80052c8:	08005317 	.word	0x08005317
 80052cc:	0800531f 	.word	0x0800531f
 80052d0:	08005327 	.word	0x08005327
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
      break;
 80052dc:	e02b      	b.n	8005336 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	4a17      	ldr	r2, [pc, #92]	; (8005340 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 80052e2:	601a      	str	r2, [r3, #0]
      break;
 80052e4:	e027      	b.n	8005336 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	4a16      	ldr	r2, [pc, #88]	; (8005344 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 80052ea:	601a      	str	r2, [r3, #0]
      break;
 80052ec:	e023      	b.n	8005336 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	4a15      	ldr	r2, [pc, #84]	; (8005348 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 80052f2:	601a      	str	r2, [r3, #0]
      break;
 80052f4:	e01f      	b.n	8005336 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	4a14      	ldr	r2, [pc, #80]	; (800534c <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 80052fa:	601a      	str	r2, [r3, #0]
      break;
 80052fc:	e01b      	b.n	8005336 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	4a13      	ldr	r2, [pc, #76]	; (8005350 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8005302:	601a      	str	r2, [r3, #0]
      break;
 8005304:	e017      	b.n	8005336 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	4a12      	ldr	r2, [pc, #72]	; (8005354 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 800530a:	601a      	str	r2, [r3, #0]
      break;
 800530c:	e013      	b.n	8005336 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	4a11      	ldr	r2, [pc, #68]	; (8005358 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8005312:	601a      	str	r2, [r3, #0]
      break;
 8005314:	e00f      	b.n	8005336 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	4a10      	ldr	r2, [pc, #64]	; (800535c <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 800531a:	601a      	str	r2, [r3, #0]
      break;
 800531c:	e00b      	b.n	8005336 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	4a0f      	ldr	r2, [pc, #60]	; (8005360 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8005322:	601a      	str	r2, [r3, #0]
      break;
 8005324:	e007      	b.n	8005336 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	4a0e      	ldr	r2, [pc, #56]	; (8005364 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 800532a:	601a      	str	r2, [r3, #0]
      break;
 800532c:	e003      	b.n	8005336 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800532e:	f04f 33ff 	mov.w	r3, #4294967295
 8005332:	60fb      	str	r3, [r7, #12]
      break;
 8005334:	bf00      	nop
  }

  return ret;
 8005336:	68fb      	ldr	r3, [r7, #12]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	41480000 	.word	0x41480000
 8005344:	41d00000 	.word	0x41d00000
 8005348:	42500000 	.word	0x42500000
 800534c:	42d00000 	.word	0x42d00000
 8005350:	43500000 	.word	0x43500000
 8005354:	43d00000 	.word	0x43d00000
 8005358:	44504000 	.word	0x44504000
 800535c:	44cf8000 	.word	0x44cf8000
 8005360:	45502000 	.word	0x45502000
 8005364:	45d02000 	.word	0x45d02000

08005368 <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3320      	adds	r3, #32
 8005376:	f107 0210 	add.w	r2, r7, #16
 800537a:	4611      	mov	r1, r2
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fc0d 	bl	8005b9c <lsm6dsl_angular_rate_raw_get>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8005388:	f04f 33ff 	mov.w	r3, #4294967295
 800538c:	e03c      	b.n	8005408 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800538e:	f107 030c 	add.w	r3, r7, #12
 8005392:	4619      	mov	r1, r3
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff ff19 	bl	80051cc <LSM6DSL_GYRO_GetSensitivity>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80053a0:	f04f 33ff 	mov.w	r3, #4294967295
 80053a4:	e030      	b.n	8005408 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80053a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80053b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053be:	ee17 2a90 	vmov	r2, s15
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80053c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80053d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053de:	ee17 2a90 	vmov	r2, s15
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80053e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80053f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053fe:	ee17 2a90 	vmov	r2, s15
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
 800541c:	4613      	mov	r3, r2
 800541e:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f103 0020 	add.w	r0, r3, #32
 8005426:	1cba      	adds	r2, r7, #2
 8005428:	78f9      	ldrb	r1, [r7, #3]
 800542a:	2301      	movs	r3, #1
 800542c:	f000 f99c 	bl	8005768 <lsm6dsl_write_reg>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8005436:	f04f 33ff 	mov.w	r3, #4294967295
 800543a:	e000      	b.n	800543e <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <LSM6DSL_ACC_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	460b      	mov	r3, r1
 8005450:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3320      	adds	r3, #32
 8005456:	f107 020c 	add.w	r2, r7, #12
 800545a:	4611      	mov	r1, r2
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fdcd 	bl	8005ffc <lsm6dsl_pin_int1_route_get>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 8005468:	f04f 33ff 	mov.w	r3, #4294967295
 800546c:	e01b      	b.n	80054a6 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d811      	bhi.n	8005498 <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	b2da      	uxtb	r2, r3
 800547c:	7b3b      	ldrb	r3, [r7, #12]
 800547e:	f362 0300 	bfi	r3, r2, #0, #1
 8005482:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3320      	adds	r3, #32
 8005488:	68f9      	ldr	r1, [r7, #12]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fc53 	bl	8005d36 <lsm6dsl_pin_int1_route_set>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d006      	beq.n	80054a4 <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 8005496:	e002      	b.n	800549e <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 8005498:	f04f 33ff 	mov.w	r3, #4294967295
 800549c:	e003      	b.n	80054a6 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 800549e:	f04f 33ff 	mov.w	r3, #4294967295
 80054a2:	e000      	b.n	80054a6 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80054bc:	edd7 7a00 	vldr	s15, [r7]
 80054c0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80054c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054cc:	d801      	bhi.n	80054d2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e058      	b.n	8005584 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80054d2:	edd7 7a00 	vldr	s15, [r7]
 80054d6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80054da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e2:	d801      	bhi.n	80054e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e04d      	b.n	8005584 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80054e8:	edd7 7a00 	vldr	s15, [r7]
 80054ec:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80055ac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80054f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f8:	d801      	bhi.n	80054fe <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80054fa:	2303      	movs	r3, #3
 80054fc:	e042      	b.n	8005584 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80054fe:	edd7 7a00 	vldr	s15, [r7]
 8005502:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80055b0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8005506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800550a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550e:	d801      	bhi.n	8005514 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005510:	2304      	movs	r3, #4
 8005512:	e037      	b.n	8005584 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005514:	edd7 7a00 	vldr	s15, [r7]
 8005518:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80055b4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 800551c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005524:	d801      	bhi.n	800552a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005526:	2305      	movs	r3, #5
 8005528:	e02c      	b.n	8005584 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800552a:	edd7 7a00 	vldr	s15, [r7]
 800552e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80055b8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8005532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553a:	d801      	bhi.n	8005540 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 800553c:	2306      	movs	r3, #6
 800553e:	e021      	b.n	8005584 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005540:	edd7 7a00 	vldr	s15, [r7]
 8005544:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80055bc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8005548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800554c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005550:	d801      	bhi.n	8005556 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8005552:	2307      	movs	r3, #7
 8005554:	e016      	b.n	8005584 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005556:	edd7 7a00 	vldr	s15, [r7]
 800555a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80055c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800555e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005566:	d801      	bhi.n	800556c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005568:	2308      	movs	r3, #8
 800556a:	e00b      	b.n	8005584 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800556c:	edd7 7a00 	vldr	s15, [r7]
 8005570:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80055c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557c:	d801      	bhi.n	8005582 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800557e:	2309      	movs	r3, #9
 8005580:	e000      	b.n	8005584 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005582:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005584:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3320      	adds	r3, #32
 800558a:	7bfa      	ldrb	r2, [r7, #15]
 800558c:	4611      	mov	r1, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f960 	bl	8005854 <lsm6dsl_xl_data_rate_set>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	e000      	b.n	80055a2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	42500000 	.word	0x42500000
 80055b0:	42d00000 	.word	0x42d00000
 80055b4:	43500000 	.word	0x43500000
 80055b8:	43d00000 	.word	0x43d00000
 80055bc:	44504000 	.word	0x44504000
 80055c0:	44cf8000 	.word	0x44cf8000
 80055c4:	45502000 	.word	0x45502000

080055c8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80055d4:	edd7 7a00 	vldr	s15, [r7]
 80055d8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80055dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e4:	d801      	bhi.n	80055ea <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e058      	b.n	800569c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80055ea:	edd7 7a00 	vldr	s15, [r7]
 80055ee:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80055f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fa:	d801      	bhi.n	8005600 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e04d      	b.n	800569c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005600:	edd7 7a00 	vldr	s15, [r7]
 8005604:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80056b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800560c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005610:	d801      	bhi.n	8005616 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005612:	2303      	movs	r3, #3
 8005614:	e042      	b.n	800569c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005616:	edd7 7a00 	vldr	s15, [r7]
 800561a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80056b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 800561e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005626:	d801      	bhi.n	800562c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005628:	2304      	movs	r3, #4
 800562a:	e037      	b.n	800569c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800562c:	edd7 7a00 	vldr	s15, [r7]
 8005630:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80056b8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8005634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563c:	d801      	bhi.n	8005642 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800563e:	2305      	movs	r3, #5
 8005640:	e02c      	b.n	800569c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005642:	edd7 7a00 	vldr	s15, [r7]
 8005646:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80056bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800564a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800564e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005652:	d801      	bhi.n	8005658 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005654:	2306      	movs	r3, #6
 8005656:	e021      	b.n	800569c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005658:	edd7 7a00 	vldr	s15, [r7]
 800565c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80056c0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8005660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005668:	d801      	bhi.n	800566e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800566a:	2307      	movs	r3, #7
 800566c:	e016      	b.n	800569c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800566e:	edd7 7a00 	vldr	s15, [r7]
 8005672:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80056c4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8005676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800567a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567e:	d801      	bhi.n	8005684 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005680:	2308      	movs	r3, #8
 8005682:	e00b      	b.n	800569c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005684:	edd7 7a00 	vldr	s15, [r7]
 8005688:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80056c8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 800568c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005694:	d801      	bhi.n	800569a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8005696:	2309      	movs	r3, #9
 8005698:	e000      	b.n	800569c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800569a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	42500000 	.word	0x42500000
 80056b4:	42d00000 	.word	0x42d00000
 80056b8:	43500000 	.word	0x43500000
 80056bc:	43d00000 	.word	0x43d00000
 80056c0:	44504000 	.word	0x44504000
 80056c4:	44cf8000 	.word	0x44cf8000
 80056c8:	45502000 	.word	0x45502000

080056cc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80056cc:	b590      	push	{r4, r7, lr}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	607a      	str	r2, [r7, #4]
 80056d6:	461a      	mov	r2, r3
 80056d8:	460b      	mov	r3, r1
 80056da:	72fb      	strb	r3, [r7, #11]
 80056dc:	4613      	mov	r3, r2
 80056de:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	695c      	ldr	r4, [r3, #20]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	7b1b      	ldrb	r3, [r3, #12]
 80056ec:	b298      	uxth	r0, r3
 80056ee:	7afb      	ldrb	r3, [r7, #11]
 80056f0:	b299      	uxth	r1, r3
 80056f2:	893b      	ldrh	r3, [r7, #8]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	47a0      	blx	r4
 80056f8:	4603      	mov	r3, r0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd90      	pop	{r4, r7, pc}

08005702 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005702:	b590      	push	{r4, r7, lr}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	461a      	mov	r2, r3
 800570e:	460b      	mov	r3, r1
 8005710:	72fb      	strb	r3, [r7, #11]
 8005712:	4613      	mov	r3, r2
 8005714:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	691c      	ldr	r4, [r3, #16]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	7b1b      	ldrb	r3, [r3, #12]
 8005722:	b298      	uxth	r0, r3
 8005724:	7afb      	ldrb	r3, [r7, #11]
 8005726:	b299      	uxth	r1, r3
 8005728:	893b      	ldrh	r3, [r7, #8]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	47a0      	blx	r4
 800572e:	4603      	mov	r3, r0
}
 8005730:	4618      	mov	r0, r3
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	bd90      	pop	{r4, r7, pc}

08005738 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005738:	b590      	push	{r4, r7, lr}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	461a      	mov	r2, r3
 8005744:	460b      	mov	r3, r1
 8005746:	72fb      	strb	r3, [r7, #11]
 8005748:	4613      	mov	r3, r2
 800574a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	685c      	ldr	r4, [r3, #4]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68d8      	ldr	r0, [r3, #12]
 8005754:	893b      	ldrh	r3, [r7, #8]
 8005756:	7af9      	ldrb	r1, [r7, #11]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	47a0      	blx	r4
 800575c:	6178      	str	r0, [r7, #20]

  return ret;
 800575e:	697b      	ldr	r3, [r7, #20]
}
 8005760:	4618      	mov	r0, r3
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	bd90      	pop	{r4, r7, pc}

08005768 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	461a      	mov	r2, r3
 8005774:	460b      	mov	r3, r1
 8005776:	72fb      	strb	r3, [r7, #11]
 8005778:	4613      	mov	r3, r2
 800577a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681c      	ldr	r4, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	68d8      	ldr	r0, [r3, #12]
 8005784:	893b      	ldrh	r3, [r7, #8]
 8005786:	7af9      	ldrb	r1, [r7, #11]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	47a0      	blx	r4
 800578c:	6178      	str	r0, [r7, #20]

  return ret;
 800578e:	697b      	ldr	r3, [r7, #20]
}
 8005790:	4618      	mov	r0, r3
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	bd90      	pop	{r4, r7, pc}

08005798 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80057a4:	f107 0208 	add.w	r2, r7, #8
 80057a8:	2301      	movs	r3, #1
 80057aa:	2110      	movs	r1, #16
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff ffc3 	bl	8005738 <lsm6dsl_read_reg>
 80057b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10f      	bne.n	80057da <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 80057ba:	78fb      	ldrb	r3, [r7, #3]
 80057bc:	f003 0303 	and.w	r3, r3, #3
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	7a3b      	ldrb	r3, [r7, #8]
 80057c4:	f362 0383 	bfi	r3, r2, #2, #2
 80057c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80057ca:	f107 0208 	add.w	r2, r7, #8
 80057ce:	2301      	movs	r3, #1
 80057d0:	2110      	movs	r1, #16
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7ff ffc8 	bl	8005768 <lsm6dsl_write_reg>
 80057d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80057ee:	f107 0208 	add.w	r2, r7, #8
 80057f2:	2301      	movs	r3, #1
 80057f4:	2110      	movs	r1, #16
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff ff9e 	bl	8005738 <lsm6dsl_read_reg>
 80057fc:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 80057fe:	7a3b      	ldrb	r3, [r7, #8]
 8005800:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b03      	cmp	r3, #3
 8005808:	d81a      	bhi.n	8005840 <lsm6dsl_xl_full_scale_get+0x5c>
 800580a:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <lsm6dsl_xl_full_scale_get+0x2c>)
 800580c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005810:	08005821 	.word	0x08005821
 8005814:	08005829 	.word	0x08005829
 8005818:	08005831 	.word	0x08005831
 800581c:	08005839 	.word	0x08005839
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]
      break;
 8005826:	e00f      	b.n	8005848 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
      break;
 800582e:	e00b      	b.n	8005848 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2202      	movs	r2, #2
 8005834:	701a      	strb	r2, [r3, #0]
      break;
 8005836:	e007      	b.n	8005848 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2203      	movs	r2, #3
 800583c:	701a      	strb	r2, [r3, #0]
      break;
 800583e:	e003      	b.n	8005848 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2204      	movs	r2, #4
 8005844:	701a      	strb	r2, [r3, #0]
      break;
 8005846:	bf00      	nop
  }

  return ret;
 8005848:	68fb      	ldr	r3, [r7, #12]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop

08005854 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005860:	f107 0208 	add.w	r2, r7, #8
 8005864:	2301      	movs	r3, #1
 8005866:	2110      	movs	r1, #16
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff ff65 	bl	8005738 <lsm6dsl_read_reg>
 800586e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10f      	bne.n	8005896 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8005876:	78fb      	ldrb	r3, [r7, #3]
 8005878:	f003 030f 	and.w	r3, r3, #15
 800587c:	b2da      	uxtb	r2, r3
 800587e:	7a3b      	ldrb	r3, [r7, #8]
 8005880:	f362 1307 	bfi	r3, r2, #4, #4
 8005884:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005886:	f107 0208 	add.w	r2, r7, #8
 800588a:	2301      	movs	r3, #1
 800588c:	2110      	movs	r1, #16
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7ff ff6a 	bl	8005768 <lsm6dsl_write_reg>
 8005894:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005896:	68fb      	ldr	r3, [r7, #12]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80058aa:	f107 0208 	add.w	r2, r7, #8
 80058ae:	2301      	movs	r3, #1
 80058b0:	2110      	movs	r1, #16
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff ff40 	bl	8005738 <lsm6dsl_read_reg>
 80058b8:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.odr_xl)
 80058ba:	7a3b      	ldrb	r3, [r7, #8]
 80058bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b0b      	cmp	r3, #11
 80058c4:	d84a      	bhi.n	800595c <lsm6dsl_xl_data_rate_get+0xbc>
 80058c6:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <lsm6dsl_xl_data_rate_get+0x2c>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	080058fd 	.word	0x080058fd
 80058d0:	08005905 	.word	0x08005905
 80058d4:	0800590d 	.word	0x0800590d
 80058d8:	08005915 	.word	0x08005915
 80058dc:	0800591d 	.word	0x0800591d
 80058e0:	08005925 	.word	0x08005925
 80058e4:	0800592d 	.word	0x0800592d
 80058e8:	08005935 	.word	0x08005935
 80058ec:	0800593d 	.word	0x0800593d
 80058f0:	08005945 	.word	0x08005945
 80058f4:	0800594d 	.word	0x0800594d
 80058f8:	08005955 	.word	0x08005955
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2200      	movs	r2, #0
 8005900:	701a      	strb	r2, [r3, #0]
      break;
 8005902:	e02f      	b.n	8005964 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2201      	movs	r2, #1
 8005908:	701a      	strb	r2, [r3, #0]
      break;
 800590a:	e02b      	b.n	8005964 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2202      	movs	r2, #2
 8005910:	701a      	strb	r2, [r3, #0]
      break;
 8005912:	e027      	b.n	8005964 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2203      	movs	r2, #3
 8005918:	701a      	strb	r2, [r3, #0]
      break;
 800591a:	e023      	b.n	8005964 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2204      	movs	r2, #4
 8005920:	701a      	strb	r2, [r3, #0]
      break;
 8005922:	e01f      	b.n	8005964 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2205      	movs	r2, #5
 8005928:	701a      	strb	r2, [r3, #0]
      break;
 800592a:	e01b      	b.n	8005964 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2206      	movs	r2, #6
 8005930:	701a      	strb	r2, [r3, #0]
      break;
 8005932:	e017      	b.n	8005964 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2207      	movs	r2, #7
 8005938:	701a      	strb	r2, [r3, #0]
      break;
 800593a:	e013      	b.n	8005964 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2208      	movs	r2, #8
 8005940:	701a      	strb	r2, [r3, #0]
      break;
 8005942:	e00f      	b.n	8005964 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2209      	movs	r2, #9
 8005948:	701a      	strb	r2, [r3, #0]
      break;
 800594a:	e00b      	b.n	8005964 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	220a      	movs	r2, #10
 8005950:	701a      	strb	r2, [r3, #0]
      break;
 8005952:	e007      	b.n	8005964 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	220b      	movs	r2, #11
 8005958:	701a      	strb	r2, [r3, #0]
      break;
 800595a:	e003      	b.n	8005964 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	220c      	movs	r2, #12
 8005960:	701a      	strb	r2, [r3, #0]
      break;
 8005962:	bf00      	nop
  }

  return ret;
 8005964:	68fb      	ldr	r3, [r7, #12]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop

08005970 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800597c:	f107 0208 	add.w	r2, r7, #8
 8005980:	2301      	movs	r3, #1
 8005982:	2111      	movs	r1, #17
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff fed7 	bl	8005738 <lsm6dsl_read_reg>
 800598a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10f      	bne.n	80059b2 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	b2da      	uxtb	r2, r3
 800599a:	7a3b      	ldrb	r3, [r7, #8]
 800599c:	f362 0343 	bfi	r3, r2, #1, #3
 80059a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80059a2:	f107 0208 	add.w	r2, r7, #8
 80059a6:	2301      	movs	r3, #1
 80059a8:	2111      	movs	r1, #17
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fedc 	bl	8005768 <lsm6dsl_write_reg>
 80059b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059b2:	68fb      	ldr	r3, [r7, #12]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80059c6:	f107 0208 	add.w	r2, r7, #8
 80059ca:	2301      	movs	r3, #1
 80059cc:	2111      	movs	r1, #17
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff feb2 	bl	8005738 <lsm6dsl_read_reg>
 80059d4:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 80059d6:	7a3b      	ldrb	r3, [r7, #8]
 80059d8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b06      	cmp	r3, #6
 80059e0:	d824      	bhi.n	8005a2c <lsm6dsl_gy_full_scale_get+0x70>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <lsm6dsl_gy_full_scale_get+0x2c>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a05 	.word	0x08005a05
 80059ec:	08005a0d 	.word	0x08005a0d
 80059f0:	08005a15 	.word	0x08005a15
 80059f4:	08005a2d 	.word	0x08005a2d
 80059f8:	08005a1d 	.word	0x08005a1d
 80059fc:	08005a2d 	.word	0x08005a2d
 8005a00:	08005a25 	.word	0x08005a25
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2200      	movs	r2, #0
 8005a08:	701a      	strb	r2, [r3, #0]
      break;
 8005a0a:	e013      	b.n	8005a34 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	701a      	strb	r2, [r3, #0]
      break;
 8005a12:	e00f      	b.n	8005a34 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2202      	movs	r2, #2
 8005a18:	701a      	strb	r2, [r3, #0]
      break;
 8005a1a:	e00b      	b.n	8005a34 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2204      	movs	r2, #4
 8005a20:	701a      	strb	r2, [r3, #0]
      break;
 8005a22:	e007      	b.n	8005a34 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2206      	movs	r2, #6
 8005a28:	701a      	strb	r2, [r3, #0]
      break;
 8005a2a:	e003      	b.n	8005a34 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2207      	movs	r2, #7
 8005a30:	701a      	strb	r2, [r3, #0]
      break;
 8005a32:	bf00      	nop
  }

  return ret;
 8005a34:	68fb      	ldr	r3, [r7, #12]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop

08005a40 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a4c:	f107 0208 	add.w	r2, r7, #8
 8005a50:	2301      	movs	r3, #1
 8005a52:	2111      	movs	r1, #17
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff fe6f 	bl	8005738 <lsm6dsl_read_reg>
 8005a5a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10f      	bne.n	8005a82 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8005a62:	78fb      	ldrb	r3, [r7, #3]
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	7a3b      	ldrb	r3, [r7, #8]
 8005a6c:	f362 1307 	bfi	r3, r2, #4, #4
 8005a70:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a72:	f107 0208 	add.w	r2, r7, #8
 8005a76:	2301      	movs	r3, #1
 8005a78:	2111      	movs	r1, #17
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff fe74 	bl	8005768 <lsm6dsl_write_reg>
 8005a80:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a82:	68fb      	ldr	r3, [r7, #12]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a96:	f107 0208 	add.w	r2, r7, #8
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	2111      	movs	r1, #17
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff fe4a 	bl	8005738 <lsm6dsl_read_reg>
 8005aa4:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g)
 8005aa6:	7a3b      	ldrb	r3, [r7, #8]
 8005aa8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b0a      	cmp	r3, #10
 8005ab0:	d844      	bhi.n	8005b3c <lsm6dsl_gy_data_rate_get+0xb0>
 8005ab2:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <lsm6dsl_gy_data_rate_get+0x2c>)
 8005ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab8:	08005ae5 	.word	0x08005ae5
 8005abc:	08005aed 	.word	0x08005aed
 8005ac0:	08005af5 	.word	0x08005af5
 8005ac4:	08005afd 	.word	0x08005afd
 8005ac8:	08005b05 	.word	0x08005b05
 8005acc:	08005b0d 	.word	0x08005b0d
 8005ad0:	08005b15 	.word	0x08005b15
 8005ad4:	08005b1d 	.word	0x08005b1d
 8005ad8:	08005b25 	.word	0x08005b25
 8005adc:	08005b2d 	.word	0x08005b2d
 8005ae0:	08005b35 	.word	0x08005b35
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	701a      	strb	r2, [r3, #0]
      break;
 8005aea:	e02b      	b.n	8005b44 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2201      	movs	r2, #1
 8005af0:	701a      	strb	r2, [r3, #0]
      break;
 8005af2:	e027      	b.n	8005b44 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2202      	movs	r2, #2
 8005af8:	701a      	strb	r2, [r3, #0]
      break;
 8005afa:	e023      	b.n	8005b44 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2203      	movs	r2, #3
 8005b00:	701a      	strb	r2, [r3, #0]
      break;
 8005b02:	e01f      	b.n	8005b44 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2204      	movs	r2, #4
 8005b08:	701a      	strb	r2, [r3, #0]
      break;
 8005b0a:	e01b      	b.n	8005b44 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2205      	movs	r2, #5
 8005b10:	701a      	strb	r2, [r3, #0]
      break;
 8005b12:	e017      	b.n	8005b44 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2206      	movs	r2, #6
 8005b18:	701a      	strb	r2, [r3, #0]
      break;
 8005b1a:	e013      	b.n	8005b44 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2207      	movs	r2, #7
 8005b20:	701a      	strb	r2, [r3, #0]
      break;
 8005b22:	e00f      	b.n	8005b44 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2208      	movs	r2, #8
 8005b28:	701a      	strb	r2, [r3, #0]
      break;
 8005b2a:	e00b      	b.n	8005b44 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2209      	movs	r2, #9
 8005b30:	701a      	strb	r2, [r3, #0]
      break;
 8005b32:	e007      	b.n	8005b44 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	220a      	movs	r2, #10
 8005b38:	701a      	strb	r2, [r3, #0]
      break;
 8005b3a:	e003      	b.n	8005b44 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	220b      	movs	r2, #11
 8005b40:	701a      	strb	r2, [r3, #0]
      break;
 8005b42:	bf00      	nop
  }

  return ret;
 8005b44:	68fb      	ldr	r3, [r7, #12]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop

08005b50 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005b5c:	f107 0208 	add.w	r2, r7, #8
 8005b60:	2301      	movs	r3, #1
 8005b62:	2112      	movs	r1, #18
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff fde7 	bl	8005738 <lsm6dsl_read_reg>
 8005b6a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10f      	bne.n	8005b92 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8005b72:	78fb      	ldrb	r3, [r7, #3]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	7a3b      	ldrb	r3, [r7, #8]
 8005b7c:	f362 1386 	bfi	r3, r2, #6, #1
 8005b80:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005b82:	f107 0208 	add.w	r2, r7, #8
 8005b86:	2301      	movs	r3, #1
 8005b88:	2112      	movs	r1, #18
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff fdec 	bl	8005768 <lsm6dsl_write_reg>
 8005b90:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b92:	68fb      	ldr	r3, [r7, #12]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005ba6:	f107 020c 	add.w	r2, r7, #12
 8005baa:	2306      	movs	r3, #6
 8005bac:	2122      	movs	r1, #34	; 0x22
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff fdc2 	bl	8005738 <lsm6dsl_read_reg>
 8005bb4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005bb6:	7b7b      	ldrb	r3, [r7, #13]
 8005bb8:	b21a      	sxth	r2, r3
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	7b3b      	ldrb	r3, [r7, #12]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	4413      	add	r3, r2
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	b21a      	sxth	r2, r3
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005bd8:	7bfa      	ldrb	r2, [r7, #15]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	3302      	adds	r3, #2
 8005bde:	b212      	sxth	r2, r2
 8005be0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	3302      	adds	r3, #2
 8005be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	021b      	lsls	r3, r3, #8
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	7bbb      	ldrb	r3, [r7, #14]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	3302      	adds	r3, #2
 8005bfc:	b212      	sxth	r2, r2
 8005bfe:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005c00:	7c7a      	ldrb	r2, [r7, #17]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	3304      	adds	r3, #4
 8005c06:	b212      	sxth	r2, r2
 8005c08:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	7c3b      	ldrb	r3, [r7, #16]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	3304      	adds	r3, #4
 8005c24:	b212      	sxth	r2, r2
 8005c26:	801a      	strh	r2, [r3, #0]

  return ret;
 8005c28:	697b      	ldr	r3, [r7, #20]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b086      	sub	sp, #24
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8005c3c:	f107 020c 	add.w	r2, r7, #12
 8005c40:	2306      	movs	r3, #6
 8005c42:	2128      	movs	r1, #40	; 0x28
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff fd77 	bl	8005738 <lsm6dsl_read_reg>
 8005c4a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005c4c:	7b7b      	ldrb	r3, [r7, #13]
 8005c4e:	b21a      	sxth	r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	7b3b      	ldrb	r3, [r7, #12]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	4413      	add	r3, r2
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	b21a      	sxth	r2, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005c6e:	7bfa      	ldrb	r2, [r7, #15]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	3302      	adds	r3, #2
 8005c74:	b212      	sxth	r2, r2
 8005c76:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	3302      	adds	r3, #2
 8005c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	021b      	lsls	r3, r3, #8
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	7bbb      	ldrb	r3, [r7, #14]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	3302      	adds	r3, #2
 8005c92:	b212      	sxth	r2, r2
 8005c94:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005c96:	7c7a      	ldrb	r2, [r7, #17]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	b212      	sxth	r2, r2
 8005c9e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	7c3b      	ldrb	r3, [r7, #16]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	4413      	add	r3, r2
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	b212      	sxth	r2, r2
 8005cbc:	801a      	strh	r2, [r3, #0]

  return ret;
 8005cbe:	697b      	ldr	r3, [r7, #20]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	210f      	movs	r1, #15
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff fd2d 	bl	8005738 <lsm6dsl_read_reg>
 8005cde:	60f8      	str	r0, [r7, #12]

  return ret;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005cf6:	f107 0208 	add.w	r2, r7, #8
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	2112      	movs	r1, #18
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff fd1a 	bl	8005738 <lsm6dsl_read_reg>
 8005d04:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10f      	bne.n	8005d2c <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	7a3b      	ldrb	r3, [r7, #8]
 8005d16:	f362 0382 	bfi	r3, r2, #2, #1
 8005d1a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005d1c:	f107 0208 	add.w	r2, r7, #8
 8005d20:	2301      	movs	r3, #1
 8005d22:	2112      	movs	r1, #18
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff fd1f 	bl	8005768 <lsm6dsl_write_reg>
 8005d2a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b08a      	sub	sp, #40	; 0x28
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8005d40:	f107 021c 	add.w	r2, r7, #28
 8005d44:	2301      	movs	r3, #1
 8005d46:	210d      	movs	r1, #13
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff fcf5 	bl	8005738 <lsm6dsl_read_reg>
 8005d4e:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == 0)
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d147      	bne.n	8005de6 <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8005d56:	783b      	ldrb	r3, [r7, #0]
 8005d58:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	7f3b      	ldrb	r3, [r7, #28]
 8005d60:	f362 0300 	bfi	r3, r2, #0, #1
 8005d64:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8005d66:	783b      	ldrb	r3, [r7, #0]
 8005d68:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	7f3b      	ldrb	r3, [r7, #28]
 8005d70:	f362 0341 	bfi	r3, r2, #1, #1
 8005d74:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 8005d76:	783b      	ldrb	r3, [r7, #0]
 8005d78:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	7f3b      	ldrb	r3, [r7, #28]
 8005d80:	f362 0382 	bfi	r3, r2, #2, #1
 8005d84:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 8005d86:	783b      	ldrb	r3, [r7, #0]
 8005d88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	7f3b      	ldrb	r3, [r7, #28]
 8005d90:	f362 03c3 	bfi	r3, r2, #3, #1
 8005d94:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8005d96:	783b      	ldrb	r3, [r7, #0]
 8005d98:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	7f3b      	ldrb	r3, [r7, #28]
 8005da0:	f362 1304 	bfi	r3, r2, #4, #1
 8005da4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 8005da6:	783b      	ldrb	r3, [r7, #0]
 8005da8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	7f3b      	ldrb	r3, [r7, #28]
 8005db0:	f362 1345 	bfi	r3, r2, #5, #1
 8005db4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 8005db6:	783b      	ldrb	r3, [r7, #0]
 8005db8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	7f3b      	ldrb	r3, [r7, #28]
 8005dc0:	f362 1386 	bfi	r3, r2, #6, #1
 8005dc4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8005dc6:	783b      	ldrb	r3, [r7, #0]
 8005dc8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	7f3b      	ldrb	r3, [r7, #28]
 8005dd0:	f362 13c7 	bfi	r3, r2, #7, #1
 8005dd4:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8005dd6:	f107 021c 	add.w	r2, r7, #28
 8005dda:	2301      	movs	r3, #1
 8005ddc:	210d      	movs	r1, #13
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff fcc2 	bl	8005768 <lsm6dsl_write_reg>
 8005de4:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d107      	bne.n	8005dfc <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8005dec:	f107 0218 	add.w	r2, r7, #24
 8005df0:	2301      	movs	r3, #1
 8005df2:	215e      	movs	r1, #94	; 0x5e
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff fc9f 	bl	8005738 <lsm6dsl_read_reg>
 8005dfa:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d107      	bne.n	8005e12 <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8005e02:	f107 0214 	add.w	r2, r7, #20
 8005e06:	2301      	movs	r3, #1
 8005e08:	215f      	movs	r1, #95	; 0x5f
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff fc94 	bl	8005738 <lsm6dsl_read_reg>
 8005e10:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d147      	bne.n	8005ea8 <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 8005e18:	787b      	ldrb	r3, [r7, #1]
 8005e1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	7e3b      	ldrb	r3, [r7, #24]
 8005e22:	f362 0300 	bfi	r3, r2, #0, #1
 8005e26:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 8005e28:	787b      	ldrb	r3, [r7, #1]
 8005e2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	7e3b      	ldrb	r3, [r7, #24]
 8005e32:	f362 0341 	bfi	r3, r2, #1, #1
 8005e36:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 8005e38:	787b      	ldrb	r3, [r7, #1]
 8005e3a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	7e3b      	ldrb	r3, [r7, #24]
 8005e42:	f362 0382 	bfi	r3, r2, #2, #1
 8005e46:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 8005e48:	787b      	ldrb	r3, [r7, #1]
 8005e4a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	7e3b      	ldrb	r3, [r7, #24]
 8005e52:	f362 03c3 	bfi	r3, r2, #3, #1
 8005e56:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 8005e58:	787b      	ldrb	r3, [r7, #1]
 8005e5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	7e3b      	ldrb	r3, [r7, #24]
 8005e62:	f362 1304 	bfi	r3, r2, #4, #1
 8005e66:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 8005e68:	787b      	ldrb	r3, [r7, #1]
 8005e6a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	7e3b      	ldrb	r3, [r7, #24]
 8005e72:	f362 1345 	bfi	r3, r2, #5, #1
 8005e76:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 8005e78:	787b      	ldrb	r3, [r7, #1]
 8005e7a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	7e3b      	ldrb	r3, [r7, #24]
 8005e82:	f362 1386 	bfi	r3, r2, #6, #1
 8005e86:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 8005e88:	787b      	ldrb	r3, [r7, #1]
 8005e8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	7e3b      	ldrb	r3, [r7, #24]
 8005e92:	f362 13c7 	bfi	r3, r2, #7, #1
 8005e96:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8005e98:	f107 0218 	add.w	r2, r7, #24
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	215e      	movs	r1, #94	; 0x5e
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff fc61 	bl	8005768 <lsm6dsl_write_reg>
 8005ea6:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d107      	bne.n	8005ebe <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8005eae:	f107 0210 	add.w	r2, r7, #16
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	2113      	movs	r1, #19
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff fc3e 	bl	8005738 <lsm6dsl_read_reg>
 8005ebc:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10f      	bne.n	8005ee4 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8005ec4:	78bb      	ldrb	r3, [r7, #2]
 8005ec6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	7c3b      	ldrb	r3, [r7, #16]
 8005ece:	f362 1304 	bfi	r3, r2, #4, #1
 8005ed2:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8005ed4:	f107 0210 	add.w	r2, r7, #16
 8005ed8:	2301      	movs	r3, #1
 8005eda:	2113      	movs	r1, #19
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff fc43 	bl	8005768 <lsm6dsl_write_reg>
 8005ee2:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d107      	bne.n	8005efa <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8005eea:	f107 0220 	add.w	r2, r7, #32
 8005eee:	2301      	movs	r3, #1
 8005ef0:	211a      	movs	r1, #26
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff fc20 	bl	8005738 <lsm6dsl_read_reg>
 8005ef8:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d111      	bne.n	8005f24 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8005f00:	78bb      	ldrb	r3, [r7, #2]
 8005f02:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f0c:	f362 13c7 	bfi	r3, r2, #7, #1
 8005f10:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8005f14:	f107 0220 	add.w	r2, r7, #32
 8005f18:	2301      	movs	r3, #1
 8005f1a:	211a      	movs	r1, #26
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff fc23 	bl	8005768 <lsm6dsl_write_reg>
 8005f22:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d158      	bne.n	8005fdc <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8005f2a:	f107 020c 	add.w	r2, r7, #12
 8005f2e:	2301      	movs	r3, #1
 8005f30:	2158      	movs	r1, #88	; 0x58
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff fc00 	bl	8005738 <lsm6dsl_read_reg>
 8005f38:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 8005f3a:	787b      	ldrb	r3, [r7, #1]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d141      	bne.n	8005fca <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8005f46:	787b      	ldrb	r3, [r7, #1]
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d13b      	bne.n	8005fca <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8005f52:	787b      	ldrb	r3, [r7, #1]
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d135      	bne.n	8005fca <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8005f5e:	787b      	ldrb	r3, [r7, #1]
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d12f      	bne.n	8005fca <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8005f6a:	787b      	ldrb	r3, [r7, #1]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d129      	bne.n	8005fca <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 8005f76:	787b      	ldrb	r3, [r7, #1]
 8005f78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f7c:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d123      	bne.n	8005fca <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8005f82:	7d3b      	ldrb	r3, [r7, #20]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d11d      	bne.n	8005fca <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8005f8e:	7d3b      	ldrb	r3, [r7, #20]
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d117      	bne.n	8005fca <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8005f9a:	7d3b      	ldrb	r3, [r7, #20]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d111      	bne.n	8005fca <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8005fa6:	7d3b      	ldrb	r3, [r7, #20]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8005fb2:	7d3b      	ldrb	r3, [r7, #20]
 8005fb4:	f003 0308 	and.w	r3, r3, #8
 8005fb8:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d105      	bne.n	8005fca <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 8005fbe:	7d3b      	ldrb	r3, [r7, #20]
 8005fc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fc4:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d004      	beq.n	8005fd4 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8005fca:	7b3b      	ldrb	r3, [r7, #12]
 8005fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd0:	733b      	strb	r3, [r7, #12]
 8005fd2:	e003      	b.n	8005fdc <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8005fd4:	7b3b      	ldrb	r3, [r7, #12]
 8005fd6:	f36f 13c7 	bfc	r3, #7, #1
 8005fda:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d107      	bne.n	8005ff2 <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8005fe2:	f107 020c 	add.w	r2, r7, #12
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	2158      	movs	r1, #88	; 0x58
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff fbbc 	bl	8005768 <lsm6dsl_write_reg>
 8005ff0:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3728      	adds	r7, #40	; 0x28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8006006:	f107 0214 	add.w	r2, r7, #20
 800600a:	2301      	movs	r3, #1
 800600c:	210d      	movs	r1, #13
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff fb92 	bl	8005738 <lsm6dsl_read_reg>
 8006014:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f040 80c0 	bne.w	800619e <lsm6dsl_pin_int1_route_get+0x1a2>
  {
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 800601e:	7d3b      	ldrb	r3, [r7, #20]
 8006020:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006024:	b2d9      	uxtb	r1, r3
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	7813      	ldrb	r3, [r2, #0]
 800602a:	f361 0300 	bfi	r3, r1, #0, #1
 800602e:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8006030:	7d3b      	ldrb	r3, [r7, #20]
 8006032:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006036:	b2d9      	uxtb	r1, r3
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	7813      	ldrb	r3, [r2, #0]
 800603c:	f361 0341 	bfi	r3, r1, #1, #1
 8006040:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8006042:	7d3b      	ldrb	r3, [r7, #20]
 8006044:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006048:	b2d9      	uxtb	r1, r3
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	7813      	ldrb	r3, [r2, #0]
 800604e:	f361 0382 	bfi	r3, r1, #2, #1
 8006052:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8006054:	7d3b      	ldrb	r3, [r7, #20]
 8006056:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800605a:	b2d9      	uxtb	r1, r3
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	7813      	ldrb	r3, [r2, #0]
 8006060:	f361 03c3 	bfi	r3, r1, #3, #1
 8006064:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8006066:	7d3b      	ldrb	r3, [r7, #20]
 8006068:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800606c:	b2d9      	uxtb	r1, r3
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	7813      	ldrb	r3, [r2, #0]
 8006072:	f361 1304 	bfi	r3, r1, #4, #1
 8006076:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 8006078:	7d3b      	ldrb	r3, [r7, #20]
 800607a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800607e:	b2d9      	uxtb	r1, r3
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	7813      	ldrb	r3, [r2, #0]
 8006084:	f361 1345 	bfi	r3, r1, #5, #1
 8006088:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 800608a:	7d3b      	ldrb	r3, [r7, #20]
 800608c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006090:	b2d9      	uxtb	r1, r3
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	7813      	ldrb	r3, [r2, #0]
 8006096:	f361 1386 	bfi	r3, r1, #6, #1
 800609a:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 800609c:	7d3b      	ldrb	r3, [r7, #20]
 800609e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80060a2:	b2d9      	uxtb	r1, r3
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	7813      	ldrb	r3, [r2, #0]
 80060a8:	f361 13c7 	bfi	r3, r1, #7, #1
 80060ac:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80060ae:	f107 0210 	add.w	r2, r7, #16
 80060b2:	2301      	movs	r3, #1
 80060b4:	215e      	movs	r1, #94	; 0x5e
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fb3e 	bl	8005738 <lsm6dsl_read_reg>
 80060bc:	61f8      	str	r0, [r7, #28]

    if (ret == 0)
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d16c      	bne.n	800619e <lsm6dsl_pin_int1_route_get+0x1a2>
    {
      val->int1_timer       = md1_cfg.int1_timer;
 80060c4:	7c3b      	ldrb	r3, [r7, #16]
 80060c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80060ca:	b2d9      	uxtb	r1, r3
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	7853      	ldrb	r3, [r2, #1]
 80060d0:	f361 0300 	bfi	r3, r1, #0, #1
 80060d4:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 80060d6:	7c3b      	ldrb	r3, [r7, #16]
 80060d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80060dc:	b2d9      	uxtb	r1, r3
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	7853      	ldrb	r3, [r2, #1]
 80060e2:	f361 0341 	bfi	r3, r1, #1, #1
 80060e6:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 80060e8:	7c3b      	ldrb	r3, [r7, #16]
 80060ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80060ee:	b2d9      	uxtb	r1, r3
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	7853      	ldrb	r3, [r2, #1]
 80060f4:	f361 0382 	bfi	r3, r1, #2, #1
 80060f8:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 80060fa:	7c3b      	ldrb	r3, [r7, #16]
 80060fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006100:	b2d9      	uxtb	r1, r3
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	7853      	ldrb	r3, [r2, #1]
 8006106:	f361 03c3 	bfi	r3, r1, #3, #1
 800610a:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 800610c:	7c3b      	ldrb	r3, [r7, #16]
 800610e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006112:	b2d9      	uxtb	r1, r3
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	7853      	ldrb	r3, [r2, #1]
 8006118:	f361 1304 	bfi	r3, r1, #4, #1
 800611c:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 800611e:	7c3b      	ldrb	r3, [r7, #16]
 8006120:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006124:	b2d9      	uxtb	r1, r3
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	7853      	ldrb	r3, [r2, #1]
 800612a:	f361 1345 	bfi	r3, r1, #5, #1
 800612e:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 8006130:	7c3b      	ldrb	r3, [r7, #16]
 8006132:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006136:	b2d9      	uxtb	r1, r3
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	7853      	ldrb	r3, [r2, #1]
 800613c:	f361 1386 	bfi	r3, r1, #6, #1
 8006140:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 8006142:	7c3b      	ldrb	r3, [r7, #16]
 8006144:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006148:	b2d9      	uxtb	r1, r3
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	7853      	ldrb	r3, [r2, #1]
 800614e:	f361 13c7 	bfi	r3, r1, #7, #1
 8006152:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8006154:	f107 020c 	add.w	r2, r7, #12
 8006158:	2301      	movs	r3, #1
 800615a:	2113      	movs	r1, #19
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff faeb 	bl	8005738 <lsm6dsl_read_reg>
 8006162:	61f8      	str	r0, [r7, #28]

      if (ret == 0)
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d119      	bne.n	800619e <lsm6dsl_pin_int1_route_get+0x1a2>
      {
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 800616a:	7b3b      	ldrb	r3, [r7, #12]
 800616c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006170:	b2d9      	uxtb	r1, r3
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	7893      	ldrb	r3, [r2, #2]
 8006176:	f361 0300 	bfi	r3, r1, #0, #1
 800617a:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800617c:	f107 0218 	add.w	r2, r7, #24
 8006180:	2301      	movs	r3, #1
 8006182:	211a      	movs	r1, #26
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff fad7 	bl	8005738 <lsm6dsl_read_reg>
 800618a:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 800618c:	7e3b      	ldrb	r3, [r7, #24]
 800618e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006192:	b2d9      	uxtb	r1, r3
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	7893      	ldrb	r3, [r2, #2]
 8006198:	f361 0300 	bfi	r3, r1, #0, #1
 800619c:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 800619e:	69fb      	ldr	r3, [r7, #28]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3720      	adds	r7, #32
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80061b4:	f107 0208 	add.w	r2, r7, #8
 80061b8:	2301      	movs	r3, #1
 80061ba:	210a      	movs	r1, #10
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff fabb 	bl	8005738 <lsm6dsl_read_reg>
 80061c2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10f      	bne.n	80061ea <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	7a3b      	ldrb	r3, [r7, #8]
 80061d4:	f362 0302 	bfi	r3, r2, #0, #3
 80061d8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80061da:	f107 0208 	add.w	r2, r7, #8
 80061de:	2301      	movs	r3, #1
 80061e0:	210a      	movs	r1, #10
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fac0 	bl	8005768 <lsm6dsl_write_reg>
 80061e8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80061ea:	68fb      	ldr	r3, [r7, #12]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061fe:	2003      	movs	r0, #3
 8006200:	f000 f960 	bl	80064c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006204:	2000      	movs	r0, #0
 8006206:	f000 f80d 	bl	8006224 <HAL_InitTick>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	71fb      	strb	r3, [r7, #7]
 8006214:	e001      	b.n	800621a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006216:	f7fc f8e9 	bl	80023ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800621a:	79fb      	ldrb	r3, [r7, #7]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006230:	4b17      	ldr	r3, [pc, #92]	; (8006290 <HAL_InitTick+0x6c>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d023      	beq.n	8006280 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006238:	4b16      	ldr	r3, [pc, #88]	; (8006294 <HAL_InitTick+0x70>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b14      	ldr	r3, [pc, #80]	; (8006290 <HAL_InitTick+0x6c>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	4619      	mov	r1, r3
 8006242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006246:	fbb3 f3f1 	udiv	r3, r3, r1
 800624a:	fbb2 f3f3 	udiv	r3, r2, r3
 800624e:	4618      	mov	r0, r3
 8006250:	f000 f96d 	bl	800652e <HAL_SYSTICK_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10f      	bne.n	800627a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b0f      	cmp	r3, #15
 800625e:	d809      	bhi.n	8006274 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006260:	2200      	movs	r2, #0
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	f000 f937 	bl	80064da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800626c:	4a0a      	ldr	r2, [pc, #40]	; (8006298 <HAL_InitTick+0x74>)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e007      	b.n	8006284 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	73fb      	strb	r3, [r7, #15]
 8006278:	e004      	b.n	8006284 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	73fb      	strb	r3, [r7, #15]
 800627e:	e001      	b.n	8006284 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20000014 	.word	0x20000014
 8006294:	2000000c 	.word	0x2000000c
 8006298:	20000010 	.word	0x20000010

0800629c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80062a0:	4b06      	ldr	r3, [pc, #24]	; (80062bc <HAL_IncTick+0x20>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <HAL_IncTick+0x24>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4413      	add	r3, r2
 80062ac:	4a04      	ldr	r2, [pc, #16]	; (80062c0 <HAL_IncTick+0x24>)
 80062ae:	6013      	str	r3, [r2, #0]
}
 80062b0:	bf00      	nop
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	20000014 	.word	0x20000014
 80062c0:	200022a4 	.word	0x200022a4

080062c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  return uwTick;
 80062c8:	4b03      	ldr	r3, [pc, #12]	; (80062d8 <HAL_GetTick+0x14>)
 80062ca:	681b      	ldr	r3, [r3, #0]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	200022a4 	.word	0x200022a4

080062dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062e4:	f7ff ffee 	bl	80062c4 <HAL_GetTick>
 80062e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f4:	d005      	beq.n	8006302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80062f6:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <HAL_Delay+0x44>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4413      	add	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006302:	bf00      	nop
 8006304:	f7ff ffde 	bl	80062c4 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	429a      	cmp	r2, r3
 8006312:	d8f7      	bhi.n	8006304 <HAL_Delay+0x28>
  {
  }
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000014 	.word	0x20000014

08006324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006334:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <__NVIC_SetPriorityGrouping+0x44>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006340:	4013      	ands	r3, r2
 8006342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800634c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006356:	4a04      	ldr	r2, [pc, #16]	; (8006368 <__NVIC_SetPriorityGrouping+0x44>)
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	60d3      	str	r3, [r2, #12]
}
 800635c:	bf00      	nop
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	e000ed00 	.word	0xe000ed00

0800636c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006370:	4b04      	ldr	r3, [pc, #16]	; (8006384 <__NVIC_GetPriorityGrouping+0x18>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	0a1b      	lsrs	r3, r3, #8
 8006376:	f003 0307 	and.w	r3, r3, #7
}
 800637a:	4618      	mov	r0, r3
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	e000ed00 	.word	0xe000ed00

08006388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	4603      	mov	r3, r0
 8006390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006396:	2b00      	cmp	r3, #0
 8006398:	db0b      	blt.n	80063b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	f003 021f 	and.w	r2, r3, #31
 80063a0:	4907      	ldr	r1, [pc, #28]	; (80063c0 <__NVIC_EnableIRQ+0x38>)
 80063a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	2001      	movs	r0, #1
 80063aa:	fa00 f202 	lsl.w	r2, r0, r2
 80063ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	e000e100 	.word	0xe000e100

080063c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4603      	mov	r3, r0
 80063cc:	6039      	str	r1, [r7, #0]
 80063ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	db0a      	blt.n	80063ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	490c      	ldr	r1, [pc, #48]	; (8006410 <__NVIC_SetPriority+0x4c>)
 80063de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063e2:	0112      	lsls	r2, r2, #4
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	440b      	add	r3, r1
 80063e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063ec:	e00a      	b.n	8006404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	4908      	ldr	r1, [pc, #32]	; (8006414 <__NVIC_SetPriority+0x50>)
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	3b04      	subs	r3, #4
 80063fc:	0112      	lsls	r2, r2, #4
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	440b      	add	r3, r1
 8006402:	761a      	strb	r2, [r3, #24]
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	e000e100 	.word	0xe000e100
 8006414:	e000ed00 	.word	0xe000ed00

08006418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006418:	b480      	push	{r7}
 800641a:	b089      	sub	sp, #36	; 0x24
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f1c3 0307 	rsb	r3, r3, #7
 8006432:	2b04      	cmp	r3, #4
 8006434:	bf28      	it	cs
 8006436:	2304      	movcs	r3, #4
 8006438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	3304      	adds	r3, #4
 800643e:	2b06      	cmp	r3, #6
 8006440:	d902      	bls.n	8006448 <NVIC_EncodePriority+0x30>
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	3b03      	subs	r3, #3
 8006446:	e000      	b.n	800644a <NVIC_EncodePriority+0x32>
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800644c:	f04f 32ff 	mov.w	r2, #4294967295
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	43da      	mvns	r2, r3
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	401a      	ands	r2, r3
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006460:	f04f 31ff 	mov.w	r1, #4294967295
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	fa01 f303 	lsl.w	r3, r1, r3
 800646a:	43d9      	mvns	r1, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006470:	4313      	orrs	r3, r2
         );
}
 8006472:	4618      	mov	r0, r3
 8006474:	3724      	adds	r7, #36	; 0x24
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
	...

08006480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3b01      	subs	r3, #1
 800648c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006490:	d301      	bcc.n	8006496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006492:	2301      	movs	r3, #1
 8006494:	e00f      	b.n	80064b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006496:	4a0a      	ldr	r2, [pc, #40]	; (80064c0 <SysTick_Config+0x40>)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3b01      	subs	r3, #1
 800649c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800649e:	210f      	movs	r1, #15
 80064a0:	f04f 30ff 	mov.w	r0, #4294967295
 80064a4:	f7ff ff8e 	bl	80063c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064a8:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <SysTick_Config+0x40>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064ae:	4b04      	ldr	r3, [pc, #16]	; (80064c0 <SysTick_Config+0x40>)
 80064b0:	2207      	movs	r2, #7
 80064b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	e000e010 	.word	0xe000e010

080064c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7ff ff29 	bl	8006324 <__NVIC_SetPriorityGrouping>
}
 80064d2:	bf00      	nop
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b086      	sub	sp, #24
 80064de:	af00      	add	r7, sp, #0
 80064e0:	4603      	mov	r3, r0
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	607a      	str	r2, [r7, #4]
 80064e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80064e8:	2300      	movs	r3, #0
 80064ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80064ec:	f7ff ff3e 	bl	800636c <__NVIC_GetPriorityGrouping>
 80064f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	68b9      	ldr	r1, [r7, #8]
 80064f6:	6978      	ldr	r0, [r7, #20]
 80064f8:	f7ff ff8e 	bl	8006418 <NVIC_EncodePriority>
 80064fc:	4602      	mov	r2, r0
 80064fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006502:	4611      	mov	r1, r2
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff ff5d 	bl	80063c4 <__NVIC_SetPriority>
}
 800650a:	bf00      	nop
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	4603      	mov	r3, r0
 800651a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800651c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff ff31 	bl	8006388 <__NVIC_EnableIRQ>
}
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff ffa2 	bl	8006480 <SysTick_Config>
 800653c:	4603      	mov	r3, r0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e054      	b.n	8006604 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	7f5b      	ldrb	r3, [r3, #29]
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d105      	bne.n	8006570 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fb ff62 	bl	8002434 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	791b      	ldrb	r3, [r3, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10c      	bne.n	8006598 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a22      	ldr	r2, [pc, #136]	; (800660c <HAL_CRC_Init+0xc4>)
 8006584:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0218 	bic.w	r2, r2, #24
 8006594:	609a      	str	r2, [r3, #8]
 8006596:	e00c      	b.n	80065b2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6899      	ldr	r1, [r3, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	461a      	mov	r2, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f834 	bl	8006610 <HAL_CRCEx_Polynomial_Set>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e028      	b.n	8006604 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	795b      	ldrb	r3, [r3, #5]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d105      	bne.n	80065c6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f04f 32ff 	mov.w	r2, #4294967295
 80065c2:	611a      	str	r2, [r3, #16]
 80065c4:	e004      	b.n	80065d0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6912      	ldr	r2, [r2, #16]
 80065ce:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695a      	ldr	r2, [r3, #20]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	04c11db7 	.word	0x04c11db7

08006610 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006620:	231f      	movs	r3, #31
 8006622:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006624:	bf00      	nop
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1e5a      	subs	r2, r3, #1
 800662a:	613a      	str	r2, [r7, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d009      	beq.n	8006644 <HAL_CRCEx_Polynomial_Set+0x34>
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f003 031f 	and.w	r3, r3, #31
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0f0      	beq.n	8006626 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b18      	cmp	r3, #24
 8006648:	d846      	bhi.n	80066d8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <HAL_CRCEx_Polynomial_Set+0x40>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	080066df 	.word	0x080066df
 8006654:	080066d9 	.word	0x080066d9
 8006658:	080066d9 	.word	0x080066d9
 800665c:	080066d9 	.word	0x080066d9
 8006660:	080066d9 	.word	0x080066d9
 8006664:	080066d9 	.word	0x080066d9
 8006668:	080066d9 	.word	0x080066d9
 800666c:	080066d9 	.word	0x080066d9
 8006670:	080066cd 	.word	0x080066cd
 8006674:	080066d9 	.word	0x080066d9
 8006678:	080066d9 	.word	0x080066d9
 800667c:	080066d9 	.word	0x080066d9
 8006680:	080066d9 	.word	0x080066d9
 8006684:	080066d9 	.word	0x080066d9
 8006688:	080066d9 	.word	0x080066d9
 800668c:	080066d9 	.word	0x080066d9
 8006690:	080066c1 	.word	0x080066c1
 8006694:	080066d9 	.word	0x080066d9
 8006698:	080066d9 	.word	0x080066d9
 800669c:	080066d9 	.word	0x080066d9
 80066a0:	080066d9 	.word	0x080066d9
 80066a4:	080066d9 	.word	0x080066d9
 80066a8:	080066d9 	.word	0x080066d9
 80066ac:	080066d9 	.word	0x080066d9
 80066b0:	080066b5 	.word	0x080066b5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b06      	cmp	r3, #6
 80066b8:	d913      	bls.n	80066e2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80066be:	e010      	b.n	80066e2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	2b07      	cmp	r3, #7
 80066c4:	d90f      	bls.n	80066e6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80066ca:	e00c      	b.n	80066e6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b0f      	cmp	r3, #15
 80066d0:	d90b      	bls.n	80066ea <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80066d6:	e008      	b.n	80066ea <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	75fb      	strb	r3, [r7, #23]
      break;
 80066dc:	e006      	b.n	80066ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80066de:	bf00      	nop
 80066e0:	e004      	b.n	80066ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80066e2:	bf00      	nop
 80066e4:	e002      	b.n	80066ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80066e6:	bf00      	nop
 80066e8:	e000      	b.n	80066ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80066ea:	bf00      	nop
  }
  if (status == HAL_OK)
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10d      	bne.n	800670e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f023 0118 	bic.w	r1, r3, #24
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	430a      	orrs	r2, r1
 800670c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800670e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006710:	4618      	mov	r0, r3
 8006712:	371c      	adds	r7, #28
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e0ac      	b.n	8006888 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f000 f8b2 	bl	800689c <DFSDM_GetChannelFromInstance>
 8006738:	4603      	mov	r3, r0
 800673a:	4a55      	ldr	r2, [pc, #340]	; (8006890 <HAL_DFSDM_ChannelInit+0x174>)
 800673c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e09f      	b.n	8006888 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7fb fe93 	bl	8002474 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800674e:	4b51      	ldr	r3, [pc, #324]	; (8006894 <HAL_DFSDM_ChannelInit+0x178>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	4a4f      	ldr	r2, [pc, #316]	; (8006894 <HAL_DFSDM_ChannelInit+0x178>)
 8006756:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8006758:	4b4e      	ldr	r3, [pc, #312]	; (8006894 <HAL_DFSDM_ChannelInit+0x178>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d125      	bne.n	80067ac <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8006760:	4b4d      	ldr	r3, [pc, #308]	; (8006898 <HAL_DFSDM_ChannelInit+0x17c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a4c      	ldr	r2, [pc, #304]	; (8006898 <HAL_DFSDM_ChannelInit+0x17c>)
 8006766:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800676a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800676c:	4b4a      	ldr	r3, [pc, #296]	; (8006898 <HAL_DFSDM_ChannelInit+0x17c>)
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	4948      	ldr	r1, [pc, #288]	; (8006898 <HAL_DFSDM_ChannelInit+0x17c>)
 8006776:	4313      	orrs	r3, r2
 8006778:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800677a:	4b47      	ldr	r3, [pc, #284]	; (8006898 <HAL_DFSDM_ChannelInit+0x17c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a46      	ldr	r2, [pc, #280]	; (8006898 <HAL_DFSDM_ChannelInit+0x17c>)
 8006780:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8006784:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	791b      	ldrb	r3, [r3, #4]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d108      	bne.n	80067a0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800678e:	4b42      	ldr	r3, [pc, #264]	; (8006898 <HAL_DFSDM_ChannelInit+0x17c>)
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	3b01      	subs	r3, #1
 8006798:	041b      	lsls	r3, r3, #16
 800679a:	493f      	ldr	r1, [pc, #252]	; (8006898 <HAL_DFSDM_ChannelInit+0x17c>)
 800679c:	4313      	orrs	r3, r2
 800679e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80067a0:	4b3d      	ldr	r3, [pc, #244]	; (8006898 <HAL_DFSDM_ChannelInit+0x17c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a3c      	ldr	r2, [pc, #240]	; (8006898 <HAL_DFSDM_ChannelInit+0x17c>)
 80067a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067aa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80067ba:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6819      	ldr	r1, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80067ca:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80067d0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 020f 	bic.w	r2, r2, #15
 80067e8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6819      	ldr	r1, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80067f8:	431a      	orrs	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8006810:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6899      	ldr	r1, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	3b01      	subs	r3, #1
 8006822:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f002 0207 	and.w	r2, r2, #7
 800683c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6859      	ldr	r1, [r3, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8006850:	431a      	orrs	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006868:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f000 f810 	bl	800689c <DFSDM_GetChannelFromInstance>
 800687c:	4602      	mov	r2, r0
 800687e:	4904      	ldr	r1, [pc, #16]	; (8006890 <HAL_DFSDM_ChannelInit+0x174>)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	200022ac 	.word	0x200022ac
 8006894:	200022a8 	.word	0x200022a8
 8006898:	40016000 	.word	0x40016000

0800689c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a1c      	ldr	r2, [pc, #112]	; (8006918 <DFSDM_GetChannelFromInstance+0x7c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d102      	bne.n	80068b2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	e02b      	b.n	800690a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a19      	ldr	r2, [pc, #100]	; (800691c <DFSDM_GetChannelFromInstance+0x80>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d102      	bne.n	80068c0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80068ba:	2301      	movs	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	e024      	b.n	800690a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a17      	ldr	r2, [pc, #92]	; (8006920 <DFSDM_GetChannelFromInstance+0x84>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d102      	bne.n	80068ce <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80068c8:	2302      	movs	r3, #2
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	e01d      	b.n	800690a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a14      	ldr	r2, [pc, #80]	; (8006924 <DFSDM_GetChannelFromInstance+0x88>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d102      	bne.n	80068dc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80068d6:	2304      	movs	r3, #4
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	e016      	b.n	800690a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a12      	ldr	r2, [pc, #72]	; (8006928 <DFSDM_GetChannelFromInstance+0x8c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d102      	bne.n	80068ea <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80068e4:	2305      	movs	r3, #5
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	e00f      	b.n	800690a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a0f      	ldr	r2, [pc, #60]	; (800692c <DFSDM_GetChannelFromInstance+0x90>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d102      	bne.n	80068f8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80068f2:	2306      	movs	r3, #6
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	e008      	b.n	800690a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a0d      	ldr	r2, [pc, #52]	; (8006930 <DFSDM_GetChannelFromInstance+0x94>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d102      	bne.n	8006906 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8006900:	2307      	movs	r3, #7
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	e001      	b.n	800690a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8006906:	2303      	movs	r3, #3
 8006908:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800690a:	68fb      	ldr	r3, [r7, #12]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	40016000 	.word	0x40016000
 800691c:	40016020 	.word	0x40016020
 8006920:	40016040 	.word	0x40016040
 8006924:	40016080 	.word	0x40016080
 8006928:	400160a0 	.word	0x400160a0
 800692c:	400160c0 	.word	0x400160c0
 8006930:	400160e0 	.word	0x400160e0

08006934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800693e:	2300      	movs	r3, #0
 8006940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006942:	e17f      	b.n	8006c44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	2101      	movs	r1, #1
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	fa01 f303 	lsl.w	r3, r1, r3
 8006950:	4013      	ands	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 8171 	beq.w	8006c3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f003 0303 	and.w	r3, r3, #3
 8006964:	2b01      	cmp	r3, #1
 8006966:	d005      	beq.n	8006974 <HAL_GPIO_Init+0x40>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f003 0303 	and.w	r3, r3, #3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d130      	bne.n	80069d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	2203      	movs	r2, #3
 8006980:	fa02 f303 	lsl.w	r3, r2, r3
 8006984:	43db      	mvns	r3, r3
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4013      	ands	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	fa02 f303 	lsl.w	r3, r2, r3
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4313      	orrs	r3, r2
 800699c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80069aa:	2201      	movs	r2, #1
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	43db      	mvns	r3, r3
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4013      	ands	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	091b      	lsrs	r3, r3, #4
 80069c0:	f003 0201 	and.w	r2, r3, #1
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d118      	bne.n	8006a14 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80069e8:	2201      	movs	r2, #1
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	43db      	mvns	r3, r3
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	4013      	ands	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	08db      	lsrs	r3, r3, #3
 80069fe:	f003 0201 	and.w	r2, r3, #1
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	fa02 f303 	lsl.w	r3, r2, r3
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d017      	beq.n	8006a50 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	2203      	movs	r2, #3
 8006a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a30:	43db      	mvns	r3, r3
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4013      	ands	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f003 0303 	and.w	r3, r3, #3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d123      	bne.n	8006aa4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	08da      	lsrs	r2, r3, #3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3208      	adds	r2, #8
 8006a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f003 0307 	and.w	r3, r3, #7
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	220f      	movs	r2, #15
 8006a74:	fa02 f303 	lsl.w	r3, r2, r3
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	691a      	ldr	r2, [r3, #16]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	08da      	lsrs	r2, r3, #3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	3208      	adds	r2, #8
 8006a9e:	6939      	ldr	r1, [r7, #16]
 8006aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	2203      	movs	r2, #3
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f003 0203 	and.w	r2, r3, #3
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 80ac 	beq.w	8006c3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ae6:	4b5f      	ldr	r3, [pc, #380]	; (8006c64 <HAL_GPIO_Init+0x330>)
 8006ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aea:	4a5e      	ldr	r2, [pc, #376]	; (8006c64 <HAL_GPIO_Init+0x330>)
 8006aec:	f043 0301 	orr.w	r3, r3, #1
 8006af0:	6613      	str	r3, [r2, #96]	; 0x60
 8006af2:	4b5c      	ldr	r3, [pc, #368]	; (8006c64 <HAL_GPIO_Init+0x330>)
 8006af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	60bb      	str	r3, [r7, #8]
 8006afc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006afe:	4a5a      	ldr	r2, [pc, #360]	; (8006c68 <HAL_GPIO_Init+0x334>)
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	089b      	lsrs	r3, r3, #2
 8006b04:	3302      	adds	r3, #2
 8006b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	220f      	movs	r2, #15
 8006b16:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006b28:	d025      	beq.n	8006b76 <HAL_GPIO_Init+0x242>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a4f      	ldr	r2, [pc, #316]	; (8006c6c <HAL_GPIO_Init+0x338>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01f      	beq.n	8006b72 <HAL_GPIO_Init+0x23e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a4e      	ldr	r2, [pc, #312]	; (8006c70 <HAL_GPIO_Init+0x33c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d019      	beq.n	8006b6e <HAL_GPIO_Init+0x23a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a4d      	ldr	r2, [pc, #308]	; (8006c74 <HAL_GPIO_Init+0x340>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d013      	beq.n	8006b6a <HAL_GPIO_Init+0x236>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a4c      	ldr	r2, [pc, #304]	; (8006c78 <HAL_GPIO_Init+0x344>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00d      	beq.n	8006b66 <HAL_GPIO_Init+0x232>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a4b      	ldr	r2, [pc, #300]	; (8006c7c <HAL_GPIO_Init+0x348>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d007      	beq.n	8006b62 <HAL_GPIO_Init+0x22e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a4a      	ldr	r2, [pc, #296]	; (8006c80 <HAL_GPIO_Init+0x34c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d101      	bne.n	8006b5e <HAL_GPIO_Init+0x22a>
 8006b5a:	2306      	movs	r3, #6
 8006b5c:	e00c      	b.n	8006b78 <HAL_GPIO_Init+0x244>
 8006b5e:	2307      	movs	r3, #7
 8006b60:	e00a      	b.n	8006b78 <HAL_GPIO_Init+0x244>
 8006b62:	2305      	movs	r3, #5
 8006b64:	e008      	b.n	8006b78 <HAL_GPIO_Init+0x244>
 8006b66:	2304      	movs	r3, #4
 8006b68:	e006      	b.n	8006b78 <HAL_GPIO_Init+0x244>
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e004      	b.n	8006b78 <HAL_GPIO_Init+0x244>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e002      	b.n	8006b78 <HAL_GPIO_Init+0x244>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <HAL_GPIO_Init+0x244>
 8006b76:	2300      	movs	r3, #0
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	f002 0203 	and.w	r2, r2, #3
 8006b7e:	0092      	lsls	r2, r2, #2
 8006b80:	4093      	lsls	r3, r2
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006b88:	4937      	ldr	r1, [pc, #220]	; (8006c68 <HAL_GPIO_Init+0x334>)
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	089b      	lsrs	r3, r3, #2
 8006b8e:	3302      	adds	r3, #2
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b96:	4b3b      	ldr	r3, [pc, #236]	; (8006c84 <HAL_GPIO_Init+0x350>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	43db      	mvns	r3, r3
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006bba:	4a32      	ldr	r2, [pc, #200]	; (8006c84 <HAL_GPIO_Init+0x350>)
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006bc0:	4b30      	ldr	r3, [pc, #192]	; (8006c84 <HAL_GPIO_Init+0x350>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	43db      	mvns	r3, r3
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006be4:	4a27      	ldr	r2, [pc, #156]	; (8006c84 <HAL_GPIO_Init+0x350>)
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006bea:	4b26      	ldr	r3, [pc, #152]	; (8006c84 <HAL_GPIO_Init+0x350>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	43db      	mvns	r3, r3
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006c0e:	4a1d      	ldr	r2, [pc, #116]	; (8006c84 <HAL_GPIO_Init+0x350>)
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006c14:	4b1b      	ldr	r3, [pc, #108]	; (8006c84 <HAL_GPIO_Init+0x350>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	43db      	mvns	r3, r3
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4013      	ands	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006c38:	4a12      	ldr	r2, [pc, #72]	; (8006c84 <HAL_GPIO_Init+0x350>)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	3301      	adds	r3, #1
 8006c42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f47f ae78 	bne.w	8006944 <HAL_GPIO_Init+0x10>
  }
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	40021000 	.word	0x40021000
 8006c68:	40010000 	.word	0x40010000
 8006c6c:	48000400 	.word	0x48000400
 8006c70:	48000800 	.word	0x48000800
 8006c74:	48000c00 	.word	0x48000c00
 8006c78:	48001000 	.word	0x48001000
 8006c7c:	48001400 	.word	0x48001400
 8006c80:	48001800 	.word	0x48001800
 8006c84:	40010400 	.word	0x40010400

08006c88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c92:	2300      	movs	r3, #0
 8006c94:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006c96:	e0cd      	b.n	8006e34 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006c98:	2201      	movs	r2, #1
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 80c0 	beq.w	8006e2e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006cae:	4a68      	ldr	r2, [pc, #416]	; (8006e50 <HAL_GPIO_DeInit+0x1c8>)
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	089b      	lsrs	r3, r3, #2
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	220f      	movs	r2, #15
 8006cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	4013      	ands	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006cd6:	d025      	beq.n	8006d24 <HAL_GPIO_DeInit+0x9c>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a5e      	ldr	r2, [pc, #376]	; (8006e54 <HAL_GPIO_DeInit+0x1cc>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d01f      	beq.n	8006d20 <HAL_GPIO_DeInit+0x98>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a5d      	ldr	r2, [pc, #372]	; (8006e58 <HAL_GPIO_DeInit+0x1d0>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d019      	beq.n	8006d1c <HAL_GPIO_DeInit+0x94>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a5c      	ldr	r2, [pc, #368]	; (8006e5c <HAL_GPIO_DeInit+0x1d4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d013      	beq.n	8006d18 <HAL_GPIO_DeInit+0x90>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a5b      	ldr	r2, [pc, #364]	; (8006e60 <HAL_GPIO_DeInit+0x1d8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00d      	beq.n	8006d14 <HAL_GPIO_DeInit+0x8c>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a5a      	ldr	r2, [pc, #360]	; (8006e64 <HAL_GPIO_DeInit+0x1dc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d007      	beq.n	8006d10 <HAL_GPIO_DeInit+0x88>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a59      	ldr	r2, [pc, #356]	; (8006e68 <HAL_GPIO_DeInit+0x1e0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d101      	bne.n	8006d0c <HAL_GPIO_DeInit+0x84>
 8006d08:	2306      	movs	r3, #6
 8006d0a:	e00c      	b.n	8006d26 <HAL_GPIO_DeInit+0x9e>
 8006d0c:	2307      	movs	r3, #7
 8006d0e:	e00a      	b.n	8006d26 <HAL_GPIO_DeInit+0x9e>
 8006d10:	2305      	movs	r3, #5
 8006d12:	e008      	b.n	8006d26 <HAL_GPIO_DeInit+0x9e>
 8006d14:	2304      	movs	r3, #4
 8006d16:	e006      	b.n	8006d26 <HAL_GPIO_DeInit+0x9e>
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e004      	b.n	8006d26 <HAL_GPIO_DeInit+0x9e>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e002      	b.n	8006d26 <HAL_GPIO_DeInit+0x9e>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e000      	b.n	8006d26 <HAL_GPIO_DeInit+0x9e>
 8006d24:	2300      	movs	r3, #0
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	f002 0203 	and.w	r2, r2, #3
 8006d2c:	0092      	lsls	r2, r2, #2
 8006d2e:	4093      	lsls	r3, r2
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d132      	bne.n	8006d9c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006d36:	4b4d      	ldr	r3, [pc, #308]	; (8006e6c <HAL_GPIO_DeInit+0x1e4>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	494b      	ldr	r1, [pc, #300]	; (8006e6c <HAL_GPIO_DeInit+0x1e4>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006d44:	4b49      	ldr	r3, [pc, #292]	; (8006e6c <HAL_GPIO_DeInit+0x1e4>)
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	43db      	mvns	r3, r3
 8006d4c:	4947      	ldr	r1, [pc, #284]	; (8006e6c <HAL_GPIO_DeInit+0x1e4>)
 8006d4e:	4013      	ands	r3, r2
 8006d50:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006d52:	4b46      	ldr	r3, [pc, #280]	; (8006e6c <HAL_GPIO_DeInit+0x1e4>)
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	4944      	ldr	r1, [pc, #272]	; (8006e6c <HAL_GPIO_DeInit+0x1e4>)
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006d60:	4b42      	ldr	r3, [pc, #264]	; (8006e6c <HAL_GPIO_DeInit+0x1e4>)
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	43db      	mvns	r3, r3
 8006d68:	4940      	ldr	r1, [pc, #256]	; (8006e6c <HAL_GPIO_DeInit+0x1e4>)
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f003 0303 	and.w	r3, r3, #3
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	220f      	movs	r2, #15
 8006d78:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006d7e:	4a34      	ldr	r2, [pc, #208]	; (8006e50 <HAL_GPIO_DeInit+0x1c8>)
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	089b      	lsrs	r3, r3, #2
 8006d84:	3302      	adds	r3, #2
 8006d86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	43da      	mvns	r2, r3
 8006d8e:	4830      	ldr	r0, [pc, #192]	; (8006e50 <HAL_GPIO_DeInit+0x1c8>)
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	089b      	lsrs	r3, r3, #2
 8006d94:	400a      	ands	r2, r1
 8006d96:	3302      	adds	r3, #2
 8006d98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	2103      	movs	r1, #3
 8006da6:	fa01 f303 	lsl.w	r3, r1, r3
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	08da      	lsrs	r2, r3, #3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3208      	adds	r2, #8
 8006db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f003 0307 	and.w	r3, r3, #7
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	220f      	movs	r2, #15
 8006dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dca:	43db      	mvns	r3, r3
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	08d2      	lsrs	r2, r2, #3
 8006dd0:	4019      	ands	r1, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3208      	adds	r2, #8
 8006dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	2103      	movs	r1, #3
 8006de4:	fa01 f303 	lsl.w	r3, r1, r3
 8006de8:	43db      	mvns	r3, r3
 8006dea:	401a      	ands	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	2101      	movs	r1, #1
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	401a      	ands	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	2103      	movs	r1, #3
 8006e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e12:	43db      	mvns	r3, r3
 8006e14:	401a      	ands	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1e:	2101      	movs	r1, #1
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	fa01 f303 	lsl.w	r3, r1, r3
 8006e26:	43db      	mvns	r3, r3
 8006e28:	401a      	ands	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	3301      	adds	r3, #1
 8006e32:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	fa22 f303 	lsr.w	r3, r2, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f47f af2b 	bne.w	8006c98 <HAL_GPIO_DeInit+0x10>
  }
}
 8006e42:	bf00      	nop
 8006e44:	bf00      	nop
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	40010000 	.word	0x40010000
 8006e54:	48000400 	.word	0x48000400
 8006e58:	48000800 	.word	0x48000800
 8006e5c:	48000c00 	.word	0x48000c00
 8006e60:	48001000 	.word	0x48001000
 8006e64:	48001400 	.word	0x48001400
 8006e68:	48001800 	.word	0x48001800
 8006e6c:	40010400 	.word	0x40010400

08006e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	807b      	strh	r3, [r7, #2]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e80:	787b      	ldrb	r3, [r7, #1]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e86:	887a      	ldrh	r2, [r7, #2]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e8c:	e002      	b.n	8006e94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e8e:	887a      	ldrh	r2, [r7, #2]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006eb2:	887a      	ldrh	r2, [r7, #2]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	041a      	lsls	r2, r3, #16
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	43d9      	mvns	r1, r3
 8006ebe:	887b      	ldrh	r3, [r7, #2]
 8006ec0:	400b      	ands	r3, r1
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	619a      	str	r2, [r3, #24]
}
 8006ec8:	bf00      	nop
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006ede:	4b08      	ldr	r3, [pc, #32]	; (8006f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ee0:	695a      	ldr	r2, [r3, #20]
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d006      	beq.n	8006ef8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006eea:	4a05      	ldr	r2, [pc, #20]	; (8006f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006eec:	88fb      	ldrh	r3, [r7, #6]
 8006eee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fb fa34 	bl	8002360 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40010400 	.word	0x40010400

08006f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e081      	b.n	800701a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d106      	bne.n	8006f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f8a8 	bl	8007080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2224      	movs	r2, #36	; 0x24
 8006f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0201 	bic.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d107      	bne.n	8006f7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f7a:	609a      	str	r2, [r3, #8]
 8006f7c:	e006      	b.n	8006f8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006f8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d104      	bne.n	8006f9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68da      	ldr	r2, [r3, #12]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691a      	ldr	r2, [r3, #16]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69d9      	ldr	r1, [r3, #28]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a1a      	ldr	r2, [r3, #32]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0201 	orr.w	r2, r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e021      	b.n	8007078 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2224      	movs	r2, #36	; 0x24
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0201 	bic.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f821 	bl	8007094 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	4608      	mov	r0, r1
 80070b2:	4611      	mov	r1, r2
 80070b4:	461a      	mov	r2, r3
 80070b6:	4603      	mov	r3, r0
 80070b8:	817b      	strh	r3, [r7, #10]
 80070ba:	460b      	mov	r3, r1
 80070bc:	813b      	strh	r3, [r7, #8]
 80070be:	4613      	mov	r3, r2
 80070c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	f040 80f9 	bne.w	80072c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <HAL_I2C_Mem_Write+0x34>
 80070d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d105      	bne.n	80070e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e0ed      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_I2C_Mem_Write+0x4e>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e0e6      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80070fe:	f7ff f8e1 	bl	80062c4 <HAL_GetTick>
 8007102:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	2319      	movs	r3, #25
 800710a:	2201      	movs	r2, #1
 800710c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fadd 	bl	80076d0 <I2C_WaitOnFlagUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e0d1      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2221      	movs	r2, #33	; 0x21
 8007124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2240      	movs	r2, #64	; 0x40
 800712c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a3a      	ldr	r2, [r7, #32]
 800713a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007140:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007148:	88f8      	ldrh	r0, [r7, #6]
 800714a:	893a      	ldrh	r2, [r7, #8]
 800714c:	8979      	ldrh	r1, [r7, #10]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	4603      	mov	r3, r0
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f9ed 	bl	8007538 <I2C_RequestMemoryWrite>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d005      	beq.n	8007170 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e0a9      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007174:	b29b      	uxth	r3, r3
 8007176:	2bff      	cmp	r3, #255	; 0xff
 8007178:	d90e      	bls.n	8007198 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	22ff      	movs	r2, #255	; 0xff
 800717e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007184:	b2da      	uxtb	r2, r3
 8007186:	8979      	ldrh	r1, [r7, #10]
 8007188:	2300      	movs	r3, #0
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fc45 	bl	8007a20 <I2C_TransferConfig>
 8007196:	e00f      	b.n	80071b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800719c:	b29a      	uxth	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	8979      	ldrh	r1, [r7, #10]
 80071aa:	2300      	movs	r3, #0
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fc34 	bl	8007a20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 fac7 	bl	8007750 <I2C_WaitOnTXISFlagUntilTimeout>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e07b      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	781a      	ldrb	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	3b01      	subs	r3, #1
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007200:	b29b      	uxth	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d034      	beq.n	8007270 <HAL_I2C_Mem_Write+0x1c8>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800720a:	2b00      	cmp	r3, #0
 800720c:	d130      	bne.n	8007270 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	2200      	movs	r2, #0
 8007216:	2180      	movs	r1, #128	; 0x80
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 fa59 	bl	80076d0 <I2C_WaitOnFlagUntilTimeout>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e04d      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800722c:	b29b      	uxth	r3, r3
 800722e:	2bff      	cmp	r3, #255	; 0xff
 8007230:	d90e      	bls.n	8007250 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	22ff      	movs	r2, #255	; 0xff
 8007236:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800723c:	b2da      	uxtb	r2, r3
 800723e:	8979      	ldrh	r1, [r7, #10]
 8007240:	2300      	movs	r3, #0
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 fbe9 	bl	8007a20 <I2C_TransferConfig>
 800724e:	e00f      	b.n	8007270 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007254:	b29a      	uxth	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800725e:	b2da      	uxtb	r2, r3
 8007260:	8979      	ldrh	r1, [r7, #10]
 8007262:	2300      	movs	r3, #0
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 fbd8 	bl	8007a20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d19e      	bne.n	80071b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 faa6 	bl	80077d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e01a      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2220      	movs	r2, #32
 8007294:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6859      	ldr	r1, [r3, #4]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <HAL_I2C_Mem_Write+0x224>)
 80072a2:	400b      	ands	r3, r1
 80072a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	e000      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80072c2:	2302      	movs	r3, #2
  }
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	fe00e800 	.word	0xfe00e800

080072d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	4608      	mov	r0, r1
 80072da:	4611      	mov	r1, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	4603      	mov	r3, r0
 80072e0:	817b      	strh	r3, [r7, #10]
 80072e2:	460b      	mov	r3, r1
 80072e4:	813b      	strh	r3, [r7, #8]
 80072e6:	4613      	mov	r3, r2
 80072e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	f040 80fd 	bne.w	80074f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <HAL_I2C_Mem_Read+0x34>
 80072fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007300:	2b00      	cmp	r3, #0
 8007302:	d105      	bne.n	8007310 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800730a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e0f1      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007316:	2b01      	cmp	r3, #1
 8007318:	d101      	bne.n	800731e <HAL_I2C_Mem_Read+0x4e>
 800731a:	2302      	movs	r3, #2
 800731c:	e0ea      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007326:	f7fe ffcd 	bl	80062c4 <HAL_GetTick>
 800732a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	2319      	movs	r3, #25
 8007332:	2201      	movs	r2, #1
 8007334:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 f9c9 	bl	80076d0 <I2C_WaitOnFlagUntilTimeout>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e0d5      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2222      	movs	r2, #34	; 0x22
 800734c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2240      	movs	r2, #64	; 0x40
 8007354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a3a      	ldr	r2, [r7, #32]
 8007362:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007368:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007370:	88f8      	ldrh	r0, [r7, #6]
 8007372:	893a      	ldrh	r2, [r7, #8]
 8007374:	8979      	ldrh	r1, [r7, #10]
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	4603      	mov	r3, r0
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 f92d 	bl	80075e0 <I2C_RequestMemoryRead>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d005      	beq.n	8007398 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e0ad      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739c:	b29b      	uxth	r3, r3
 800739e:	2bff      	cmp	r3, #255	; 0xff
 80073a0:	d90e      	bls.n	80073c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	22ff      	movs	r2, #255	; 0xff
 80073a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	8979      	ldrh	r1, [r7, #10]
 80073b0:	4b52      	ldr	r3, [pc, #328]	; (80074fc <HAL_I2C_Mem_Read+0x22c>)
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 fb31 	bl	8007a20 <I2C_TransferConfig>
 80073be:	e00f      	b.n	80073e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	8979      	ldrh	r1, [r7, #10]
 80073d2:	4b4a      	ldr	r3, [pc, #296]	; (80074fc <HAL_I2C_Mem_Read+0x22c>)
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 fb20 	bl	8007a20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	2200      	movs	r2, #0
 80073e8:	2104      	movs	r1, #4
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 f970 	bl	80076d0 <I2C_WaitOnFlagUntilTimeout>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e07c      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d034      	beq.n	80074a0 <HAL_I2C_Mem_Read+0x1d0>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800743a:	2b00      	cmp	r3, #0
 800743c:	d130      	bne.n	80074a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	2200      	movs	r2, #0
 8007446:	2180      	movs	r1, #128	; 0x80
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 f941 	bl	80076d0 <I2C_WaitOnFlagUntilTimeout>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e04d      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745c:	b29b      	uxth	r3, r3
 800745e:	2bff      	cmp	r3, #255	; 0xff
 8007460:	d90e      	bls.n	8007480 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	22ff      	movs	r2, #255	; 0xff
 8007466:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800746c:	b2da      	uxtb	r2, r3
 800746e:	8979      	ldrh	r1, [r7, #10]
 8007470:	2300      	movs	r3, #0
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fad1 	bl	8007a20 <I2C_TransferConfig>
 800747e:	e00f      	b.n	80074a0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007484:	b29a      	uxth	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800748e:	b2da      	uxtb	r2, r3
 8007490:	8979      	ldrh	r1, [r7, #10]
 8007492:	2300      	movs	r3, #0
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 fac0 	bl	8007a20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d19a      	bne.n	80073e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 f98e 	bl	80077d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e01a      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2220      	movs	r2, #32
 80074c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6859      	ldr	r1, [r3, #4]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <HAL_I2C_Mem_Read+0x230>)
 80074d2:	400b      	ands	r3, r1
 80074d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2220      	movs	r2, #32
 80074da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	e000      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80074f2:	2302      	movs	r3, #2
  }
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	80002400 	.word	0x80002400
 8007500:	fe00e800 	.word	0xfe00e800

08007504 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007512:	b2db      	uxtb	r3, r3
}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800752c:	4618      	mov	r0, r3
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af02      	add	r7, sp, #8
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	4608      	mov	r0, r1
 8007542:	4611      	mov	r1, r2
 8007544:	461a      	mov	r2, r3
 8007546:	4603      	mov	r3, r0
 8007548:	817b      	strh	r3, [r7, #10]
 800754a:	460b      	mov	r3, r1
 800754c:	813b      	strh	r3, [r7, #8]
 800754e:	4613      	mov	r3, r2
 8007550:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007552:	88fb      	ldrh	r3, [r7, #6]
 8007554:	b2da      	uxtb	r2, r3
 8007556:	8979      	ldrh	r1, [r7, #10]
 8007558:	4b20      	ldr	r3, [pc, #128]	; (80075dc <I2C_RequestMemoryWrite+0xa4>)
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 fa5d 	bl	8007a20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	69b9      	ldr	r1, [r7, #24]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 f8f0 	bl	8007750 <I2C_WaitOnTXISFlagUntilTimeout>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e02c      	b.n	80075d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d105      	bne.n	800758c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007580:	893b      	ldrh	r3, [r7, #8]
 8007582:	b2da      	uxtb	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	629a      	str	r2, [r3, #40]	; 0x28
 800758a:	e015      	b.n	80075b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800758c:	893b      	ldrh	r3, [r7, #8]
 800758e:	0a1b      	lsrs	r3, r3, #8
 8007590:	b29b      	uxth	r3, r3
 8007592:	b2da      	uxtb	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	69b9      	ldr	r1, [r7, #24]
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 f8d6 	bl	8007750 <I2C_WaitOnTXISFlagUntilTimeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e012      	b.n	80075d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075ae:	893b      	ldrh	r3, [r7, #8]
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	2200      	movs	r2, #0
 80075c0:	2180      	movs	r1, #128	; 0x80
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f884 	bl	80076d0 <I2C_WaitOnFlagUntilTimeout>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e000      	b.n	80075d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	80002000 	.word	0x80002000

080075e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	4608      	mov	r0, r1
 80075ea:	4611      	mov	r1, r2
 80075ec:	461a      	mov	r2, r3
 80075ee:	4603      	mov	r3, r0
 80075f0:	817b      	strh	r3, [r7, #10]
 80075f2:	460b      	mov	r3, r1
 80075f4:	813b      	strh	r3, [r7, #8]
 80075f6:	4613      	mov	r3, r2
 80075f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80075fa:	88fb      	ldrh	r3, [r7, #6]
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	8979      	ldrh	r1, [r7, #10]
 8007600:	4b20      	ldr	r3, [pc, #128]	; (8007684 <I2C_RequestMemoryRead+0xa4>)
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	2300      	movs	r3, #0
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 fa0a 	bl	8007a20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800760c:	69fa      	ldr	r2, [r7, #28]
 800760e:	69b9      	ldr	r1, [r7, #24]
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 f89d 	bl	8007750 <I2C_WaitOnTXISFlagUntilTimeout>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e02c      	b.n	800767a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007620:	88fb      	ldrh	r3, [r7, #6]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d105      	bne.n	8007632 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007626:	893b      	ldrh	r3, [r7, #8]
 8007628:	b2da      	uxtb	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	629a      	str	r2, [r3, #40]	; 0x28
 8007630:	e015      	b.n	800765e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007632:	893b      	ldrh	r3, [r7, #8]
 8007634:	0a1b      	lsrs	r3, r3, #8
 8007636:	b29b      	uxth	r3, r3
 8007638:	b2da      	uxtb	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007640:	69fa      	ldr	r2, [r7, #28]
 8007642:	69b9      	ldr	r1, [r7, #24]
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 f883 	bl	8007750 <I2C_WaitOnTXISFlagUntilTimeout>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e012      	b.n	800767a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007654:	893b      	ldrh	r3, [r7, #8]
 8007656:	b2da      	uxtb	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	2200      	movs	r2, #0
 8007666:	2140      	movs	r1, #64	; 0x40
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f831 	bl	80076d0 <I2C_WaitOnFlagUntilTimeout>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e000      	b.n	800767a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	80002000 	.word	0x80002000

08007688 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b02      	cmp	r3, #2
 800769c:	d103      	bne.n	80076a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2200      	movs	r2, #0
 80076a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d007      	beq.n	80076c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699a      	ldr	r2, [r3, #24]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0201 	orr.w	r2, r2, #1
 80076c2:	619a      	str	r2, [r3, #24]
  }
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	4613      	mov	r3, r2
 80076de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076e0:	e022      	b.n	8007728 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e8:	d01e      	beq.n	8007728 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ea:	f7fe fdeb 	bl	80062c4 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d302      	bcc.n	8007700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d113      	bne.n	8007728 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007704:	f043 0220 	orr.w	r2, r3, #32
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2220      	movs	r2, #32
 8007710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e00f      	b.n	8007748 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	4013      	ands	r3, r2
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	429a      	cmp	r2, r3
 8007736:	bf0c      	ite	eq
 8007738:	2301      	moveq	r3, #1
 800773a:	2300      	movne	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	461a      	mov	r2, r3
 8007740:	79fb      	ldrb	r3, [r7, #7]
 8007742:	429a      	cmp	r2, r3
 8007744:	d0cd      	beq.n	80076e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800775c:	e02c      	b.n	80077b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	68b9      	ldr	r1, [r7, #8]
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 f870 	bl	8007848 <I2C_IsErrorOccurred>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e02a      	b.n	80077c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007778:	d01e      	beq.n	80077b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800777a:	f7fe fda3 	bl	80062c4 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	429a      	cmp	r2, r3
 8007788:	d302      	bcc.n	8007790 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d113      	bne.n	80077b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007794:	f043 0220 	orr.w	r2, r3, #32
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e007      	b.n	80077c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d1cb      	bne.n	800775e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077dc:	e028      	b.n	8007830 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	68b9      	ldr	r1, [r7, #8]
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 f830 	bl	8007848 <I2C_IsErrorOccurred>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e026      	b.n	8007840 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077f2:	f7fe fd67 	bl	80062c4 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d302      	bcc.n	8007808 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d113      	bne.n	8007830 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780c:	f043 0220 	orr.w	r2, r3, #32
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e007      	b.n	8007840 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b20      	cmp	r3, #32
 800783c:	d1cf      	bne.n	80077de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08a      	sub	sp, #40	; 0x28
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	f003 0310 	and.w	r3, r3, #16
 8007870:	2b00      	cmp	r3, #0
 8007872:	d075      	beq.n	8007960 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2210      	movs	r2, #16
 800787a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800787c:	e056      	b.n	800792c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007884:	d052      	beq.n	800792c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007886:	f7fe fd1d 	bl	80062c4 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	429a      	cmp	r2, r3
 8007894:	d302      	bcc.n	800789c <I2C_IsErrorOccurred+0x54>
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d147      	bne.n	800792c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078be:	d12e      	bne.n	800791e <I2C_IsErrorOccurred+0xd6>
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078c6:	d02a      	beq.n	800791e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80078c8:	7cfb      	ldrb	r3, [r7, #19]
 80078ca:	2b20      	cmp	r3, #32
 80078cc:	d027      	beq.n	800791e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80078de:	f7fe fcf1 	bl	80062c4 <HAL_GetTick>
 80078e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078e4:	e01b      	b.n	800791e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80078e6:	f7fe fced 	bl	80062c4 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b19      	cmp	r3, #25
 80078f2:	d914      	bls.n	800791e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f8:	f043 0220 	orr.w	r2, r3, #32
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	f003 0320 	and.w	r3, r3, #32
 8007928:	2b20      	cmp	r3, #32
 800792a:	d1dc      	bne.n	80078e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b20      	cmp	r3, #32
 8007938:	d003      	beq.n	8007942 <I2C_IsErrorOccurred+0xfa>
 800793a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800793e:	2b00      	cmp	r3, #0
 8007940:	d09d      	beq.n	800787e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007946:	2b00      	cmp	r3, #0
 8007948:	d103      	bne.n	8007952 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2220      	movs	r2, #32
 8007950:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	f043 0304 	orr.w	r3, r3, #4
 8007958:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00b      	beq.n	800798a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	f043 0301 	orr.w	r3, r3, #1
 8007978:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007982:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	f043 0308 	orr.w	r3, r3, #8
 800799a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00b      	beq.n	80079ce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	f043 0302 	orr.w	r3, r3, #2
 80079bc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80079ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d01c      	beq.n	8007a10 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7ff fe56 	bl	8007688 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6859      	ldr	r1, [r3, #4]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	4b0d      	ldr	r3, [pc, #52]	; (8007a1c <I2C_IsErrorOccurred+0x1d4>)
 80079e8:	400b      	ands	r3, r1
 80079ea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	431a      	orrs	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2220      	movs	r2, #32
 80079fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3728      	adds	r7, #40	; 0x28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	fe00e800 	.word	0xfe00e800

08007a20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	607b      	str	r3, [r7, #4]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	817b      	strh	r3, [r7, #10]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a32:	897b      	ldrh	r3, [r7, #10]
 8007a34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a38:	7a7b      	ldrb	r3, [r7, #9]
 8007a3a:	041b      	lsls	r3, r3, #16
 8007a3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	0d5b      	lsrs	r3, r3, #21
 8007a5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007a5e:	4b08      	ldr	r3, [pc, #32]	; (8007a80 <I2C_TransferConfig+0x60>)
 8007a60:	430b      	orrs	r3, r1
 8007a62:	43db      	mvns	r3, r3
 8007a64:	ea02 0103 	and.w	r1, r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007a72:	bf00      	nop
 8007a74:	371c      	adds	r7, #28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	03ff63ff 	.word	0x03ff63ff

08007a84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b20      	cmp	r3, #32
 8007a98:	d138      	bne.n	8007b0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d101      	bne.n	8007aa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e032      	b.n	8007b0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2224      	movs	r2, #36	; 0x24
 8007ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0201 	bic.w	r2, r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ad6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6819      	ldr	r1, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	e000      	b.n	8007b0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b0c:	2302      	movs	r3, #2
  }
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b085      	sub	sp, #20
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	d139      	bne.n	8007ba4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e033      	b.n	8007ba6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2224      	movs	r2, #36	; 0x24
 8007b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 0201 	bic.w	r2, r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007b6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0201 	orr.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2220      	movs	r2, #32
 8007b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e000      	b.n	8007ba6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ba4:	2302      	movs	r3, #2
  }
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bb4:	b08f      	sub	sp, #60	; 0x3c
 8007bb6:	af0a      	add	r7, sp, #40	; 0x28
 8007bb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e116      	b.n	8007df2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d106      	bne.n	8007be4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7fa fdd8 	bl	8002794 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2203      	movs	r2, #3
 8007be8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d102      	bne.n	8007bfe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f002 fccd 	bl	800a5a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	603b      	str	r3, [r7, #0]
 8007c0e:	687e      	ldr	r6, [r7, #4]
 8007c10:	466d      	mov	r5, sp
 8007c12:	f106 0410 	add.w	r4, r6, #16
 8007c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007c22:	e885 0003 	stmia.w	r5, {r0, r1}
 8007c26:	1d33      	adds	r3, r6, #4
 8007c28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c2a:	6838      	ldr	r0, [r7, #0]
 8007c2c:	f002 fc8d 	bl	800a54a <USB_CoreInit>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d005      	beq.n	8007c42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e0d7      	b.n	8007df2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2100      	movs	r1, #0
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f002 fcbb 	bl	800a5c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]
 8007c52:	e04a      	b.n	8007cea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007c54:	7bfa      	ldrb	r2, [r7, #15]
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	333d      	adds	r3, #61	; 0x3d
 8007c64:	2201      	movs	r2, #1
 8007c66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007c68:	7bfa      	ldrb	r2, [r7, #15]
 8007c6a:	6879      	ldr	r1, [r7, #4]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	440b      	add	r3, r1
 8007c76:	333c      	adds	r3, #60	; 0x3c
 8007c78:	7bfa      	ldrb	r2, [r7, #15]
 8007c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007c7c:	7bfa      	ldrb	r2, [r7, #15]
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
 8007c80:	b298      	uxth	r0, r3
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	4613      	mov	r3, r2
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	4413      	add	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	3344      	adds	r3, #68	; 0x44
 8007c90:	4602      	mov	r2, r0
 8007c92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007c94:	7bfa      	ldrb	r2, [r7, #15]
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	3340      	adds	r3, #64	; 0x40
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007ca8:	7bfa      	ldrb	r2, [r7, #15]
 8007caa:	6879      	ldr	r1, [r7, #4]
 8007cac:	4613      	mov	r3, r2
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	3348      	adds	r3, #72	; 0x48
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007cbc:	7bfa      	ldrb	r2, [r7, #15]
 8007cbe:	6879      	ldr	r1, [r7, #4]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	440b      	add	r3, r1
 8007cca:	334c      	adds	r3, #76	; 0x4c
 8007ccc:	2200      	movs	r2, #0
 8007cce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007cd0:	7bfa      	ldrb	r2, [r7, #15]
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	4413      	add	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	440b      	add	r3, r1
 8007cde:	3354      	adds	r3, #84	; 0x54
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	73fb      	strb	r3, [r7, #15]
 8007cea:	7bfa      	ldrb	r2, [r7, #15]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d3af      	bcc.n	8007c54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
 8007cf8:	e044      	b.n	8007d84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007cfa:	7bfa      	ldrb	r2, [r7, #15]
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	440b      	add	r3, r1
 8007d08:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007d10:	7bfa      	ldrb	r2, [r7, #15]
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	4613      	mov	r3, r2
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	440b      	add	r3, r1
 8007d1e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007d22:	7bfa      	ldrb	r2, [r7, #15]
 8007d24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007d26:	7bfa      	ldrb	r2, [r7, #15]
 8007d28:	6879      	ldr	r1, [r7, #4]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	440b      	add	r3, r1
 8007d34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007d38:	2200      	movs	r2, #0
 8007d3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007d3c:	7bfa      	ldrb	r2, [r7, #15]
 8007d3e:	6879      	ldr	r1, [r7, #4]
 8007d40:	4613      	mov	r3, r2
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	440b      	add	r3, r1
 8007d4a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007d52:	7bfa      	ldrb	r2, [r7, #15]
 8007d54:	6879      	ldr	r1, [r7, #4]
 8007d56:	4613      	mov	r3, r2
 8007d58:	00db      	lsls	r3, r3, #3
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	440b      	add	r3, r1
 8007d60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007d68:	7bfa      	ldrb	r2, [r7, #15]
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	440b      	add	r3, r1
 8007d76:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
 8007d80:	3301      	adds	r3, #1
 8007d82:	73fb      	strb	r3, [r7, #15]
 8007d84:	7bfa      	ldrb	r2, [r7, #15]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d3b5      	bcc.n	8007cfa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	687e      	ldr	r6, [r7, #4]
 8007d96:	466d      	mov	r5, sp
 8007d98:	f106 0410 	add.w	r4, r6, #16
 8007d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007da4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007da8:	e885 0003 	stmia.w	r5, {r0, r1}
 8007dac:	1d33      	adds	r3, r6, #4
 8007dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007db0:	6838      	ldr	r0, [r7, #0]
 8007db2:	f002 fc53 	bl	800a65c <USB_DevInit>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d005      	beq.n	8007dc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e014      	b.n	8007df2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d102      	bne.n	8007de6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f80a 	bl	8007dfa <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f002 fdff 	bl	800a9ee <USB_DevDisconnect>

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dfa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b085      	sub	sp, #20
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e2c:	f043 0303 	orr.w	r3, r3, #3
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
	...

08007e44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e48:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a04      	ldr	r2, [pc, #16]	; (8007e60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e52:	6013      	str	r3, [r2, #0]
}
 8007e54:	bf00      	nop
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	40007000 	.word	0x40007000

08007e64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007e68:	4b04      	ldr	r3, [pc, #16]	; (8007e7c <HAL_PWREx_GetVoltageRange+0x18>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	40007000 	.word	0x40007000

08007e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e8e:	d130      	bne.n	8007ef2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e90:	4b23      	ldr	r3, [pc, #140]	; (8007f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e9c:	d038      	beq.n	8007f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e9e:	4b20      	ldr	r3, [pc, #128]	; (8007f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007ea6:	4a1e      	ldr	r2, [pc, #120]	; (8007f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007eac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007eae:	4b1d      	ldr	r3, [pc, #116]	; (8007f24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2232      	movs	r2, #50	; 0x32
 8007eb4:	fb02 f303 	mul.w	r3, r2, r3
 8007eb8:	4a1b      	ldr	r2, [pc, #108]	; (8007f28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007eba:	fba2 2303 	umull	r2, r3, r2, r3
 8007ebe:	0c9b      	lsrs	r3, r3, #18
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ec4:	e002      	b.n	8007ecc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ecc:	4b14      	ldr	r3, [pc, #80]	; (8007f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed8:	d102      	bne.n	8007ee0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1f2      	bne.n	8007ec6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007ee0:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eec:	d110      	bne.n	8007f10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e00f      	b.n	8007f12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007efe:	d007      	beq.n	8007f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007f08:	4a05      	ldr	r2, [pc, #20]	; (8007f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	40007000 	.word	0x40007000
 8007f24:	2000000c 	.word	0x2000000c
 8007f28:	431bde83 	.word	0x431bde83

08007f2c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007f30:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	4a04      	ldr	r2, [pc, #16]	; (8007f48 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f3a:	6053      	str	r3, [r2, #4]
}
 8007f3c:	bf00      	nop
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	40007000 	.word	0x40007000

08007f4c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007f54:	f7fe f9b6 	bl	80062c4 <HAL_GetTick>
 8007f58:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e063      	b.n	800802c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10b      	bne.n	8007f88 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7fa fadf 	bl	800253c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007f7e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f858 	bl	8008038 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	021a      	lsls	r2, r3, #8
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	2120      	movs	r1, #32
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f850 	bl	8008054 <QSPI_WaitFlagStateUntilTimeout>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007fb8:	7afb      	ldrb	r3, [r7, #11]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d131      	bne.n	8008022 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007fc8:	f023 0310 	bic.w	r3, r3, #16
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	6852      	ldr	r2, [r2, #4]
 8007fd0:	0611      	lsls	r1, r2, #24
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	68d2      	ldr	r2, [r2, #12]
 8007fd6:	4311      	orrs	r1, r2
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	430b      	orrs	r3, r1
 8007fde:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	4b13      	ldr	r3, [pc, #76]	; (8008034 <HAL_QSPI_Init+0xe8>)
 8007fe8:	4013      	ands	r3, r2
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	6912      	ldr	r2, [r2, #16]
 8007fee:	0411      	lsls	r1, r2, #16
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	6952      	ldr	r2, [r2, #20]
 8007ff4:	4311      	orrs	r1, r2
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	6992      	ldr	r2, [r2, #24]
 8007ffa:	4311      	orrs	r1, r2
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6812      	ldr	r2, [r2, #0]
 8008000:	430b      	orrs	r3, r1
 8008002:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0201 	orr.w	r2, r2, #1
 8008012:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800802a:	7afb      	ldrb	r3, [r7, #11]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	ffe0f8fe 	.word	0xffe0f8fe

08008038 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	641a      	str	r2, [r3, #64]	; 0x40
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	603b      	str	r3, [r7, #0]
 8008060:	4613      	mov	r3, r2
 8008062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008064:	e01a      	b.n	800809c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806c:	d016      	beq.n	800809c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800806e:	f7fe f929 	bl	80062c4 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	429a      	cmp	r2, r3
 800807c:	d302      	bcc.n	8008084 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10b      	bne.n	800809c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2204      	movs	r2, #4
 8008088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008090:	f043 0201 	orr.w	r2, r3, #1
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e00e      	b.n	80080ba <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	bf14      	ite	ne
 80080aa:	2301      	movne	r3, #1
 80080ac:	2300      	moveq	r3, #0
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d1d6      	bne.n	8008066 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e3ca      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080d6:	4b97      	ldr	r3, [pc, #604]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f003 030c 	and.w	r3, r3, #12
 80080de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080e0:	4b94      	ldr	r3, [pc, #592]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f003 0303 	and.w	r3, r3, #3
 80080e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0310 	and.w	r3, r3, #16
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 80e4 	beq.w	80082c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d007      	beq.n	800810e <HAL_RCC_OscConfig+0x4a>
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	2b0c      	cmp	r3, #12
 8008102:	f040 808b 	bne.w	800821c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2b01      	cmp	r3, #1
 800810a:	f040 8087 	bne.w	800821c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800810e:	4b89      	ldr	r3, [pc, #548]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <HAL_RCC_OscConfig+0x62>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e3a2      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1a      	ldr	r2, [r3, #32]
 800812a:	4b82      	ldr	r3, [pc, #520]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0308 	and.w	r3, r3, #8
 8008132:	2b00      	cmp	r3, #0
 8008134:	d004      	beq.n	8008140 <HAL_RCC_OscConfig+0x7c>
 8008136:	4b7f      	ldr	r3, [pc, #508]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800813e:	e005      	b.n	800814c <HAL_RCC_OscConfig+0x88>
 8008140:	4b7c      	ldr	r3, [pc, #496]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008146:	091b      	lsrs	r3, r3, #4
 8008148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800814c:	4293      	cmp	r3, r2
 800814e:	d223      	bcs.n	8008198 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a1b      	ldr	r3, [r3, #32]
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fd55 	bl	8008c04 <RCC_SetFlashLatencyFromMSIRange>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e383      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008164:	4b73      	ldr	r3, [pc, #460]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a72      	ldr	r2, [pc, #456]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 800816a:	f043 0308 	orr.w	r3, r3, #8
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	4b70      	ldr	r3, [pc, #448]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	496d      	ldr	r1, [pc, #436]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 800817e:	4313      	orrs	r3, r2
 8008180:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008182:	4b6c      	ldr	r3, [pc, #432]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	4968      	ldr	r1, [pc, #416]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008192:	4313      	orrs	r3, r2
 8008194:	604b      	str	r3, [r1, #4]
 8008196:	e025      	b.n	80081e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008198:	4b66      	ldr	r3, [pc, #408]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a65      	ldr	r2, [pc, #404]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 800819e:	f043 0308 	orr.w	r3, r3, #8
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	4b63      	ldr	r3, [pc, #396]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	4960      	ldr	r1, [pc, #384]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081b6:	4b5f      	ldr	r3, [pc, #380]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	495b      	ldr	r1, [pc, #364]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d109      	bne.n	80081e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fd15 	bl	8008c04 <RCC_SetFlashLatencyFromMSIRange>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e343      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081e4:	f000 fc4a 	bl	8008a7c <HAL_RCC_GetSysClockFreq>
 80081e8:	4602      	mov	r2, r0
 80081ea:	4b52      	ldr	r3, [pc, #328]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	091b      	lsrs	r3, r3, #4
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	4950      	ldr	r1, [pc, #320]	; (8008338 <HAL_RCC_OscConfig+0x274>)
 80081f6:	5ccb      	ldrb	r3, [r1, r3]
 80081f8:	f003 031f 	and.w	r3, r3, #31
 80081fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008200:	4a4e      	ldr	r2, [pc, #312]	; (800833c <HAL_RCC_OscConfig+0x278>)
 8008202:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008204:	4b4e      	ldr	r3, [pc, #312]	; (8008340 <HAL_RCC_OscConfig+0x27c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe f80b 	bl	8006224 <HAL_InitTick>
 800820e:	4603      	mov	r3, r0
 8008210:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d052      	beq.n	80082be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008218:	7bfb      	ldrb	r3, [r7, #15]
 800821a:	e327      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d032      	beq.n	800828a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008224:	4b43      	ldr	r3, [pc, #268]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a42      	ldr	r2, [pc, #264]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 800822a:	f043 0301 	orr.w	r3, r3, #1
 800822e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008230:	f7fe f848 	bl	80062c4 <HAL_GetTick>
 8008234:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008236:	e008      	b.n	800824a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008238:	f7fe f844 	bl	80062c4 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e310      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800824a:	4b3a      	ldr	r3, [pc, #232]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0f0      	beq.n	8008238 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008256:	4b37      	ldr	r3, [pc, #220]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a36      	ldr	r2, [pc, #216]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 800825c:	f043 0308 	orr.w	r3, r3, #8
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	4b34      	ldr	r3, [pc, #208]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	4931      	ldr	r1, [pc, #196]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008270:	4313      	orrs	r3, r2
 8008272:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008274:	4b2f      	ldr	r3, [pc, #188]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	021b      	lsls	r3, r3, #8
 8008282:	492c      	ldr	r1, [pc, #176]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008284:	4313      	orrs	r3, r2
 8008286:	604b      	str	r3, [r1, #4]
 8008288:	e01a      	b.n	80082c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800828a:	4b2a      	ldr	r3, [pc, #168]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a29      	ldr	r2, [pc, #164]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008290:	f023 0301 	bic.w	r3, r3, #1
 8008294:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008296:	f7fe f815 	bl	80062c4 <HAL_GetTick>
 800829a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800829c:	e008      	b.n	80082b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800829e:	f7fe f811 	bl	80062c4 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d901      	bls.n	80082b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e2dd      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80082b0:	4b20      	ldr	r3, [pc, #128]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1f0      	bne.n	800829e <HAL_RCC_OscConfig+0x1da>
 80082bc:	e000      	b.n	80082c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80082be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d074      	beq.n	80083b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	d005      	beq.n	80082de <HAL_RCC_OscConfig+0x21a>
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	2b0c      	cmp	r3, #12
 80082d6:	d10e      	bne.n	80082f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d10b      	bne.n	80082f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082de:	4b15      	ldr	r3, [pc, #84]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d064      	beq.n	80083b4 <HAL_RCC_OscConfig+0x2f0>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d160      	bne.n	80083b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e2ba      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082fe:	d106      	bne.n	800830e <HAL_RCC_OscConfig+0x24a>
 8008300:	4b0c      	ldr	r3, [pc, #48]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a0b      	ldr	r2, [pc, #44]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	e026      	b.n	800835c <HAL_RCC_OscConfig+0x298>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008316:	d115      	bne.n	8008344 <HAL_RCC_OscConfig+0x280>
 8008318:	4b06      	ldr	r3, [pc, #24]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a05      	ldr	r2, [pc, #20]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 800831e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008322:	6013      	str	r3, [r2, #0]
 8008324:	4b03      	ldr	r3, [pc, #12]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a02      	ldr	r2, [pc, #8]	; (8008334 <HAL_RCC_OscConfig+0x270>)
 800832a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	e014      	b.n	800835c <HAL_RCC_OscConfig+0x298>
 8008332:	bf00      	nop
 8008334:	40021000 	.word	0x40021000
 8008338:	08010c18 	.word	0x08010c18
 800833c:	2000000c 	.word	0x2000000c
 8008340:	20000010 	.word	0x20000010
 8008344:	4ba0      	ldr	r3, [pc, #640]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a9f      	ldr	r2, [pc, #636]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 800834a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800834e:	6013      	str	r3, [r2, #0]
 8008350:	4b9d      	ldr	r3, [pc, #628]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a9c      	ldr	r2, [pc, #624]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 8008356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800835a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d013      	beq.n	800838c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008364:	f7fd ffae 	bl	80062c4 <HAL_GetTick>
 8008368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800836a:	e008      	b.n	800837e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800836c:	f7fd ffaa 	bl	80062c4 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b64      	cmp	r3, #100	; 0x64
 8008378:	d901      	bls.n	800837e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e276      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800837e:	4b92      	ldr	r3, [pc, #584]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0f0      	beq.n	800836c <HAL_RCC_OscConfig+0x2a8>
 800838a:	e014      	b.n	80083b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800838c:	f7fd ff9a 	bl	80062c4 <HAL_GetTick>
 8008390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008392:	e008      	b.n	80083a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008394:	f7fd ff96 	bl	80062c4 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b64      	cmp	r3, #100	; 0x64
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e262      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083a6:	4b88      	ldr	r3, [pc, #544]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1f0      	bne.n	8008394 <HAL_RCC_OscConfig+0x2d0>
 80083b2:	e000      	b.n	80083b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d060      	beq.n	8008484 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d005      	beq.n	80083d4 <HAL_RCC_OscConfig+0x310>
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b0c      	cmp	r3, #12
 80083cc:	d119      	bne.n	8008402 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d116      	bne.n	8008402 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083d4:	4b7c      	ldr	r3, [pc, #496]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d005      	beq.n	80083ec <HAL_RCC_OscConfig+0x328>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e23f      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083ec:	4b76      	ldr	r3, [pc, #472]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	061b      	lsls	r3, r3, #24
 80083fa:	4973      	ldr	r1, [pc, #460]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008400:	e040      	b.n	8008484 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d023      	beq.n	8008452 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800840a:	4b6f      	ldr	r3, [pc, #444]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a6e      	ldr	r2, [pc, #440]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 8008410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008416:	f7fd ff55 	bl	80062c4 <HAL_GetTick>
 800841a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800841c:	e008      	b.n	8008430 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800841e:	f7fd ff51 	bl	80062c4 <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d901      	bls.n	8008430 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e21d      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008430:	4b65      	ldr	r3, [pc, #404]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0f0      	beq.n	800841e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800843c:	4b62      	ldr	r3, [pc, #392]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	061b      	lsls	r3, r3, #24
 800844a:	495f      	ldr	r1, [pc, #380]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 800844c:	4313      	orrs	r3, r2
 800844e:	604b      	str	r3, [r1, #4]
 8008450:	e018      	b.n	8008484 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008452:	4b5d      	ldr	r3, [pc, #372]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a5c      	ldr	r2, [pc, #368]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 8008458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800845c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800845e:	f7fd ff31 	bl	80062c4 <HAL_GetTick>
 8008462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008464:	e008      	b.n	8008478 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008466:	f7fd ff2d 	bl	80062c4 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d901      	bls.n	8008478 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e1f9      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008478:	4b53      	ldr	r3, [pc, #332]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1f0      	bne.n	8008466 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0308 	and.w	r3, r3, #8
 800848c:	2b00      	cmp	r3, #0
 800848e:	d03c      	beq.n	800850a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01c      	beq.n	80084d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008498:	4b4b      	ldr	r3, [pc, #300]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 800849a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800849e:	4a4a      	ldr	r2, [pc, #296]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 80084a0:	f043 0301 	orr.w	r3, r3, #1
 80084a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a8:	f7fd ff0c 	bl	80062c4 <HAL_GetTick>
 80084ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084ae:	e008      	b.n	80084c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084b0:	f7fd ff08 	bl	80062c4 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e1d4      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084c2:	4b41      	ldr	r3, [pc, #260]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 80084c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0ef      	beq.n	80084b0 <HAL_RCC_OscConfig+0x3ec>
 80084d0:	e01b      	b.n	800850a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084d2:	4b3d      	ldr	r3, [pc, #244]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 80084d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084d8:	4a3b      	ldr	r2, [pc, #236]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 80084da:	f023 0301 	bic.w	r3, r3, #1
 80084de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084e2:	f7fd feef 	bl	80062c4 <HAL_GetTick>
 80084e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084e8:	e008      	b.n	80084fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084ea:	f7fd feeb 	bl	80062c4 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d901      	bls.n	80084fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e1b7      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084fc:	4b32      	ldr	r3, [pc, #200]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 80084fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1ef      	bne.n	80084ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0304 	and.w	r3, r3, #4
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 80a6 	beq.w	8008664 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008518:	2300      	movs	r3, #0
 800851a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800851c:	4b2a      	ldr	r3, [pc, #168]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 800851e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10d      	bne.n	8008544 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008528:	4b27      	ldr	r3, [pc, #156]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 800852a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852c:	4a26      	ldr	r2, [pc, #152]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 800852e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008532:	6593      	str	r3, [r2, #88]	; 0x58
 8008534:	4b24      	ldr	r3, [pc, #144]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 8008536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800853c:	60bb      	str	r3, [r7, #8]
 800853e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008540:	2301      	movs	r3, #1
 8008542:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008544:	4b21      	ldr	r3, [pc, #132]	; (80085cc <HAL_RCC_OscConfig+0x508>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854c:	2b00      	cmp	r3, #0
 800854e:	d118      	bne.n	8008582 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008550:	4b1e      	ldr	r3, [pc, #120]	; (80085cc <HAL_RCC_OscConfig+0x508>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a1d      	ldr	r2, [pc, #116]	; (80085cc <HAL_RCC_OscConfig+0x508>)
 8008556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800855a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800855c:	f7fd feb2 	bl	80062c4 <HAL_GetTick>
 8008560:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008562:	e008      	b.n	8008576 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008564:	f7fd feae 	bl	80062c4 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	2b02      	cmp	r3, #2
 8008570:	d901      	bls.n	8008576 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e17a      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008576:	4b15      	ldr	r3, [pc, #84]	; (80085cc <HAL_RCC_OscConfig+0x508>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0f0      	beq.n	8008564 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d108      	bne.n	800859c <HAL_RCC_OscConfig+0x4d8>
 800858a:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 800858c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008590:	4a0d      	ldr	r2, [pc, #52]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 8008592:	f043 0301 	orr.w	r3, r3, #1
 8008596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800859a:	e029      	b.n	80085f0 <HAL_RCC_OscConfig+0x52c>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	2b05      	cmp	r3, #5
 80085a2:	d115      	bne.n	80085d0 <HAL_RCC_OscConfig+0x50c>
 80085a4:	4b08      	ldr	r3, [pc, #32]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 80085a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085aa:	4a07      	ldr	r2, [pc, #28]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 80085ac:	f043 0304 	orr.w	r3, r3, #4
 80085b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085b4:	4b04      	ldr	r3, [pc, #16]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 80085b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ba:	4a03      	ldr	r2, [pc, #12]	; (80085c8 <HAL_RCC_OscConfig+0x504>)
 80085bc:	f043 0301 	orr.w	r3, r3, #1
 80085c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085c4:	e014      	b.n	80085f0 <HAL_RCC_OscConfig+0x52c>
 80085c6:	bf00      	nop
 80085c8:	40021000 	.word	0x40021000
 80085cc:	40007000 	.word	0x40007000
 80085d0:	4b9c      	ldr	r3, [pc, #624]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 80085d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d6:	4a9b      	ldr	r2, [pc, #620]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 80085d8:	f023 0301 	bic.w	r3, r3, #1
 80085dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085e0:	4b98      	ldr	r3, [pc, #608]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 80085e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e6:	4a97      	ldr	r2, [pc, #604]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 80085e8:	f023 0304 	bic.w	r3, r3, #4
 80085ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d016      	beq.n	8008626 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085f8:	f7fd fe64 	bl	80062c4 <HAL_GetTick>
 80085fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085fe:	e00a      	b.n	8008616 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008600:	f7fd fe60 	bl	80062c4 <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	f241 3288 	movw	r2, #5000	; 0x1388
 800860e:	4293      	cmp	r3, r2
 8008610:	d901      	bls.n	8008616 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e12a      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008616:	4b8b      	ldr	r3, [pc, #556]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 8008618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d0ed      	beq.n	8008600 <HAL_RCC_OscConfig+0x53c>
 8008624:	e015      	b.n	8008652 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008626:	f7fd fe4d 	bl	80062c4 <HAL_GetTick>
 800862a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800862c:	e00a      	b.n	8008644 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800862e:	f7fd fe49 	bl	80062c4 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	f241 3288 	movw	r2, #5000	; 0x1388
 800863c:	4293      	cmp	r3, r2
 800863e:	d901      	bls.n	8008644 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	e113      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008644:	4b7f      	ldr	r3, [pc, #508]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 8008646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1ed      	bne.n	800862e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008652:	7ffb      	ldrb	r3, [r7, #31]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d105      	bne.n	8008664 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008658:	4b7a      	ldr	r3, [pc, #488]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 800865a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800865c:	4a79      	ldr	r2, [pc, #484]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 800865e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008662:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 80fe 	beq.w	800886a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008672:	2b02      	cmp	r3, #2
 8008674:	f040 80d0 	bne.w	8008818 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008678:	4b72      	ldr	r3, [pc, #456]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f003 0203 	and.w	r2, r3, #3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008688:	429a      	cmp	r2, r3
 800868a:	d130      	bne.n	80086ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	3b01      	subs	r3, #1
 8008698:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800869a:	429a      	cmp	r2, r3
 800869c:	d127      	bne.n	80086ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d11f      	bne.n	80086ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80086b8:	2a07      	cmp	r2, #7
 80086ba:	bf14      	ite	ne
 80086bc:	2201      	movne	r2, #1
 80086be:	2200      	moveq	r2, #0
 80086c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d113      	bne.n	80086ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d0:	085b      	lsrs	r3, r3, #1
 80086d2:	3b01      	subs	r3, #1
 80086d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d109      	bne.n	80086ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e4:	085b      	lsrs	r3, r3, #1
 80086e6:	3b01      	subs	r3, #1
 80086e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d06e      	beq.n	80087cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	2b0c      	cmp	r3, #12
 80086f2:	d069      	beq.n	80087c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80086f4:	4b53      	ldr	r3, [pc, #332]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d105      	bne.n	800870c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008700:	4b50      	ldr	r3, [pc, #320]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e0ad      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008710:	4b4c      	ldr	r3, [pc, #304]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a4b      	ldr	r2, [pc, #300]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 8008716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800871a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800871c:	f7fd fdd2 	bl	80062c4 <HAL_GetTick>
 8008720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008722:	e008      	b.n	8008736 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008724:	f7fd fdce 	bl	80062c4 <HAL_GetTick>
 8008728:	4602      	mov	r2, r0
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b02      	cmp	r3, #2
 8008730:	d901      	bls.n	8008736 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e09a      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008736:	4b43      	ldr	r3, [pc, #268]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1f0      	bne.n	8008724 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008742:	4b40      	ldr	r3, [pc, #256]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	4b40      	ldr	r3, [pc, #256]	; (8008848 <HAL_RCC_OscConfig+0x784>)
 8008748:	4013      	ands	r3, r2
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008752:	3a01      	subs	r2, #1
 8008754:	0112      	lsls	r2, r2, #4
 8008756:	4311      	orrs	r1, r2
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800875c:	0212      	lsls	r2, r2, #8
 800875e:	4311      	orrs	r1, r2
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008764:	0852      	lsrs	r2, r2, #1
 8008766:	3a01      	subs	r2, #1
 8008768:	0552      	lsls	r2, r2, #21
 800876a:	4311      	orrs	r1, r2
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008770:	0852      	lsrs	r2, r2, #1
 8008772:	3a01      	subs	r2, #1
 8008774:	0652      	lsls	r2, r2, #25
 8008776:	4311      	orrs	r1, r2
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800877c:	0912      	lsrs	r2, r2, #4
 800877e:	0452      	lsls	r2, r2, #17
 8008780:	430a      	orrs	r2, r1
 8008782:	4930      	ldr	r1, [pc, #192]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 8008784:	4313      	orrs	r3, r2
 8008786:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008788:	4b2e      	ldr	r3, [pc, #184]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a2d      	ldr	r2, [pc, #180]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 800878e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008792:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008794:	4b2b      	ldr	r3, [pc, #172]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	4a2a      	ldr	r2, [pc, #168]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 800879a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800879e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80087a0:	f7fd fd90 	bl	80062c4 <HAL_GetTick>
 80087a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087a6:	e008      	b.n	80087ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087a8:	f7fd fd8c 	bl	80062c4 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e058      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087ba:	4b22      	ldr	r3, [pc, #136]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0f0      	beq.n	80087a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80087c6:	e050      	b.n	800886a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e04f      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087cc:	4b1d      	ldr	r3, [pc, #116]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d148      	bne.n	800886a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80087d8:	4b1a      	ldr	r3, [pc, #104]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a19      	ldr	r2, [pc, #100]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 80087de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80087e4:	4b17      	ldr	r3, [pc, #92]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	4a16      	ldr	r2, [pc, #88]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 80087ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80087f0:	f7fd fd68 	bl	80062c4 <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087f8:	f7fd fd64 	bl	80062c4 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e030      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800880a:	4b0e      	ldr	r3, [pc, #56]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f0      	beq.n	80087f8 <HAL_RCC_OscConfig+0x734>
 8008816:	e028      	b.n	800886a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	2b0c      	cmp	r3, #12
 800881c:	d023      	beq.n	8008866 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800881e:	4b09      	ldr	r3, [pc, #36]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a08      	ldr	r2, [pc, #32]	; (8008844 <HAL_RCC_OscConfig+0x780>)
 8008824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800882a:	f7fd fd4b 	bl	80062c4 <HAL_GetTick>
 800882e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008830:	e00c      	b.n	800884c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008832:	f7fd fd47 	bl	80062c4 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	2b02      	cmp	r3, #2
 800883e:	d905      	bls.n	800884c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e013      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
 8008844:	40021000 	.word	0x40021000
 8008848:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800884c:	4b09      	ldr	r3, [pc, #36]	; (8008874 <HAL_RCC_OscConfig+0x7b0>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1ec      	bne.n	8008832 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008858:	4b06      	ldr	r3, [pc, #24]	; (8008874 <HAL_RCC_OscConfig+0x7b0>)
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	4905      	ldr	r1, [pc, #20]	; (8008874 <HAL_RCC_OscConfig+0x7b0>)
 800885e:	4b06      	ldr	r3, [pc, #24]	; (8008878 <HAL_RCC_OscConfig+0x7b4>)
 8008860:	4013      	ands	r3, r2
 8008862:	60cb      	str	r3, [r1, #12]
 8008864:	e001      	b.n	800886a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e000      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3720      	adds	r7, #32
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	40021000 	.word	0x40021000
 8008878:	feeefffc 	.word	0xfeeefffc

0800887c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e0e7      	b.n	8008a60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008890:	4b75      	ldr	r3, [pc, #468]	; (8008a68 <HAL_RCC_ClockConfig+0x1ec>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	429a      	cmp	r2, r3
 800889c:	d910      	bls.n	80088c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800889e:	4b72      	ldr	r3, [pc, #456]	; (8008a68 <HAL_RCC_ClockConfig+0x1ec>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f023 0207 	bic.w	r2, r3, #7
 80088a6:	4970      	ldr	r1, [pc, #448]	; (8008a68 <HAL_RCC_ClockConfig+0x1ec>)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088ae:	4b6e      	ldr	r3, [pc, #440]	; (8008a68 <HAL_RCC_ClockConfig+0x1ec>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0307 	and.w	r3, r3, #7
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d001      	beq.n	80088c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e0cf      	b.n	8008a60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0302 	and.w	r3, r3, #2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d010      	beq.n	80088ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	4b66      	ldr	r3, [pc, #408]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088d8:	429a      	cmp	r2, r3
 80088da:	d908      	bls.n	80088ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088dc:	4b63      	ldr	r3, [pc, #396]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	4960      	ldr	r1, [pc, #384]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d04c      	beq.n	8008994 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d107      	bne.n	8008912 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008902:	4b5a      	ldr	r3, [pc, #360]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d121      	bne.n	8008952 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e0a6      	b.n	8008a60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	2b02      	cmp	r3, #2
 8008918:	d107      	bne.n	800892a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800891a:	4b54      	ldr	r3, [pc, #336]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d115      	bne.n	8008952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e09a      	b.n	8008a60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d107      	bne.n	8008942 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008932:	4b4e      	ldr	r3, [pc, #312]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d109      	bne.n	8008952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e08e      	b.n	8008a60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008942:	4b4a      	ldr	r3, [pc, #296]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e086      	b.n	8008a60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008952:	4b46      	ldr	r3, [pc, #280]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f023 0203 	bic.w	r2, r3, #3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	4943      	ldr	r1, [pc, #268]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 8008960:	4313      	orrs	r3, r2
 8008962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008964:	f7fd fcae 	bl	80062c4 <HAL_GetTick>
 8008968:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800896a:	e00a      	b.n	8008982 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800896c:	f7fd fcaa 	bl	80062c4 <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	f241 3288 	movw	r2, #5000	; 0x1388
 800897a:	4293      	cmp	r3, r2
 800897c:	d901      	bls.n	8008982 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e06e      	b.n	8008a60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008982:	4b3a      	ldr	r3, [pc, #232]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f003 020c 	and.w	r2, r3, #12
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	429a      	cmp	r2, r3
 8008992:	d1eb      	bne.n	800896c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d010      	beq.n	80089c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	689a      	ldr	r2, [r3, #8]
 80089a4:	4b31      	ldr	r3, [pc, #196]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d208      	bcs.n	80089c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089b0:	4b2e      	ldr	r3, [pc, #184]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	492b      	ldr	r1, [pc, #172]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089c2:	4b29      	ldr	r3, [pc, #164]	; (8008a68 <HAL_RCC_ClockConfig+0x1ec>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0307 	and.w	r3, r3, #7
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d210      	bcs.n	80089f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089d0:	4b25      	ldr	r3, [pc, #148]	; (8008a68 <HAL_RCC_ClockConfig+0x1ec>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f023 0207 	bic.w	r2, r3, #7
 80089d8:	4923      	ldr	r1, [pc, #140]	; (8008a68 <HAL_RCC_ClockConfig+0x1ec>)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	4313      	orrs	r3, r2
 80089de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089e0:	4b21      	ldr	r3, [pc, #132]	; (8008a68 <HAL_RCC_ClockConfig+0x1ec>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0307 	and.w	r3, r3, #7
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d001      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e036      	b.n	8008a60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d008      	beq.n	8008a10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089fe:	4b1b      	ldr	r3, [pc, #108]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	4918      	ldr	r1, [pc, #96]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d009      	beq.n	8008a30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a1c:	4b13      	ldr	r3, [pc, #76]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	00db      	lsls	r3, r3, #3
 8008a2a:	4910      	ldr	r1, [pc, #64]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008a30:	f000 f824 	bl	8008a7c <HAL_RCC_GetSysClockFreq>
 8008a34:	4602      	mov	r2, r0
 8008a36:	4b0d      	ldr	r3, [pc, #52]	; (8008a6c <HAL_RCC_ClockConfig+0x1f0>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	091b      	lsrs	r3, r3, #4
 8008a3c:	f003 030f 	and.w	r3, r3, #15
 8008a40:	490b      	ldr	r1, [pc, #44]	; (8008a70 <HAL_RCC_ClockConfig+0x1f4>)
 8008a42:	5ccb      	ldrb	r3, [r1, r3]
 8008a44:	f003 031f 	and.w	r3, r3, #31
 8008a48:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4c:	4a09      	ldr	r2, [pc, #36]	; (8008a74 <HAL_RCC_ClockConfig+0x1f8>)
 8008a4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008a50:	4b09      	ldr	r3, [pc, #36]	; (8008a78 <HAL_RCC_ClockConfig+0x1fc>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fd fbe5 	bl	8006224 <HAL_InitTick>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8008a5e:	7afb      	ldrb	r3, [r7, #11]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	40022000 	.word	0x40022000
 8008a6c:	40021000 	.word	0x40021000
 8008a70:	08010c18 	.word	0x08010c18
 8008a74:	2000000c 	.word	0x2000000c
 8008a78:	20000010 	.word	0x20000010

08008a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b089      	sub	sp, #36	; 0x24
 8008a80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	61fb      	str	r3, [r7, #28]
 8008a86:	2300      	movs	r3, #0
 8008a88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a8a:	4b3e      	ldr	r3, [pc, #248]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f003 030c 	and.w	r3, r3, #12
 8008a92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a94:	4b3b      	ldr	r3, [pc, #236]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	f003 0303 	and.w	r3, r3, #3
 8008a9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	2b0c      	cmp	r3, #12
 8008aa8:	d121      	bne.n	8008aee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d11e      	bne.n	8008aee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008ab0:	4b34      	ldr	r3, [pc, #208]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0308 	and.w	r3, r3, #8
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d107      	bne.n	8008acc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008abc:	4b31      	ldr	r3, [pc, #196]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8008abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ac2:	0a1b      	lsrs	r3, r3, #8
 8008ac4:	f003 030f 	and.w	r3, r3, #15
 8008ac8:	61fb      	str	r3, [r7, #28]
 8008aca:	e005      	b.n	8008ad8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008acc:	4b2d      	ldr	r3, [pc, #180]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	091b      	lsrs	r3, r3, #4
 8008ad2:	f003 030f 	and.w	r3, r3, #15
 8008ad6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ad8:	4a2b      	ldr	r2, [pc, #172]	; (8008b88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ae0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10d      	bne.n	8008b04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008aec:	e00a      	b.n	8008b04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d102      	bne.n	8008afa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008af4:	4b25      	ldr	r3, [pc, #148]	; (8008b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8008af6:	61bb      	str	r3, [r7, #24]
 8008af8:	e004      	b.n	8008b04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	2b08      	cmp	r3, #8
 8008afe:	d101      	bne.n	8008b04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b00:	4b23      	ldr	r3, [pc, #140]	; (8008b90 <HAL_RCC_GetSysClockFreq+0x114>)
 8008b02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	2b0c      	cmp	r3, #12
 8008b08:	d134      	bne.n	8008b74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008b0a:	4b1e      	ldr	r3, [pc, #120]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f003 0303 	and.w	r3, r3, #3
 8008b12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d003      	beq.n	8008b22 <HAL_RCC_GetSysClockFreq+0xa6>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d003      	beq.n	8008b28 <HAL_RCC_GetSysClockFreq+0xac>
 8008b20:	e005      	b.n	8008b2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008b22:	4b1a      	ldr	r3, [pc, #104]	; (8008b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8008b24:	617b      	str	r3, [r7, #20]
      break;
 8008b26:	e005      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008b28:	4b19      	ldr	r3, [pc, #100]	; (8008b90 <HAL_RCC_GetSysClockFreq+0x114>)
 8008b2a:	617b      	str	r3, [r7, #20]
      break;
 8008b2c:	e002      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	617b      	str	r3, [r7, #20]
      break;
 8008b32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b34:	4b13      	ldr	r3, [pc, #76]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	091b      	lsrs	r3, r3, #4
 8008b3a:	f003 0307 	and.w	r3, r3, #7
 8008b3e:	3301      	adds	r3, #1
 8008b40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008b42:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	0a1b      	lsrs	r3, r3, #8
 8008b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	fb03 f202 	mul.w	r2, r3, r2
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b5a:	4b0a      	ldr	r3, [pc, #40]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	0e5b      	lsrs	r3, r3, #25
 8008b60:	f003 0303 	and.w	r3, r3, #3
 8008b64:	3301      	adds	r3, #1
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008b74:	69bb      	ldr	r3, [r7, #24]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3724      	adds	r7, #36	; 0x24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	40021000 	.word	0x40021000
 8008b88:	08010c30 	.word	0x08010c30
 8008b8c:	00f42400 	.word	0x00f42400
 8008b90:	007a1200 	.word	0x007a1200

08008b94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b98:	4b03      	ldr	r3, [pc, #12]	; (8008ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	2000000c 	.word	0x2000000c

08008bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008bb0:	f7ff fff0 	bl	8008b94 <HAL_RCC_GetHCLKFreq>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	0a1b      	lsrs	r3, r3, #8
 8008bbc:	f003 0307 	and.w	r3, r3, #7
 8008bc0:	4904      	ldr	r1, [pc, #16]	; (8008bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008bc2:	5ccb      	ldrb	r3, [r1, r3]
 8008bc4:	f003 031f 	and.w	r3, r3, #31
 8008bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	40021000 	.word	0x40021000
 8008bd4:	08010c28 	.word	0x08010c28

08008bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008bdc:	f7ff ffda 	bl	8008b94 <HAL_RCC_GetHCLKFreq>
 8008be0:	4602      	mov	r2, r0
 8008be2:	4b06      	ldr	r3, [pc, #24]	; (8008bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	0adb      	lsrs	r3, r3, #11
 8008be8:	f003 0307 	and.w	r3, r3, #7
 8008bec:	4904      	ldr	r1, [pc, #16]	; (8008c00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008bee:	5ccb      	ldrb	r3, [r1, r3]
 8008bf0:	f003 031f 	and.w	r3, r3, #31
 8008bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	40021000 	.word	0x40021000
 8008c00:	08010c28 	.word	0x08010c28

08008c04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008c10:	4b2a      	ldr	r3, [pc, #168]	; (8008cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008c1c:	f7ff f922 	bl	8007e64 <HAL_PWREx_GetVoltageRange>
 8008c20:	6178      	str	r0, [r7, #20]
 8008c22:	e014      	b.n	8008c4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008c24:	4b25      	ldr	r3, [pc, #148]	; (8008cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c28:	4a24      	ldr	r2, [pc, #144]	; (8008cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8008c30:	4b22      	ldr	r3, [pc, #136]	; (8008cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c38:	60fb      	str	r3, [r7, #12]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008c3c:	f7ff f912 	bl	8007e64 <HAL_PWREx_GetVoltageRange>
 8008c40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008c42:	4b1e      	ldr	r3, [pc, #120]	; (8008cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c46:	4a1d      	ldr	r2, [pc, #116]	; (8008cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c54:	d10b      	bne.n	8008c6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b80      	cmp	r3, #128	; 0x80
 8008c5a:	d919      	bls.n	8008c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2ba0      	cmp	r3, #160	; 0xa0
 8008c60:	d902      	bls.n	8008c68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008c62:	2302      	movs	r3, #2
 8008c64:	613b      	str	r3, [r7, #16]
 8008c66:	e013      	b.n	8008c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008c68:	2301      	movs	r3, #1
 8008c6a:	613b      	str	r3, [r7, #16]
 8008c6c:	e010      	b.n	8008c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b80      	cmp	r3, #128	; 0x80
 8008c72:	d902      	bls.n	8008c7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008c74:	2303      	movs	r3, #3
 8008c76:	613b      	str	r3, [r7, #16]
 8008c78:	e00a      	b.n	8008c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b80      	cmp	r3, #128	; 0x80
 8008c7e:	d102      	bne.n	8008c86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008c80:	2302      	movs	r3, #2
 8008c82:	613b      	str	r3, [r7, #16]
 8008c84:	e004      	b.n	8008c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b70      	cmp	r3, #112	; 0x70
 8008c8a:	d101      	bne.n	8008c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008c90:	4b0b      	ldr	r3, [pc, #44]	; (8008cc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f023 0207 	bic.w	r2, r3, #7
 8008c98:	4909      	ldr	r1, [pc, #36]	; (8008cc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008ca0:	4b07      	ldr	r3, [pc, #28]	; (8008cc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0307 	and.w	r3, r3, #7
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d001      	beq.n	8008cb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e000      	b.n	8008cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3718      	adds	r7, #24
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	40021000 	.word	0x40021000
 8008cc0:	40022000 	.word	0x40022000

08008cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ccc:	2300      	movs	r3, #0
 8008cce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d041      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ce4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008ce8:	d02a      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008cea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008cee:	d824      	bhi.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008cf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cf4:	d008      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008cf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cfa:	d81e      	bhi.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00a      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d04:	d010      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d06:	e018      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008d08:	4b86      	ldr	r3, [pc, #536]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	4a85      	ldr	r2, [pc, #532]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d12:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008d14:	e015      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f000 facb 	bl	80092b8 <RCCEx_PLLSAI1_Config>
 8008d22:	4603      	mov	r3, r0
 8008d24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008d26:	e00c      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3320      	adds	r3, #32
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 fbb6 	bl	80094a0 <RCCEx_PLLSAI2_Config>
 8008d34:	4603      	mov	r3, r0
 8008d36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008d38:	e003      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	74fb      	strb	r3, [r7, #19]
      break;
 8008d3e:	e000      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d42:	7cfb      	ldrb	r3, [r7, #19]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10b      	bne.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d48:	4b76      	ldr	r3, [pc, #472]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d56:	4973      	ldr	r1, [pc, #460]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008d5e:	e001      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d60:	7cfb      	ldrb	r3, [r7, #19]
 8008d62:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d041      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d78:	d02a      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008d7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d7e:	d824      	bhi.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d84:	d008      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008d86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d8a:	d81e      	bhi.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00a      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d94:	d010      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008d96:	e018      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008d98:	4b62      	ldr	r3, [pc, #392]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	4a61      	ldr	r2, [pc, #388]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008da2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008da4:	e015      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3304      	adds	r3, #4
 8008daa:	2100      	movs	r1, #0
 8008dac:	4618      	mov	r0, r3
 8008dae:	f000 fa83 	bl	80092b8 <RCCEx_PLLSAI1_Config>
 8008db2:	4603      	mov	r3, r0
 8008db4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008db6:	e00c      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3320      	adds	r3, #32
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 fb6e 	bl	80094a0 <RCCEx_PLLSAI2_Config>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008dc8:	e003      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	74fb      	strb	r3, [r7, #19]
      break;
 8008dce:	e000      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dd2:	7cfb      	ldrb	r3, [r7, #19]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10b      	bne.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008dd8:	4b52      	ldr	r3, [pc, #328]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008de6:	494f      	ldr	r1, [pc, #316]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008de8:	4313      	orrs	r3, r2
 8008dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008dee:	e001      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008df0:	7cfb      	ldrb	r3, [r7, #19]
 8008df2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 80a0 	beq.w	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e02:	2300      	movs	r3, #0
 8008e04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008e06:	4b47      	ldr	r3, [pc, #284]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008e12:	2301      	movs	r3, #1
 8008e14:	e000      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008e16:	2300      	movs	r3, #0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00d      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e1c:	4b41      	ldr	r3, [pc, #260]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e20:	4a40      	ldr	r2, [pc, #256]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e26:	6593      	str	r3, [r2, #88]	; 0x58
 8008e28:	4b3e      	ldr	r3, [pc, #248]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e30:	60bb      	str	r3, [r7, #8]
 8008e32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e34:	2301      	movs	r3, #1
 8008e36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e38:	4b3b      	ldr	r3, [pc, #236]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a3a      	ldr	r2, [pc, #232]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e44:	f7fd fa3e 	bl	80062c4 <HAL_GetTick>
 8008e48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008e4a:	e009      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e4c:	f7fd fa3a 	bl	80062c4 <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d902      	bls.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	74fb      	strb	r3, [r7, #19]
        break;
 8008e5e:	e005      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008e60:	4b31      	ldr	r3, [pc, #196]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d0ef      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008e6c:	7cfb      	ldrb	r3, [r7, #19]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d15c      	bne.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008e72:	4b2c      	ldr	r3, [pc, #176]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d01f      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d019      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008e90:	4b24      	ldr	r3, [pc, #144]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e9c:	4b21      	ldr	r3, [pc, #132]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea2:	4a20      	ldr	r2, [pc, #128]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008eac:	4b1d      	ldr	r3, [pc, #116]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eb2:	4a1c      	ldr	r2, [pc, #112]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008ebc:	4a19      	ldr	r2, [pc, #100]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d016      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ece:	f7fd f9f9 	bl	80062c4 <HAL_GetTick>
 8008ed2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ed4:	e00b      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ed6:	f7fd f9f5 	bl	80062c4 <HAL_GetTick>
 8008eda:	4602      	mov	r2, r0
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d902      	bls.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	74fb      	strb	r3, [r7, #19]
            break;
 8008eec:	e006      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008eee:	4b0d      	ldr	r3, [pc, #52]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ef4:	f003 0302 	and.w	r3, r3, #2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0ec      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008efc:	7cfb      	ldrb	r3, [r7, #19]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10c      	bne.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f02:	4b08      	ldr	r3, [pc, #32]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f12:	4904      	ldr	r1, [pc, #16]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008f1a:	e009      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f1c:	7cfb      	ldrb	r3, [r7, #19]
 8008f1e:	74bb      	strb	r3, [r7, #18]
 8008f20:	e006      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008f22:	bf00      	nop
 8008f24:	40021000 	.word	0x40021000
 8008f28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f2c:	7cfb      	ldrb	r3, [r7, #19]
 8008f2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f30:	7c7b      	ldrb	r3, [r7, #17]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d105      	bne.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f36:	4b9e      	ldr	r3, [pc, #632]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3a:	4a9d      	ldr	r2, [pc, #628]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00a      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f4e:	4b98      	ldr	r3, [pc, #608]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f54:	f023 0203 	bic.w	r2, r3, #3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5c:	4994      	ldr	r1, [pc, #592]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00a      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f70:	4b8f      	ldr	r3, [pc, #572]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f76:	f023 020c 	bic.w	r2, r3, #12
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f7e:	498c      	ldr	r1, [pc, #560]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f80:	4313      	orrs	r3, r2
 8008f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0304 	and.w	r3, r3, #4
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00a      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f92:	4b87      	ldr	r3, [pc, #540]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa0:	4983      	ldr	r1, [pc, #524]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0308 	and.w	r3, r3, #8
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00a      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008fb4:	4b7e      	ldr	r3, [pc, #504]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fc2:	497b      	ldr	r1, [pc, #492]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 0310 	and.w	r3, r3, #16
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00a      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008fd6:	4b76      	ldr	r3, [pc, #472]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fe4:	4972      	ldr	r1, [pc, #456]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0320 	and.w	r3, r3, #32
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00a      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ff8:	4b6d      	ldr	r3, [pc, #436]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ffe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009006:	496a      	ldr	r1, [pc, #424]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009008:	4313      	orrs	r3, r2
 800900a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00a      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800901a:	4b65      	ldr	r3, [pc, #404]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800901c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009020:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009028:	4961      	ldr	r1, [pc, #388]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800902a:	4313      	orrs	r3, r2
 800902c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00a      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800903c:	4b5c      	ldr	r3, [pc, #368]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800903e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009042:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800904a:	4959      	ldr	r1, [pc, #356]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800904c:	4313      	orrs	r3, r2
 800904e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00a      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800905e:	4b54      	ldr	r3, [pc, #336]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009064:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800906c:	4950      	ldr	r1, [pc, #320]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800906e:	4313      	orrs	r3, r2
 8009070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00a      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009080:	4b4b      	ldr	r3, [pc, #300]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009086:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800908e:	4948      	ldr	r1, [pc, #288]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009090:	4313      	orrs	r3, r2
 8009092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00a      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80090a2:	4b43      	ldr	r3, [pc, #268]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b0:	493f      	ldr	r1, [pc, #252]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d028      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090c4:	4b3a      	ldr	r3, [pc, #232]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090d2:	4937      	ldr	r1, [pc, #220]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090d4:	4313      	orrs	r3, r2
 80090d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090e2:	d106      	bne.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090e4:	4b32      	ldr	r3, [pc, #200]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	4a31      	ldr	r2, [pc, #196]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090ee:	60d3      	str	r3, [r2, #12]
 80090f0:	e011      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090fa:	d10c      	bne.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	3304      	adds	r3, #4
 8009100:	2101      	movs	r1, #1
 8009102:	4618      	mov	r0, r3
 8009104:	f000 f8d8 	bl	80092b8 <RCCEx_PLLSAI1_Config>
 8009108:	4603      	mov	r3, r0
 800910a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800910c:	7cfb      	ldrb	r3, [r7, #19]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8009112:	7cfb      	ldrb	r3, [r7, #19]
 8009114:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d028      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009122:	4b23      	ldr	r3, [pc, #140]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009128:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009130:	491f      	ldr	r1, [pc, #124]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009132:	4313      	orrs	r3, r2
 8009134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009140:	d106      	bne.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009142:	4b1b      	ldr	r3, [pc, #108]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	4a1a      	ldr	r2, [pc, #104]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800914c:	60d3      	str	r3, [r2, #12]
 800914e:	e011      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009158:	d10c      	bne.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3304      	adds	r3, #4
 800915e:	2101      	movs	r1, #1
 8009160:	4618      	mov	r0, r3
 8009162:	f000 f8a9 	bl	80092b8 <RCCEx_PLLSAI1_Config>
 8009166:	4603      	mov	r3, r0
 8009168:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800916a:	7cfb      	ldrb	r3, [r7, #19]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009170:	7cfb      	ldrb	r3, [r7, #19]
 8009172:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d02b      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009180:	4b0b      	ldr	r3, [pc, #44]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009186:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800918e:	4908      	ldr	r1, [pc, #32]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009190:	4313      	orrs	r3, r2
 8009192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800919a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800919e:	d109      	bne.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80091a0:	4b03      	ldr	r3, [pc, #12]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	4a02      	ldr	r2, [pc, #8]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091aa:	60d3      	str	r3, [r2, #12]
 80091ac:	e014      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80091ae:	bf00      	nop
 80091b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091bc:	d10c      	bne.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	3304      	adds	r3, #4
 80091c2:	2101      	movs	r1, #1
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 f877 	bl	80092b8 <RCCEx_PLLSAI1_Config>
 80091ca:	4603      	mov	r3, r0
 80091cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80091ce:	7cfb      	ldrb	r3, [r7, #19]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80091d4:	7cfb      	ldrb	r3, [r7, #19]
 80091d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d02f      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80091e4:	4b2b      	ldr	r3, [pc, #172]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80091e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091f2:	4928      	ldr	r1, [pc, #160]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009202:	d10d      	bne.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3304      	adds	r3, #4
 8009208:	2102      	movs	r1, #2
 800920a:	4618      	mov	r0, r3
 800920c:	f000 f854 	bl	80092b8 <RCCEx_PLLSAI1_Config>
 8009210:	4603      	mov	r3, r0
 8009212:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009214:	7cfb      	ldrb	r3, [r7, #19]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d014      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800921a:	7cfb      	ldrb	r3, [r7, #19]
 800921c:	74bb      	strb	r3, [r7, #18]
 800921e:	e011      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009228:	d10c      	bne.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	3320      	adds	r3, #32
 800922e:	2102      	movs	r1, #2
 8009230:	4618      	mov	r0, r3
 8009232:	f000 f935 	bl	80094a0 <RCCEx_PLLSAI2_Config>
 8009236:	4603      	mov	r3, r0
 8009238:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800923a:	7cfb      	ldrb	r3, [r7, #19]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009240:	7cfb      	ldrb	r3, [r7, #19]
 8009242:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00a      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009250:	4b10      	ldr	r3, [pc, #64]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009256:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800925e:	490d      	ldr	r1, [pc, #52]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009260:	4313      	orrs	r3, r2
 8009262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00b      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009272:	4b08      	ldr	r3, [pc, #32]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009278:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009282:	4904      	ldr	r1, [pc, #16]	; (8009294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009284:	4313      	orrs	r3, r2
 8009286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800928a:	7cbb      	ldrb	r3, [r7, #18]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3718      	adds	r7, #24
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	40021000 	.word	0x40021000

08009298 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009298:	b480      	push	{r7}
 800929a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800929c:	4b05      	ldr	r3, [pc, #20]	; (80092b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a04      	ldr	r2, [pc, #16]	; (80092b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80092a2:	f043 0304 	orr.w	r3, r3, #4
 80092a6:	6013      	str	r3, [r2, #0]
}
 80092a8:	bf00      	nop
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	40021000 	.word	0x40021000

080092b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80092c6:	4b75      	ldr	r3, [pc, #468]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f003 0303 	and.w	r3, r3, #3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d018      	beq.n	8009304 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80092d2:	4b72      	ldr	r3, [pc, #456]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	f003 0203 	and.w	r2, r3, #3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d10d      	bne.n	80092fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
       ||
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d009      	beq.n	80092fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80092ea:	4b6c      	ldr	r3, [pc, #432]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	091b      	lsrs	r3, r3, #4
 80092f0:	f003 0307 	and.w	r3, r3, #7
 80092f4:	1c5a      	adds	r2, r3, #1
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
       ||
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d047      	beq.n	800938e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	73fb      	strb	r3, [r7, #15]
 8009302:	e044      	b.n	800938e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b03      	cmp	r3, #3
 800930a:	d018      	beq.n	800933e <RCCEx_PLLSAI1_Config+0x86>
 800930c:	2b03      	cmp	r3, #3
 800930e:	d825      	bhi.n	800935c <RCCEx_PLLSAI1_Config+0xa4>
 8009310:	2b01      	cmp	r3, #1
 8009312:	d002      	beq.n	800931a <RCCEx_PLLSAI1_Config+0x62>
 8009314:	2b02      	cmp	r3, #2
 8009316:	d009      	beq.n	800932c <RCCEx_PLLSAI1_Config+0x74>
 8009318:	e020      	b.n	800935c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800931a:	4b60      	ldr	r3, [pc, #384]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 0302 	and.w	r3, r3, #2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d11d      	bne.n	8009362 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800932a:	e01a      	b.n	8009362 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800932c:	4b5b      	ldr	r3, [pc, #364]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009334:	2b00      	cmp	r3, #0
 8009336:	d116      	bne.n	8009366 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800933c:	e013      	b.n	8009366 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800933e:	4b57      	ldr	r3, [pc, #348]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10f      	bne.n	800936a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800934a:	4b54      	ldr	r3, [pc, #336]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d109      	bne.n	800936a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800935a:	e006      	b.n	800936a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	73fb      	strb	r3, [r7, #15]
      break;
 8009360:	e004      	b.n	800936c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009362:	bf00      	nop
 8009364:	e002      	b.n	800936c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009366:	bf00      	nop
 8009368:	e000      	b.n	800936c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800936a:	bf00      	nop
    }

    if(status == HAL_OK)
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10d      	bne.n	800938e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009372:	4b4a      	ldr	r3, [pc, #296]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6819      	ldr	r1, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	3b01      	subs	r3, #1
 8009384:	011b      	lsls	r3, r3, #4
 8009386:	430b      	orrs	r3, r1
 8009388:	4944      	ldr	r1, [pc, #272]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800938a:	4313      	orrs	r3, r2
 800938c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d17d      	bne.n	8009490 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009394:	4b41      	ldr	r3, [pc, #260]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a40      	ldr	r2, [pc, #256]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800939a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800939e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093a0:	f7fc ff90 	bl	80062c4 <HAL_GetTick>
 80093a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80093a6:	e009      	b.n	80093bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80093a8:	f7fc ff8c 	bl	80062c4 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d902      	bls.n	80093bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	73fb      	strb	r3, [r7, #15]
        break;
 80093ba:	e005      	b.n	80093c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80093bc:	4b37      	ldr	r3, [pc, #220]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1ef      	bne.n	80093a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d160      	bne.n	8009490 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d111      	bne.n	80093f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80093d4:	4b31      	ldr	r3, [pc, #196]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80093dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	6892      	ldr	r2, [r2, #8]
 80093e4:	0211      	lsls	r1, r2, #8
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	68d2      	ldr	r2, [r2, #12]
 80093ea:	0912      	lsrs	r2, r2, #4
 80093ec:	0452      	lsls	r2, r2, #17
 80093ee:	430a      	orrs	r2, r1
 80093f0:	492a      	ldr	r1, [pc, #168]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093f2:	4313      	orrs	r3, r2
 80093f4:	610b      	str	r3, [r1, #16]
 80093f6:	e027      	b.n	8009448 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d112      	bne.n	8009424 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80093fe:	4b27      	ldr	r3, [pc, #156]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009406:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	6892      	ldr	r2, [r2, #8]
 800940e:	0211      	lsls	r1, r2, #8
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	6912      	ldr	r2, [r2, #16]
 8009414:	0852      	lsrs	r2, r2, #1
 8009416:	3a01      	subs	r2, #1
 8009418:	0552      	lsls	r2, r2, #21
 800941a:	430a      	orrs	r2, r1
 800941c:	491f      	ldr	r1, [pc, #124]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800941e:	4313      	orrs	r3, r2
 8009420:	610b      	str	r3, [r1, #16]
 8009422:	e011      	b.n	8009448 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009424:	4b1d      	ldr	r3, [pc, #116]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800942c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	6892      	ldr	r2, [r2, #8]
 8009434:	0211      	lsls	r1, r2, #8
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	6952      	ldr	r2, [r2, #20]
 800943a:	0852      	lsrs	r2, r2, #1
 800943c:	3a01      	subs	r2, #1
 800943e:	0652      	lsls	r2, r2, #25
 8009440:	430a      	orrs	r2, r1
 8009442:	4916      	ldr	r1, [pc, #88]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009444:	4313      	orrs	r3, r2
 8009446:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009448:	4b14      	ldr	r3, [pc, #80]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a13      	ldr	r2, [pc, #76]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800944e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009452:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009454:	f7fc ff36 	bl	80062c4 <HAL_GetTick>
 8009458:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800945a:	e009      	b.n	8009470 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800945c:	f7fc ff32 	bl	80062c4 <HAL_GetTick>
 8009460:	4602      	mov	r2, r0
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	2b02      	cmp	r3, #2
 8009468:	d902      	bls.n	8009470 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	73fb      	strb	r3, [r7, #15]
          break;
 800946e:	e005      	b.n	800947c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009470:	4b0a      	ldr	r3, [pc, #40]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d0ef      	beq.n	800945c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d106      	bne.n	8009490 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009482:	4b06      	ldr	r3, [pc, #24]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009484:	691a      	ldr	r2, [r3, #16]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	4904      	ldr	r1, [pc, #16]	; (800949c <RCCEx_PLLSAI1_Config+0x1e4>)
 800948c:	4313      	orrs	r3, r2
 800948e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009490:	7bfb      	ldrb	r3, [r7, #15]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	40021000 	.word	0x40021000

080094a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80094ae:	4b6a      	ldr	r3, [pc, #424]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f003 0303 	and.w	r3, r3, #3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d018      	beq.n	80094ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80094ba:	4b67      	ldr	r3, [pc, #412]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	f003 0203 	and.w	r2, r3, #3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d10d      	bne.n	80094e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
       ||
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d009      	beq.n	80094e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80094d2:	4b61      	ldr	r3, [pc, #388]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	091b      	lsrs	r3, r3, #4
 80094d8:	f003 0307 	and.w	r3, r3, #7
 80094dc:	1c5a      	adds	r2, r3, #1
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
       ||
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d047      	beq.n	8009576 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	73fb      	strb	r3, [r7, #15]
 80094ea:	e044      	b.n	8009576 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d018      	beq.n	8009526 <RCCEx_PLLSAI2_Config+0x86>
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d825      	bhi.n	8009544 <RCCEx_PLLSAI2_Config+0xa4>
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d002      	beq.n	8009502 <RCCEx_PLLSAI2_Config+0x62>
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d009      	beq.n	8009514 <RCCEx_PLLSAI2_Config+0x74>
 8009500:	e020      	b.n	8009544 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009502:	4b55      	ldr	r3, [pc, #340]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0302 	and.w	r3, r3, #2
 800950a:	2b00      	cmp	r3, #0
 800950c:	d11d      	bne.n	800954a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009512:	e01a      	b.n	800954a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009514:	4b50      	ldr	r3, [pc, #320]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800951c:	2b00      	cmp	r3, #0
 800951e:	d116      	bne.n	800954e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009524:	e013      	b.n	800954e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009526:	4b4c      	ldr	r3, [pc, #304]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10f      	bne.n	8009552 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009532:	4b49      	ldr	r3, [pc, #292]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d109      	bne.n	8009552 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009542:	e006      	b.n	8009552 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	73fb      	strb	r3, [r7, #15]
      break;
 8009548:	e004      	b.n	8009554 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800954a:	bf00      	nop
 800954c:	e002      	b.n	8009554 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800954e:	bf00      	nop
 8009550:	e000      	b.n	8009554 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009552:	bf00      	nop
    }

    if(status == HAL_OK)
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10d      	bne.n	8009576 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800955a:	4b3f      	ldr	r3, [pc, #252]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6819      	ldr	r1, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	3b01      	subs	r3, #1
 800956c:	011b      	lsls	r3, r3, #4
 800956e:	430b      	orrs	r3, r1
 8009570:	4939      	ldr	r1, [pc, #228]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009572:	4313      	orrs	r3, r2
 8009574:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d167      	bne.n	800964c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800957c:	4b36      	ldr	r3, [pc, #216]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a35      	ldr	r2, [pc, #212]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009588:	f7fc fe9c 	bl	80062c4 <HAL_GetTick>
 800958c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800958e:	e009      	b.n	80095a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009590:	f7fc fe98 	bl	80062c4 <HAL_GetTick>
 8009594:	4602      	mov	r2, r0
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	2b02      	cmp	r3, #2
 800959c:	d902      	bls.n	80095a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	73fb      	strb	r3, [r7, #15]
        break;
 80095a2:	e005      	b.n	80095b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80095a4:	4b2c      	ldr	r3, [pc, #176]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1ef      	bne.n	8009590 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d14a      	bne.n	800964c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d111      	bne.n	80095e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80095bc:	4b26      	ldr	r3, [pc, #152]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80095c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	6892      	ldr	r2, [r2, #8]
 80095cc:	0211      	lsls	r1, r2, #8
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	68d2      	ldr	r2, [r2, #12]
 80095d2:	0912      	lsrs	r2, r2, #4
 80095d4:	0452      	lsls	r2, r2, #17
 80095d6:	430a      	orrs	r2, r1
 80095d8:	491f      	ldr	r1, [pc, #124]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	614b      	str	r3, [r1, #20]
 80095de:	e011      	b.n	8009604 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80095e0:	4b1d      	ldr	r3, [pc, #116]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095e2:	695b      	ldr	r3, [r3, #20]
 80095e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80095e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	6892      	ldr	r2, [r2, #8]
 80095f0:	0211      	lsls	r1, r2, #8
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	6912      	ldr	r2, [r2, #16]
 80095f6:	0852      	lsrs	r2, r2, #1
 80095f8:	3a01      	subs	r2, #1
 80095fa:	0652      	lsls	r2, r2, #25
 80095fc:	430a      	orrs	r2, r1
 80095fe:	4916      	ldr	r1, [pc, #88]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009600:	4313      	orrs	r3, r2
 8009602:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009604:	4b14      	ldr	r3, [pc, #80]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a13      	ldr	r2, [pc, #76]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 800960a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800960e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009610:	f7fc fe58 	bl	80062c4 <HAL_GetTick>
 8009614:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009616:	e009      	b.n	800962c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009618:	f7fc fe54 	bl	80062c4 <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	2b02      	cmp	r3, #2
 8009624:	d902      	bls.n	800962c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	73fb      	strb	r3, [r7, #15]
          break;
 800962a:	e005      	b.n	8009638 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800962c:	4b0a      	ldr	r3, [pc, #40]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d0ef      	beq.n	8009618 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d106      	bne.n	800964c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800963e:	4b06      	ldr	r3, [pc, #24]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009640:	695a      	ldr	r2, [r3, #20]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	4904      	ldr	r1, [pc, #16]	; (8009658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009648:	4313      	orrs	r3, r2
 800964a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800964c:	7bfb      	ldrb	r3, [r7, #15]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	40021000 	.word	0x40021000

0800965c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e095      	b.n	800979a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009672:	2b00      	cmp	r3, #0
 8009674:	d108      	bne.n	8009688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800967e:	d009      	beq.n	8009694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	61da      	str	r2, [r3, #28]
 8009686:	e005      	b.n	8009694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d106      	bne.n	80096b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7f8 ff88 	bl	80025c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2202      	movs	r2, #2
 80096b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80096d4:	d902      	bls.n	80096dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	e002      	b.n	80096e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80096dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80096ea:	d007      	beq.n	80096fc <HAL_SPI_Init+0xa0>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80096f4:	d002      	beq.n	80096fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800970c:	431a      	orrs	r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	f003 0302 	and.w	r3, r3, #2
 8009716:	431a      	orrs	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	f003 0301 	and.w	r3, r3, #1
 8009720:	431a      	orrs	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800972a:	431a      	orrs	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009734:	431a      	orrs	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800973e:	ea42 0103 	orr.w	r1, r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009746:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	430a      	orrs	r2, r1
 8009750:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	0c1b      	lsrs	r3, r3, #16
 8009758:	f003 0204 	and.w	r2, r3, #4
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	f003 0310 	and.w	r3, r3, #16
 8009764:	431a      	orrs	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800976a:	f003 0308 	and.w	r3, r3, #8
 800976e:	431a      	orrs	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009778:	ea42 0103 	orr.w	r1, r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	430a      	orrs	r2, r1
 8009788:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e049      	b.n	8009848 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d106      	bne.n	80097ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f841 	bl	8009850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2202      	movs	r2, #2
 80097d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	3304      	adds	r3, #4
 80097de:	4619      	mov	r1, r3
 80097e0:	4610      	mov	r0, r2
 80097e2:	f000 f8cf 	bl	8009984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b01      	cmp	r3, #1
 8009876:	d001      	beq.n	800987c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e047      	b.n	800990c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2202      	movs	r2, #2
 8009880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a23      	ldr	r2, [pc, #140]	; (8009918 <HAL_TIM_Base_Start+0xb4>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d01d      	beq.n	80098ca <HAL_TIM_Base_Start+0x66>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009896:	d018      	beq.n	80098ca <HAL_TIM_Base_Start+0x66>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a1f      	ldr	r2, [pc, #124]	; (800991c <HAL_TIM_Base_Start+0xb8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d013      	beq.n	80098ca <HAL_TIM_Base_Start+0x66>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a1e      	ldr	r2, [pc, #120]	; (8009920 <HAL_TIM_Base_Start+0xbc>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d00e      	beq.n	80098ca <HAL_TIM_Base_Start+0x66>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a1c      	ldr	r2, [pc, #112]	; (8009924 <HAL_TIM_Base_Start+0xc0>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d009      	beq.n	80098ca <HAL_TIM_Base_Start+0x66>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a1b      	ldr	r2, [pc, #108]	; (8009928 <HAL_TIM_Base_Start+0xc4>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d004      	beq.n	80098ca <HAL_TIM_Base_Start+0x66>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a19      	ldr	r2, [pc, #100]	; (800992c <HAL_TIM_Base_Start+0xc8>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d115      	bne.n	80098f6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689a      	ldr	r2, [r3, #8]
 80098d0:	4b17      	ldr	r3, [pc, #92]	; (8009930 <HAL_TIM_Base_Start+0xcc>)
 80098d2:	4013      	ands	r3, r2
 80098d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2b06      	cmp	r3, #6
 80098da:	d015      	beq.n	8009908 <HAL_TIM_Base_Start+0xa4>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098e2:	d011      	beq.n	8009908 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0201 	orr.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f4:	e008      	b.n	8009908 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f042 0201 	orr.w	r2, r2, #1
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	e000      	b.n	800990a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009908:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	40012c00 	.word	0x40012c00
 800991c:	40000400 	.word	0x40000400
 8009920:	40000800 	.word	0x40000800
 8009924:	40000c00 	.word	0x40000c00
 8009928:	40013400 	.word	0x40013400
 800992c:	40014000 	.word	0x40014000
 8009930:	00010007 	.word	0x00010007

08009934 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6a1a      	ldr	r2, [r3, #32]
 8009942:	f241 1311 	movw	r3, #4369	; 0x1111
 8009946:	4013      	ands	r3, r2
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10f      	bne.n	800996c <HAL_TIM_Base_Stop+0x38>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6a1a      	ldr	r2, [r3, #32]
 8009952:	f240 4344 	movw	r3, #1092	; 0x444
 8009956:	4013      	ands	r3, r2
 8009958:	2b00      	cmp	r3, #0
 800995a:	d107      	bne.n	800996c <HAL_TIM_Base_Stop+0x38>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f022 0201 	bic.w	r2, r2, #1
 800996a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
	...

08009984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a40      	ldr	r2, [pc, #256]	; (8009a98 <TIM_Base_SetConfig+0x114>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d013      	beq.n	80099c4 <TIM_Base_SetConfig+0x40>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099a2:	d00f      	beq.n	80099c4 <TIM_Base_SetConfig+0x40>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a3d      	ldr	r2, [pc, #244]	; (8009a9c <TIM_Base_SetConfig+0x118>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d00b      	beq.n	80099c4 <TIM_Base_SetConfig+0x40>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a3c      	ldr	r2, [pc, #240]	; (8009aa0 <TIM_Base_SetConfig+0x11c>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d007      	beq.n	80099c4 <TIM_Base_SetConfig+0x40>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a3b      	ldr	r2, [pc, #236]	; (8009aa4 <TIM_Base_SetConfig+0x120>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d003      	beq.n	80099c4 <TIM_Base_SetConfig+0x40>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a3a      	ldr	r2, [pc, #232]	; (8009aa8 <TIM_Base_SetConfig+0x124>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d108      	bne.n	80099d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a2f      	ldr	r2, [pc, #188]	; (8009a98 <TIM_Base_SetConfig+0x114>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d01f      	beq.n	8009a1e <TIM_Base_SetConfig+0x9a>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e4:	d01b      	beq.n	8009a1e <TIM_Base_SetConfig+0x9a>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a2c      	ldr	r2, [pc, #176]	; (8009a9c <TIM_Base_SetConfig+0x118>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d017      	beq.n	8009a1e <TIM_Base_SetConfig+0x9a>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a2b      	ldr	r2, [pc, #172]	; (8009aa0 <TIM_Base_SetConfig+0x11c>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d013      	beq.n	8009a1e <TIM_Base_SetConfig+0x9a>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a2a      	ldr	r2, [pc, #168]	; (8009aa4 <TIM_Base_SetConfig+0x120>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d00f      	beq.n	8009a1e <TIM_Base_SetConfig+0x9a>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a29      	ldr	r2, [pc, #164]	; (8009aa8 <TIM_Base_SetConfig+0x124>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d00b      	beq.n	8009a1e <TIM_Base_SetConfig+0x9a>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a28      	ldr	r2, [pc, #160]	; (8009aac <TIM_Base_SetConfig+0x128>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d007      	beq.n	8009a1e <TIM_Base_SetConfig+0x9a>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a27      	ldr	r2, [pc, #156]	; (8009ab0 <TIM_Base_SetConfig+0x12c>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d003      	beq.n	8009a1e <TIM_Base_SetConfig+0x9a>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a26      	ldr	r2, [pc, #152]	; (8009ab4 <TIM_Base_SetConfig+0x130>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d108      	bne.n	8009a30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	689a      	ldr	r2, [r3, #8]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a10      	ldr	r2, [pc, #64]	; (8009a98 <TIM_Base_SetConfig+0x114>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d00f      	beq.n	8009a7c <TIM_Base_SetConfig+0xf8>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a12      	ldr	r2, [pc, #72]	; (8009aa8 <TIM_Base_SetConfig+0x124>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d00b      	beq.n	8009a7c <TIM_Base_SetConfig+0xf8>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a11      	ldr	r2, [pc, #68]	; (8009aac <TIM_Base_SetConfig+0x128>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d007      	beq.n	8009a7c <TIM_Base_SetConfig+0xf8>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a10      	ldr	r2, [pc, #64]	; (8009ab0 <TIM_Base_SetConfig+0x12c>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d003      	beq.n	8009a7c <TIM_Base_SetConfig+0xf8>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a0f      	ldr	r2, [pc, #60]	; (8009ab4 <TIM_Base_SetConfig+0x130>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d103      	bne.n	8009a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	691a      	ldr	r2, [r3, #16]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	615a      	str	r2, [r3, #20]
}
 8009a8a:	bf00      	nop
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	40012c00 	.word	0x40012c00
 8009a9c:	40000400 	.word	0x40000400
 8009aa0:	40000800 	.word	0x40000800
 8009aa4:	40000c00 	.word	0x40000c00
 8009aa8:	40013400 	.word	0x40013400
 8009aac:	40014000 	.word	0x40014000
 8009ab0:	40014400 	.word	0x40014400
 8009ab4:	40014800 	.word	0x40014800

08009ab8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e040      	b.n	8009b4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d106      	bne.n	8009ae0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7f8 fdb6 	bl	800264c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2224      	movs	r2, #36	; 0x24
 8009ae4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f022 0201 	bic.w	r2, r2, #1
 8009af4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f8c0 	bl	8009c7c <UART_SetConfig>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d101      	bne.n	8009b06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e022      	b.n	8009b4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d002      	beq.n	8009b14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fb6c 	bl	800a1ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	689a      	ldr	r2, [r3, #8]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f042 0201 	orr.w	r2, r2, #1
 8009b42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fbf3 	bl	800a330 <UART_CheckIdleState>
 8009b4a:	4603      	mov	r3, r0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b08a      	sub	sp, #40	; 0x28
 8009b58:	af02      	add	r7, sp, #8
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	603b      	str	r3, [r7, #0]
 8009b60:	4613      	mov	r3, r2
 8009b62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b68:	2b20      	cmp	r3, #32
 8009b6a:	f040 8082 	bne.w	8009c72 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d002      	beq.n	8009b7a <HAL_UART_Transmit+0x26>
 8009b74:	88fb      	ldrh	r3, [r7, #6]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e07a      	b.n	8009c74 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d101      	bne.n	8009b8c <HAL_UART_Transmit+0x38>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e073      	b.n	8009c74 <HAL_UART_Transmit+0x120>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2221      	movs	r2, #33	; 0x21
 8009ba0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ba2:	f7fc fb8f 	bl	80062c4 <HAL_GetTick>
 8009ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	88fa      	ldrh	r2, [r7, #6]
 8009bac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	88fa      	ldrh	r2, [r7, #6]
 8009bb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc0:	d108      	bne.n	8009bd4 <HAL_UART_Transmit+0x80>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d104      	bne.n	8009bd4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	61bb      	str	r3, [r7, #24]
 8009bd2:	e003      	b.n	8009bdc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009be4:	e02d      	b.n	8009c42 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2200      	movs	r2, #0
 8009bee:	2180      	movs	r1, #128	; 0x80
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 fbe6 	bl	800a3c2 <UART_WaitOnFlagUntilTimeout>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e039      	b.n	8009c74 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10b      	bne.n	8009c1e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	881a      	ldrh	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c12:	b292      	uxth	r2, r2
 8009c14:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	3302      	adds	r3, #2
 8009c1a:	61bb      	str	r3, [r7, #24]
 8009c1c:	e008      	b.n	8009c30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	781a      	ldrb	r2, [r3, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	b292      	uxth	r2, r2
 8009c28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1cb      	bne.n	8009be6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	2200      	movs	r2, #0
 8009c56:	2140      	movs	r1, #64	; 0x40
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 fbb2 	bl	800a3c2 <UART_WaitOnFlagUntilTimeout>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e005      	b.n	8009c74 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2220      	movs	r2, #32
 8009c6c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e000      	b.n	8009c74 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009c72:	2302      	movs	r3, #2
  }
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3720      	adds	r7, #32
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c80:	b08a      	sub	sp, #40	; 0x28
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	689a      	ldr	r2, [r3, #8]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	431a      	orrs	r2, r3
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	431a      	orrs	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	4ba4      	ldr	r3, [pc, #656]	; (8009f3c <UART_SetConfig+0x2c0>)
 8009cac:	4013      	ands	r3, r2
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	6812      	ldr	r2, [r2, #0]
 8009cb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cb4:	430b      	orrs	r3, r1
 8009cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	68da      	ldr	r2, [r3, #12]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	430a      	orrs	r2, r1
 8009ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	699b      	ldr	r3, [r3, #24]
 8009cd2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a99      	ldr	r2, [pc, #612]	; (8009f40 <UART_SetConfig+0x2c4>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d004      	beq.n	8009ce8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf8:	430a      	orrs	r2, r1
 8009cfa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a90      	ldr	r2, [pc, #576]	; (8009f44 <UART_SetConfig+0x2c8>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d126      	bne.n	8009d54 <UART_SetConfig+0xd8>
 8009d06:	4b90      	ldr	r3, [pc, #576]	; (8009f48 <UART_SetConfig+0x2cc>)
 8009d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d0c:	f003 0303 	and.w	r3, r3, #3
 8009d10:	2b03      	cmp	r3, #3
 8009d12:	d81b      	bhi.n	8009d4c <UART_SetConfig+0xd0>
 8009d14:	a201      	add	r2, pc, #4	; (adr r2, 8009d1c <UART_SetConfig+0xa0>)
 8009d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1a:	bf00      	nop
 8009d1c:	08009d2d 	.word	0x08009d2d
 8009d20:	08009d3d 	.word	0x08009d3d
 8009d24:	08009d35 	.word	0x08009d35
 8009d28:	08009d45 	.word	0x08009d45
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d32:	e116      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009d34:	2302      	movs	r3, #2
 8009d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d3a:	e112      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009d3c:	2304      	movs	r3, #4
 8009d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d42:	e10e      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009d44:	2308      	movs	r3, #8
 8009d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d4a:	e10a      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009d4c:	2310      	movs	r3, #16
 8009d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d52:	e106      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a7c      	ldr	r2, [pc, #496]	; (8009f4c <UART_SetConfig+0x2d0>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d138      	bne.n	8009dd0 <UART_SetConfig+0x154>
 8009d5e:	4b7a      	ldr	r3, [pc, #488]	; (8009f48 <UART_SetConfig+0x2cc>)
 8009d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d64:	f003 030c 	and.w	r3, r3, #12
 8009d68:	2b0c      	cmp	r3, #12
 8009d6a:	d82d      	bhi.n	8009dc8 <UART_SetConfig+0x14c>
 8009d6c:	a201      	add	r2, pc, #4	; (adr r2, 8009d74 <UART_SetConfig+0xf8>)
 8009d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d72:	bf00      	nop
 8009d74:	08009da9 	.word	0x08009da9
 8009d78:	08009dc9 	.word	0x08009dc9
 8009d7c:	08009dc9 	.word	0x08009dc9
 8009d80:	08009dc9 	.word	0x08009dc9
 8009d84:	08009db9 	.word	0x08009db9
 8009d88:	08009dc9 	.word	0x08009dc9
 8009d8c:	08009dc9 	.word	0x08009dc9
 8009d90:	08009dc9 	.word	0x08009dc9
 8009d94:	08009db1 	.word	0x08009db1
 8009d98:	08009dc9 	.word	0x08009dc9
 8009d9c:	08009dc9 	.word	0x08009dc9
 8009da0:	08009dc9 	.word	0x08009dc9
 8009da4:	08009dc1 	.word	0x08009dc1
 8009da8:	2300      	movs	r3, #0
 8009daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dae:	e0d8      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009db0:	2302      	movs	r3, #2
 8009db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009db6:	e0d4      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009db8:	2304      	movs	r3, #4
 8009dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dbe:	e0d0      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009dc0:	2308      	movs	r3, #8
 8009dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dc6:	e0cc      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009dc8:	2310      	movs	r3, #16
 8009dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dce:	e0c8      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a5e      	ldr	r2, [pc, #376]	; (8009f50 <UART_SetConfig+0x2d4>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d125      	bne.n	8009e26 <UART_SetConfig+0x1aa>
 8009dda:	4b5b      	ldr	r3, [pc, #364]	; (8009f48 <UART_SetConfig+0x2cc>)
 8009ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009de4:	2b30      	cmp	r3, #48	; 0x30
 8009de6:	d016      	beq.n	8009e16 <UART_SetConfig+0x19a>
 8009de8:	2b30      	cmp	r3, #48	; 0x30
 8009dea:	d818      	bhi.n	8009e1e <UART_SetConfig+0x1a2>
 8009dec:	2b20      	cmp	r3, #32
 8009dee:	d00a      	beq.n	8009e06 <UART_SetConfig+0x18a>
 8009df0:	2b20      	cmp	r3, #32
 8009df2:	d814      	bhi.n	8009e1e <UART_SetConfig+0x1a2>
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <UART_SetConfig+0x182>
 8009df8:	2b10      	cmp	r3, #16
 8009dfa:	d008      	beq.n	8009e0e <UART_SetConfig+0x192>
 8009dfc:	e00f      	b.n	8009e1e <UART_SetConfig+0x1a2>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e04:	e0ad      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009e06:	2302      	movs	r3, #2
 8009e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e0c:	e0a9      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009e0e:	2304      	movs	r3, #4
 8009e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e14:	e0a5      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009e16:	2308      	movs	r3, #8
 8009e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e1c:	e0a1      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009e1e:	2310      	movs	r3, #16
 8009e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e24:	e09d      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a4a      	ldr	r2, [pc, #296]	; (8009f54 <UART_SetConfig+0x2d8>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d125      	bne.n	8009e7c <UART_SetConfig+0x200>
 8009e30:	4b45      	ldr	r3, [pc, #276]	; (8009f48 <UART_SetConfig+0x2cc>)
 8009e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8009e3c:	d016      	beq.n	8009e6c <UART_SetConfig+0x1f0>
 8009e3e:	2bc0      	cmp	r3, #192	; 0xc0
 8009e40:	d818      	bhi.n	8009e74 <UART_SetConfig+0x1f8>
 8009e42:	2b80      	cmp	r3, #128	; 0x80
 8009e44:	d00a      	beq.n	8009e5c <UART_SetConfig+0x1e0>
 8009e46:	2b80      	cmp	r3, #128	; 0x80
 8009e48:	d814      	bhi.n	8009e74 <UART_SetConfig+0x1f8>
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d002      	beq.n	8009e54 <UART_SetConfig+0x1d8>
 8009e4e:	2b40      	cmp	r3, #64	; 0x40
 8009e50:	d008      	beq.n	8009e64 <UART_SetConfig+0x1e8>
 8009e52:	e00f      	b.n	8009e74 <UART_SetConfig+0x1f8>
 8009e54:	2300      	movs	r3, #0
 8009e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e5a:	e082      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e62:	e07e      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009e64:	2304      	movs	r3, #4
 8009e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e6a:	e07a      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009e6c:	2308      	movs	r3, #8
 8009e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e72:	e076      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009e74:	2310      	movs	r3, #16
 8009e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e7a:	e072      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a35      	ldr	r2, [pc, #212]	; (8009f58 <UART_SetConfig+0x2dc>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d12a      	bne.n	8009edc <UART_SetConfig+0x260>
 8009e86:	4b30      	ldr	r3, [pc, #192]	; (8009f48 <UART_SetConfig+0x2cc>)
 8009e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e94:	d01a      	beq.n	8009ecc <UART_SetConfig+0x250>
 8009e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e9a:	d81b      	bhi.n	8009ed4 <UART_SetConfig+0x258>
 8009e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ea0:	d00c      	beq.n	8009ebc <UART_SetConfig+0x240>
 8009ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ea6:	d815      	bhi.n	8009ed4 <UART_SetConfig+0x258>
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <UART_SetConfig+0x238>
 8009eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eb0:	d008      	beq.n	8009ec4 <UART_SetConfig+0x248>
 8009eb2:	e00f      	b.n	8009ed4 <UART_SetConfig+0x258>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009eba:	e052      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ec2:	e04e      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009ec4:	2304      	movs	r3, #4
 8009ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009eca:	e04a      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009ecc:	2308      	movs	r3, #8
 8009ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ed2:	e046      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009ed4:	2310      	movs	r3, #16
 8009ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009eda:	e042      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a17      	ldr	r2, [pc, #92]	; (8009f40 <UART_SetConfig+0x2c4>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d13a      	bne.n	8009f5c <UART_SetConfig+0x2e0>
 8009ee6:	4b18      	ldr	r3, [pc, #96]	; (8009f48 <UART_SetConfig+0x2cc>)
 8009ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009ef0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ef4:	d01a      	beq.n	8009f2c <UART_SetConfig+0x2b0>
 8009ef6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009efa:	d81b      	bhi.n	8009f34 <UART_SetConfig+0x2b8>
 8009efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f00:	d00c      	beq.n	8009f1c <UART_SetConfig+0x2a0>
 8009f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f06:	d815      	bhi.n	8009f34 <UART_SetConfig+0x2b8>
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <UART_SetConfig+0x298>
 8009f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f10:	d008      	beq.n	8009f24 <UART_SetConfig+0x2a8>
 8009f12:	e00f      	b.n	8009f34 <UART_SetConfig+0x2b8>
 8009f14:	2300      	movs	r3, #0
 8009f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f1a:	e022      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f22:	e01e      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009f24:	2304      	movs	r3, #4
 8009f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f2a:	e01a      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009f2c:	2308      	movs	r3, #8
 8009f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f32:	e016      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009f34:	2310      	movs	r3, #16
 8009f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f3a:	e012      	b.n	8009f62 <UART_SetConfig+0x2e6>
 8009f3c:	efff69f3 	.word	0xefff69f3
 8009f40:	40008000 	.word	0x40008000
 8009f44:	40013800 	.word	0x40013800
 8009f48:	40021000 	.word	0x40021000
 8009f4c:	40004400 	.word	0x40004400
 8009f50:	40004800 	.word	0x40004800
 8009f54:	40004c00 	.word	0x40004c00
 8009f58:	40005000 	.word	0x40005000
 8009f5c:	2310      	movs	r3, #16
 8009f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a9f      	ldr	r2, [pc, #636]	; (800a1e4 <UART_SetConfig+0x568>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d17a      	bne.n	800a062 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f70:	2b08      	cmp	r3, #8
 8009f72:	d824      	bhi.n	8009fbe <UART_SetConfig+0x342>
 8009f74:	a201      	add	r2, pc, #4	; (adr r2, 8009f7c <UART_SetConfig+0x300>)
 8009f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7a:	bf00      	nop
 8009f7c:	08009fa1 	.word	0x08009fa1
 8009f80:	08009fbf 	.word	0x08009fbf
 8009f84:	08009fa9 	.word	0x08009fa9
 8009f88:	08009fbf 	.word	0x08009fbf
 8009f8c:	08009faf 	.word	0x08009faf
 8009f90:	08009fbf 	.word	0x08009fbf
 8009f94:	08009fbf 	.word	0x08009fbf
 8009f98:	08009fbf 	.word	0x08009fbf
 8009f9c:	08009fb7 	.word	0x08009fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fa0:	f7fe fe04 	bl	8008bac <HAL_RCC_GetPCLK1Freq>
 8009fa4:	61f8      	str	r0, [r7, #28]
        break;
 8009fa6:	e010      	b.n	8009fca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fa8:	4b8f      	ldr	r3, [pc, #572]	; (800a1e8 <UART_SetConfig+0x56c>)
 8009faa:	61fb      	str	r3, [r7, #28]
        break;
 8009fac:	e00d      	b.n	8009fca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fae:	f7fe fd65 	bl	8008a7c <HAL_RCC_GetSysClockFreq>
 8009fb2:	61f8      	str	r0, [r7, #28]
        break;
 8009fb4:	e009      	b.n	8009fca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fba:	61fb      	str	r3, [r7, #28]
        break;
 8009fbc:	e005      	b.n	8009fca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009fc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 80fb 	beq.w	800a1c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	685a      	ldr	r2, [r3, #4]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	005b      	lsls	r3, r3, #1
 8009fda:	4413      	add	r3, r2
 8009fdc:	69fa      	ldr	r2, [r7, #28]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d305      	bcc.n	8009fee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009fe8:	69fa      	ldr	r2, [r7, #28]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d903      	bls.n	8009ff6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009ff4:	e0e8      	b.n	800a1c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	461c      	mov	r4, r3
 8009ffc:	4615      	mov	r5, r2
 8009ffe:	f04f 0200 	mov.w	r2, #0
 800a002:	f04f 0300 	mov.w	r3, #0
 800a006:	022b      	lsls	r3, r5, #8
 800a008:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a00c:	0222      	lsls	r2, r4, #8
 800a00e:	68f9      	ldr	r1, [r7, #12]
 800a010:	6849      	ldr	r1, [r1, #4]
 800a012:	0849      	lsrs	r1, r1, #1
 800a014:	2000      	movs	r0, #0
 800a016:	4688      	mov	r8, r1
 800a018:	4681      	mov	r9, r0
 800a01a:	eb12 0a08 	adds.w	sl, r2, r8
 800a01e:	eb43 0b09 	adc.w	fp, r3, r9
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	603b      	str	r3, [r7, #0]
 800a02a:	607a      	str	r2, [r7, #4]
 800a02c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a030:	4650      	mov	r0, sl
 800a032:	4659      	mov	r1, fp
 800a034:	f7f6 fdb8 	bl	8000ba8 <__aeabi_uldivmod>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4613      	mov	r3, r2
 800a03e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a046:	d308      	bcc.n	800a05a <UART_SetConfig+0x3de>
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a04e:	d204      	bcs.n	800a05a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	69ba      	ldr	r2, [r7, #24]
 800a056:	60da      	str	r2, [r3, #12]
 800a058:	e0b6      	b.n	800a1c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a060:	e0b2      	b.n	800a1c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	69db      	ldr	r3, [r3, #28]
 800a066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a06a:	d15e      	bne.n	800a12a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a06c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a070:	2b08      	cmp	r3, #8
 800a072:	d828      	bhi.n	800a0c6 <UART_SetConfig+0x44a>
 800a074:	a201      	add	r2, pc, #4	; (adr r2, 800a07c <UART_SetConfig+0x400>)
 800a076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07a:	bf00      	nop
 800a07c:	0800a0a1 	.word	0x0800a0a1
 800a080:	0800a0a9 	.word	0x0800a0a9
 800a084:	0800a0b1 	.word	0x0800a0b1
 800a088:	0800a0c7 	.word	0x0800a0c7
 800a08c:	0800a0b7 	.word	0x0800a0b7
 800a090:	0800a0c7 	.word	0x0800a0c7
 800a094:	0800a0c7 	.word	0x0800a0c7
 800a098:	0800a0c7 	.word	0x0800a0c7
 800a09c:	0800a0bf 	.word	0x0800a0bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0a0:	f7fe fd84 	bl	8008bac <HAL_RCC_GetPCLK1Freq>
 800a0a4:	61f8      	str	r0, [r7, #28]
        break;
 800a0a6:	e014      	b.n	800a0d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0a8:	f7fe fd96 	bl	8008bd8 <HAL_RCC_GetPCLK2Freq>
 800a0ac:	61f8      	str	r0, [r7, #28]
        break;
 800a0ae:	e010      	b.n	800a0d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0b0:	4b4d      	ldr	r3, [pc, #308]	; (800a1e8 <UART_SetConfig+0x56c>)
 800a0b2:	61fb      	str	r3, [r7, #28]
        break;
 800a0b4:	e00d      	b.n	800a0d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0b6:	f7fe fce1 	bl	8008a7c <HAL_RCC_GetSysClockFreq>
 800a0ba:	61f8      	str	r0, [r7, #28]
        break;
 800a0bc:	e009      	b.n	800a0d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0c2:	61fb      	str	r3, [r7, #28]
        break;
 800a0c4:	e005      	b.n	800a0d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a0d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d077      	beq.n	800a1c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	005a      	lsls	r2, r3, #1
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	085b      	lsrs	r3, r3, #1
 800a0e2:	441a      	add	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	2b0f      	cmp	r3, #15
 800a0f2:	d916      	bls.n	800a122 <UART_SetConfig+0x4a6>
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0fa:	d212      	bcs.n	800a122 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	f023 030f 	bic.w	r3, r3, #15
 800a104:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	085b      	lsrs	r3, r3, #1
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	f003 0307 	and.w	r3, r3, #7
 800a110:	b29a      	uxth	r2, r3
 800a112:	8afb      	ldrh	r3, [r7, #22]
 800a114:	4313      	orrs	r3, r2
 800a116:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	8afa      	ldrh	r2, [r7, #22]
 800a11e:	60da      	str	r2, [r3, #12]
 800a120:	e052      	b.n	800a1c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a128:	e04e      	b.n	800a1c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a12a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a12e:	2b08      	cmp	r3, #8
 800a130:	d827      	bhi.n	800a182 <UART_SetConfig+0x506>
 800a132:	a201      	add	r2, pc, #4	; (adr r2, 800a138 <UART_SetConfig+0x4bc>)
 800a134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a138:	0800a15d 	.word	0x0800a15d
 800a13c:	0800a165 	.word	0x0800a165
 800a140:	0800a16d 	.word	0x0800a16d
 800a144:	0800a183 	.word	0x0800a183
 800a148:	0800a173 	.word	0x0800a173
 800a14c:	0800a183 	.word	0x0800a183
 800a150:	0800a183 	.word	0x0800a183
 800a154:	0800a183 	.word	0x0800a183
 800a158:	0800a17b 	.word	0x0800a17b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a15c:	f7fe fd26 	bl	8008bac <HAL_RCC_GetPCLK1Freq>
 800a160:	61f8      	str	r0, [r7, #28]
        break;
 800a162:	e014      	b.n	800a18e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a164:	f7fe fd38 	bl	8008bd8 <HAL_RCC_GetPCLK2Freq>
 800a168:	61f8      	str	r0, [r7, #28]
        break;
 800a16a:	e010      	b.n	800a18e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a16c:	4b1e      	ldr	r3, [pc, #120]	; (800a1e8 <UART_SetConfig+0x56c>)
 800a16e:	61fb      	str	r3, [r7, #28]
        break;
 800a170:	e00d      	b.n	800a18e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a172:	f7fe fc83 	bl	8008a7c <HAL_RCC_GetSysClockFreq>
 800a176:	61f8      	str	r0, [r7, #28]
        break;
 800a178:	e009      	b.n	800a18e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a17a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a17e:	61fb      	str	r3, [r7, #28]
        break;
 800a180:	e005      	b.n	800a18e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a182:	2300      	movs	r3, #0
 800a184:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a18c:	bf00      	nop
    }

    if (pclk != 0U)
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d019      	beq.n	800a1c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	085a      	lsrs	r2, r3, #1
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	441a      	add	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	2b0f      	cmp	r3, #15
 800a1ac:	d909      	bls.n	800a1c2 <UART_SetConfig+0x546>
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1b4:	d205      	bcs.n	800a1c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	60da      	str	r2, [r3, #12]
 800a1c0:	e002      	b.n	800a1c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a1d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3728      	adds	r7, #40	; 0x28
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1e2:	bf00      	nop
 800a1e4:	40008000 	.word	0x40008000
 800a1e8:	00f42400 	.word	0x00f42400

0800a1ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	f003 0301 	and.w	r3, r3, #1
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00a      	beq.n	800a216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	430a      	orrs	r2, r1
 800a214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	f003 0302 	and.w	r3, r3, #2
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00a      	beq.n	800a238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	430a      	orrs	r2, r1
 800a236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23c:	f003 0304 	and.w	r3, r3, #4
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00a      	beq.n	800a25a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	430a      	orrs	r2, r1
 800a258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25e:	f003 0308 	and.w	r3, r3, #8
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00a      	beq.n	800a27c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a280:	f003 0310 	and.w	r3, r3, #16
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00a      	beq.n	800a29e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	430a      	orrs	r2, r1
 800a29c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	f003 0320 	and.w	r3, r3, #32
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00a      	beq.n	800a2c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	430a      	orrs	r2, r1
 800a2be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d01a      	beq.n	800a302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2ea:	d10a      	bne.n	800a302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	430a      	orrs	r2, r1
 800a300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00a      	beq.n	800a324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	430a      	orrs	r2, r1
 800a322:	605a      	str	r2, [r3, #4]
  }
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af02      	add	r7, sp, #8
 800a336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a340:	f7fb ffc0 	bl	80062c4 <HAL_GetTick>
 800a344:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 0308 	and.w	r3, r3, #8
 800a350:	2b08      	cmp	r3, #8
 800a352:	d10e      	bne.n	800a372 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f82d 	bl	800a3c2 <UART_WaitOnFlagUntilTimeout>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e023      	b.n	800a3ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0304 	and.w	r3, r3, #4
 800a37c:	2b04      	cmp	r3, #4
 800a37e:	d10e      	bne.n	800a39e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f817 	bl	800a3c2 <UART_WaitOnFlagUntilTimeout>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e00d      	b.n	800a3ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2220      	movs	r2, #32
 800a3a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b09c      	sub	sp, #112	; 0x70
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	60f8      	str	r0, [r7, #12]
 800a3ca:	60b9      	str	r1, [r7, #8]
 800a3cc:	603b      	str	r3, [r7, #0]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3d2:	e0a5      	b.n	800a520 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3da:	f000 80a1 	beq.w	800a520 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3de:	f7fb ff71 	bl	80062c4 <HAL_GetTick>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d302      	bcc.n	800a3f4 <UART_WaitOnFlagUntilTimeout+0x32>
 800a3ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d13e      	bne.n	800a472 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3fc:	e853 3f00 	ldrex	r3, [r3]
 800a400:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a404:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a408:	667b      	str	r3, [r7, #100]	; 0x64
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	461a      	mov	r2, r3
 800a410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a412:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a414:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a416:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a418:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a41a:	e841 2300 	strex	r3, r2, [r1]
 800a41e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1e6      	bne.n	800a3f4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3308      	adds	r3, #8
 800a42c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a430:	e853 3f00 	ldrex	r3, [r3]
 800a434:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a438:	f023 0301 	bic.w	r3, r3, #1
 800a43c:	663b      	str	r3, [r7, #96]	; 0x60
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3308      	adds	r3, #8
 800a444:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a446:	64ba      	str	r2, [r7, #72]	; 0x48
 800a448:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a44c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a44e:	e841 2300 	strex	r3, r2, [r1]
 800a452:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1e5      	bne.n	800a426 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2220      	movs	r2, #32
 800a45e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2220      	movs	r2, #32
 800a464:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a46e:	2303      	movs	r3, #3
 800a470:	e067      	b.n	800a542 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 0304 	and.w	r3, r3, #4
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d04f      	beq.n	800a520 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a48a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a48e:	d147      	bne.n	800a520 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a498:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a2:	e853 3f00 	ldrex	r3, [r3]
 800a4a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a4ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4c0:	e841 2300 	strex	r3, r2, [r1]
 800a4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1e6      	bne.n	800a49a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	e853 3f00 	ldrex	r3, [r3]
 800a4da:	613b      	str	r3, [r7, #16]
   return(result);
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	f023 0301 	bic.w	r3, r3, #1
 800a4e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	3308      	adds	r3, #8
 800a4ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a4ec:	623a      	str	r2, [r7, #32]
 800a4ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f0:	69f9      	ldr	r1, [r7, #28]
 800a4f2:	6a3a      	ldr	r2, [r7, #32]
 800a4f4:	e841 2300 	strex	r3, r2, [r1]
 800a4f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1e5      	bne.n	800a4cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2220      	movs	r2, #32
 800a504:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2220      	movs	r2, #32
 800a50a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2220      	movs	r2, #32
 800a510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e010      	b.n	800a542 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	69da      	ldr	r2, [r3, #28]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	4013      	ands	r3, r2
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	bf0c      	ite	eq
 800a530:	2301      	moveq	r3, #1
 800a532:	2300      	movne	r3, #0
 800a534:	b2db      	uxtb	r3, r3
 800a536:	461a      	mov	r2, r3
 800a538:	79fb      	ldrb	r3, [r7, #7]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	f43f af4a 	beq.w	800a3d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3770      	adds	r7, #112	; 0x70
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a54a:	b084      	sub	sp, #16
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	f107 001c 	add.w	r0, r7, #28
 800a558:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fa6f 	bl	800aa4c <USB_CoreReset>
 800a56e:	4603      	mov	r3, r0
 800a570:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a574:	2b00      	cmp	r3, #0
 800a576:	d106      	bne.n	800a586 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	639a      	str	r2, [r3, #56]	; 0x38
 800a584:	e005      	b.n	800a592 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800a592:	7bfb      	ldrb	r3, [r7, #15]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a59e:	b004      	add	sp, #16
 800a5a0:	4770      	bx	lr

0800a5a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b083      	sub	sp, #12
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	f023 0201 	bic.w	r2, r3, #1
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a5e0:	78fb      	ldrb	r3, [r7, #3]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d115      	bne.n	800a612 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a5f2:	2001      	movs	r0, #1
 800a5f4:	f7fb fe72 	bl	80062dc <HAL_Delay>
      ms++;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fa16 	bl	800aa30 <USB_GetMode>
 800a604:	4603      	mov	r3, r0
 800a606:	2b01      	cmp	r3, #1
 800a608:	d01e      	beq.n	800a648 <USB_SetCurrentMode+0x84>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2b31      	cmp	r3, #49	; 0x31
 800a60e:	d9f0      	bls.n	800a5f2 <USB_SetCurrentMode+0x2e>
 800a610:	e01a      	b.n	800a648 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a612:	78fb      	ldrb	r3, [r7, #3]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d115      	bne.n	800a644 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a624:	2001      	movs	r0, #1
 800a626:	f7fb fe59 	bl	80062dc <HAL_Delay>
      ms++;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3301      	adds	r3, #1
 800a62e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f9fd 	bl	800aa30 <USB_GetMode>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d005      	beq.n	800a648 <USB_SetCurrentMode+0x84>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b31      	cmp	r3, #49	; 0x31
 800a640:	d9f0      	bls.n	800a624 <USB_SetCurrentMode+0x60>
 800a642:	e001      	b.n	800a648 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e005      	b.n	800a654 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b32      	cmp	r3, #50	; 0x32
 800a64c:	d101      	bne.n	800a652 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e000      	b.n	800a654 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a65c:	b084      	sub	sp, #16
 800a65e:	b580      	push	{r7, lr}
 800a660:	b086      	sub	sp, #24
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a66a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a676:	2300      	movs	r3, #0
 800a678:	613b      	str	r3, [r7, #16]
 800a67a:	e009      	b.n	800a690 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	3340      	adds	r3, #64	; 0x40
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	4413      	add	r3, r2
 800a686:	2200      	movs	r2, #0
 800a688:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	3301      	adds	r3, #1
 800a68e:	613b      	str	r3, [r7, #16]
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	2b0e      	cmp	r3, #14
 800a694:	d9f2      	bls.n	800a67c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d11c      	bne.n	800a6d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6aa:	f043 0302 	orr.w	r3, r3, #2
 800a6ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	601a      	str	r2, [r3, #0]
 800a6d4:	e005      	b.n	800a6e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	680b      	ldr	r3, [r1, #0]
 800a700:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a702:	2103      	movs	r1, #3
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f959 	bl	800a9bc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a70a:	2110      	movs	r1, #16
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f8f1 	bl	800a8f4 <USB_FlushTxFifo>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d001      	beq.n	800a71c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f91d 	bl	800a95c <USB_FlushRxFifo>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d001      	beq.n	800a72c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a732:	461a      	mov	r2, r3
 800a734:	2300      	movs	r3, #0
 800a736:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a73e:	461a      	mov	r2, r3
 800a740:	2300      	movs	r3, #0
 800a742:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a74a:	461a      	mov	r2, r3
 800a74c:	2300      	movs	r3, #0
 800a74e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a750:	2300      	movs	r3, #0
 800a752:	613b      	str	r3, [r7, #16]
 800a754:	e043      	b.n	800a7de <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a76c:	d118      	bne.n	800a7a0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10a      	bne.n	800a78a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	015a      	lsls	r2, r3, #5
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	4413      	add	r3, r2
 800a77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a780:	461a      	mov	r2, r3
 800a782:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	e013      	b.n	800a7b2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	4413      	add	r3, r2
 800a792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a796:	461a      	mov	r2, r3
 800a798:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	e008      	b.n	800a7b2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	015a      	lsls	r2, r3, #5
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	015a      	lsls	r2, r3, #5
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7be:	461a      	mov	r2, r3
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	613b      	str	r3, [r7, #16]
 800a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d3b7      	bcc.n	800a756 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	613b      	str	r3, [r7, #16]
 800a7ea:	e043      	b.n	800a874 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	015a      	lsls	r2, r3, #5
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a802:	d118      	bne.n	800a836 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10a      	bne.n	800a820 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	015a      	lsls	r2, r3, #5
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	4413      	add	r3, r2
 800a812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a816:	461a      	mov	r2, r3
 800a818:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a81c:	6013      	str	r3, [r2, #0]
 800a81e:	e013      	b.n	800a848 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a82c:	461a      	mov	r2, r3
 800a82e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a832:	6013      	str	r3, [r2, #0]
 800a834:	e008      	b.n	800a848 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a842:	461a      	mov	r2, r3
 800a844:	2300      	movs	r3, #0
 800a846:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a854:	461a      	mov	r2, r3
 800a856:	2300      	movs	r3, #0
 800a858:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	015a      	lsls	r2, r3, #5
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	4413      	add	r3, r2
 800a862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a866:	461a      	mov	r2, r3
 800a868:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a86c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	3301      	adds	r3, #1
 800a872:	613b      	str	r3, [r7, #16]
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	693a      	ldr	r2, [r7, #16]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d3b7      	bcc.n	800a7ec <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a88a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a88e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a89c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	f043 0210 	orr.w	r2, r3, #16
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	699a      	ldr	r2, [r3, #24]
 800a8ae:	4b10      	ldr	r3, [pc, #64]	; (800a8f0 <USB_DevInit+0x294>)
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a8b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d005      	beq.n	800a8c8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	f043 0208 	orr.w	r2, r3, #8
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a8c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d107      	bne.n	800a8de <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8d6:	f043 0304 	orr.w	r3, r3, #4
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a8de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3718      	adds	r7, #24
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8ea:	b004      	add	sp, #16
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	803c3800 	.word	0x803c3800

0800a8f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a8fe:	2300      	movs	r3, #0
 800a900:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3301      	adds	r3, #1
 800a906:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	4a13      	ldr	r2, [pc, #76]	; (800a958 <USB_FlushTxFifo+0x64>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d901      	bls.n	800a914 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a910:	2303      	movs	r3, #3
 800a912:	e01b      	b.n	800a94c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	daf2      	bge.n	800a902 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	019b      	lsls	r3, r3, #6
 800a924:	f043 0220 	orr.w	r2, r3, #32
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3301      	adds	r3, #1
 800a930:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	4a08      	ldr	r2, [pc, #32]	; (800a958 <USB_FlushTxFifo+0x64>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d901      	bls.n	800a93e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e006      	b.n	800a94c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	f003 0320 	and.w	r3, r3, #32
 800a946:	2b20      	cmp	r3, #32
 800a948:	d0f0      	beq.n	800a92c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3714      	adds	r7, #20
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	00030d40 	.word	0x00030d40

0800a95c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a964:	2300      	movs	r3, #0
 800a966:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	3301      	adds	r3, #1
 800a96c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4a11      	ldr	r2, [pc, #68]	; (800a9b8 <USB_FlushRxFifo+0x5c>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d901      	bls.n	800a97a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a976:	2303      	movs	r3, #3
 800a978:	e018      	b.n	800a9ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	daf2      	bge.n	800a968 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a982:	2300      	movs	r3, #0
 800a984:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2210      	movs	r2, #16
 800a98a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	3301      	adds	r3, #1
 800a990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	4a08      	ldr	r2, [pc, #32]	; (800a9b8 <USB_FlushRxFifo+0x5c>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d901      	bls.n	800a99e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a99a:	2303      	movs	r3, #3
 800a99c:	e006      	b.n	800a9ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	f003 0310 	and.w	r3, r3, #16
 800a9a6:	2b10      	cmp	r3, #16
 800a9a8:	d0f0      	beq.n	800a98c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr
 800a9b8:	00030d40 	.word	0x00030d40

0800a9bc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	78fb      	ldrb	r3, [r7, #3]
 800a9d6:	68f9      	ldr	r1, [r7, #12]
 800a9d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b085      	sub	sp, #20
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa08:	f023 0303 	bic.w	r3, r3, #3
 800aa0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa1c:	f043 0302 	orr.w	r3, r3, #2
 800aa20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	695b      	ldr	r3, [r3, #20]
 800aa3c:	f003 0301 	and.w	r3, r3, #1
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa54:	2300      	movs	r3, #0
 800aa56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	4a13      	ldr	r2, [pc, #76]	; (800aab0 <USB_CoreReset+0x64>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d901      	bls.n	800aa6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa66:	2303      	movs	r3, #3
 800aa68:	e01b      	b.n	800aaa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	daf2      	bge.n	800aa58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa72:	2300      	movs	r3, #0
 800aa74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	f043 0201 	orr.w	r2, r3, #1
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	3301      	adds	r3, #1
 800aa86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	4a09      	ldr	r2, [pc, #36]	; (800aab0 <USB_CoreReset+0x64>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d901      	bls.n	800aa94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa90:	2303      	movs	r3, #3
 800aa92:	e006      	b.n	800aaa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	691b      	ldr	r3, [r3, #16]
 800aa98:	f003 0301 	and.w	r3, r3, #1
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d0f0      	beq.n	800aa82 <USB_CoreReset+0x36>

  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	00030d40 	.word	0x00030d40

0800aab4 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800aabe:	683a      	ldr	r2, [r7, #0]
 800aac0:	2101      	movs	r1, #1
 800aac2:	4836      	ldr	r0, [pc, #216]	; (800ab9c <network_configure_activations+0xe8>)
 800aac4:	f000 fb24 	bl	800b110 <ai_platform_get_activations_map>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d05b      	beq.n	800ab86 <network_configure_activations+0xd2>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 1396);
 800aace:	4b33      	ldr	r3, [pc, #204]	; (800ab9c <network_configure_activations+0xe8>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f203 5374 	addw	r3, r3, #1396	; 0x574
 800aad6:	4a32      	ldr	r2, [pc, #200]	; (800aba0 <network_configure_activations+0xec>)
 800aad8:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1396);
 800aada:	4b30      	ldr	r3, [pc, #192]	; (800ab9c <network_configure_activations+0xe8>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f203 5374 	addw	r3, r3, #1396	; 0x574
 800aae2:	4a2f      	ldr	r2, [pc, #188]	; (800aba0 <network_configure_activations+0xec>)
 800aae4:	60d3      	str	r3, [r2, #12]
    
    conv1d_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 32);
 800aae6:	4b2d      	ldr	r3, [pc, #180]	; (800ab9c <network_configure_activations+0xe8>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3320      	adds	r3, #32
 800aaec:	4a2d      	ldr	r2, [pc, #180]	; (800aba4 <network_configure_activations+0xf0>)
 800aaee:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32);
 800aaf0:	4b2a      	ldr	r3, [pc, #168]	; (800ab9c <network_configure_activations+0xe8>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	3320      	adds	r3, #32
 800aaf6:	4a2b      	ldr	r2, [pc, #172]	; (800aba4 <network_configure_activations+0xf0>)
 800aaf8:	60d3      	str	r3, [r2, #12]
    
    conv1d_output_array.data = AI_PTR(g_network_activations_map[0] + 32);
 800aafa:	4b28      	ldr	r3, [pc, #160]	; (800ab9c <network_configure_activations+0xe8>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3320      	adds	r3, #32
 800ab00:	4a29      	ldr	r2, [pc, #164]	; (800aba8 <network_configure_activations+0xf4>)
 800ab02:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32);
 800ab04:	4b25      	ldr	r3, [pc, #148]	; (800ab9c <network_configure_activations+0xe8>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	3320      	adds	r3, #32
 800ab0a:	4a27      	ldr	r2, [pc, #156]	; (800aba8 <network_configure_activations+0xf4>)
 800ab0c:	60d3      	str	r3, [r2, #12]
    
    conv1d_1_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800ab0e:	4b23      	ldr	r3, [pc, #140]	; (800ab9c <network_configure_activations+0xe8>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a26      	ldr	r2, [pc, #152]	; (800abac <network_configure_activations+0xf8>)
 800ab14:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800ab16:	4b21      	ldr	r3, [pc, #132]	; (800ab9c <network_configure_activations+0xe8>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a24      	ldr	r2, [pc, #144]	; (800abac <network_configure_activations+0xf8>)
 800ab1c:	60d3      	str	r3, [r2, #12]
    
    conv1d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 704);
 800ab1e:	4b1f      	ldr	r3, [pc, #124]	; (800ab9c <network_configure_activations+0xe8>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800ab26:	4a22      	ldr	r2, [pc, #136]	; (800abb0 <network_configure_activations+0xfc>)
 800ab28:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 704);
 800ab2a:	4b1c      	ldr	r3, [pc, #112]	; (800ab9c <network_configure_activations+0xe8>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800ab32:	4a1f      	ldr	r2, [pc, #124]	; (800abb0 <network_configure_activations+0xfc>)
 800ab34:	60d3      	str	r3, [r2, #12]
    
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800ab36:	4b19      	ldr	r3, [pc, #100]	; (800ab9c <network_configure_activations+0xe8>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a1e      	ldr	r2, [pc, #120]	; (800abb4 <network_configure_activations+0x100>)
 800ab3c:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800ab3e:	4b17      	ldr	r3, [pc, #92]	; (800ab9c <network_configure_activations+0xe8>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a1c      	ldr	r2, [pc, #112]	; (800abb4 <network_configure_activations+0x100>)
 800ab44:	60d3      	str	r3, [r2, #12]
    
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800ab46:	4b15      	ldr	r3, [pc, #84]	; (800ab9c <network_configure_activations+0xe8>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ab4e:	4a1a      	ldr	r2, [pc, #104]	; (800abb8 <network_configure_activations+0x104>)
 800ab50:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800ab52:	4b12      	ldr	r3, [pc, #72]	; (800ab9c <network_configure_activations+0xe8>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ab5a:	4a17      	ldr	r2, [pc, #92]	; (800abb8 <network_configure_activations+0x104>)
 800ab5c:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800ab5e:	4b0f      	ldr	r3, [pc, #60]	; (800ab9c <network_configure_activations+0xe8>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a16      	ldr	r2, [pc, #88]	; (800abbc <network_configure_activations+0x108>)
 800ab64:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800ab66:	4b0d      	ldr	r3, [pc, #52]	; (800ab9c <network_configure_activations+0xe8>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a14      	ldr	r2, [pc, #80]	; (800abbc <network_configure_activations+0x108>)
 800ab6c:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 800ab6e:	4b0b      	ldr	r3, [pc, #44]	; (800ab9c <network_configure_activations+0xe8>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	330c      	adds	r3, #12
 800ab74:	4a12      	ldr	r2, [pc, #72]	; (800abc0 <network_configure_activations+0x10c>)
 800ab76:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 800ab78:	4b08      	ldr	r3, [pc, #32]	; (800ab9c <network_configure_activations+0xe8>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	330c      	adds	r3, #12
 800ab7e:	4a10      	ldr	r2, [pc, #64]	; (800abc0 <network_configure_activations+0x10c>)
 800ab80:	60d3      	str	r3, [r2, #12]
    
    return true;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e005      	b.n	800ab92 <network_configure_activations+0xde>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800ab86:	2213      	movs	r2, #19
 800ab88:	2130      	movs	r1, #48	; 0x30
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fba4 	bl	800b2d8 <ai_platform_network_set_error>
  return false;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	200022cc 	.word	0x200022cc
 800aba0:	20000038 	.word	0x20000038
 800aba4:	20000058 	.word	0x20000058
 800aba8:	20000068 	.word	0x20000068
 800abac:	20000088 	.word	0x20000088
 800abb0:	200000a8 	.word	0x200000a8
 800abb4:	200000b8 	.word	0x200000b8
 800abb8:	200000c8 	.word	0x200000c8
 800abbc:	200000d8 	.word	0x200000d8
 800abc0:	200000e8 	.word	0x200000e8

0800abc4 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800abce:	683a      	ldr	r2, [r7, #0]
 800abd0:	2101      	movs	r1, #1
 800abd2:	4854      	ldr	r0, [pc, #336]	; (800ad24 <network_configure_weights+0x160>)
 800abd4:	f000 fa48 	bl	800b068 <ai_platform_get_weights_map>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 8098 	beq.w	800ad10 <network_configure_weights+0x14c>
    /* Updating weights (byte) offsets */
    
    conv1d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800abe0:	4b51      	ldr	r3, [pc, #324]	; (800ad28 <network_configure_weights+0x164>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abe8:	4a4f      	ldr	r2, [pc, #316]	; (800ad28 <network_configure_weights+0x164>)
 800abea:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800abec:	4b4d      	ldr	r3, [pc, #308]	; (800ad24 <network_configure_weights+0x160>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a4d      	ldr	r2, [pc, #308]	; (800ad28 <network_configure_weights+0x164>)
 800abf2:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800abf4:	4b4b      	ldr	r3, [pc, #300]	; (800ad24 <network_configure_weights+0x160>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a4b      	ldr	r2, [pc, #300]	; (800ad28 <network_configure_weights+0x164>)
 800abfa:	60d3      	str	r3, [r2, #12]
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800abfc:	4b4b      	ldr	r3, [pc, #300]	; (800ad2c <network_configure_weights+0x168>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac04:	4a49      	ldr	r2, [pc, #292]	; (800ad2c <network_configure_weights+0x168>)
 800ac06:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 32);
 800ac08:	4b46      	ldr	r3, [pc, #280]	; (800ad24 <network_configure_weights+0x160>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	3320      	adds	r3, #32
 800ac0e:	4a47      	ldr	r2, [pc, #284]	; (800ad2c <network_configure_weights+0x168>)
 800ac10:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 32);
 800ac12:	4b44      	ldr	r3, [pc, #272]	; (800ad24 <network_configure_weights+0x160>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	3320      	adds	r3, #32
 800ac18:	4a44      	ldr	r2, [pc, #272]	; (800ad2c <network_configure_weights+0x168>)
 800ac1a:	60d3      	str	r3, [r2, #12]
    
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ac1c:	4b44      	ldr	r3, [pc, #272]	; (800ad30 <network_configure_weights+0x16c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac24:	4a42      	ldr	r2, [pc, #264]	; (800ad30 <network_configure_weights+0x16c>)
 800ac26:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 45088);
 800ac28:	4b3e      	ldr	r3, [pc, #248]	; (800ad24 <network_configure_weights+0x160>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800ac30:	3320      	adds	r3, #32
 800ac32:	4a3f      	ldr	r2, [pc, #252]	; (800ad30 <network_configure_weights+0x16c>)
 800ac34:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 45088);
 800ac36:	4b3b      	ldr	r3, [pc, #236]	; (800ad24 <network_configure_weights+0x160>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800ac3e:	3320      	adds	r3, #32
 800ac40:	4a3b      	ldr	r2, [pc, #236]	; (800ad30 <network_configure_weights+0x16c>)
 800ac42:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ac44:	4b3b      	ldr	r3, [pc, #236]	; (800ad34 <network_configure_weights+0x170>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac4c:	4a39      	ldr	r2, [pc, #228]	; (800ad34 <network_configure_weights+0x170>)
 800ac4e:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 45344);
 800ac50:	4b34      	ldr	r3, [pc, #208]	; (800ad24 <network_configure_weights+0x160>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800ac58:	3320      	adds	r3, #32
 800ac5a:	4a36      	ldr	r2, [pc, #216]	; (800ad34 <network_configure_weights+0x170>)
 800ac5c:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 45344);
 800ac5e:	4b31      	ldr	r3, [pc, #196]	; (800ad24 <network_configure_weights+0x160>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800ac66:	3320      	adds	r3, #32
 800ac68:	4a32      	ldr	r2, [pc, #200]	; (800ad34 <network_configure_weights+0x170>)
 800ac6a:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ac6c:	4b32      	ldr	r3, [pc, #200]	; (800ad38 <network_configure_weights+0x174>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac74:	4a30      	ldr	r2, [pc, #192]	; (800ad38 <network_configure_weights+0x174>)
 800ac76:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 46112);
 800ac78:	4b2a      	ldr	r3, [pc, #168]	; (800ad24 <network_configure_weights+0x160>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800ac80:	3320      	adds	r3, #32
 800ac82:	4a2d      	ldr	r2, [pc, #180]	; (800ad38 <network_configure_weights+0x174>)
 800ac84:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 46112);
 800ac86:	4b27      	ldr	r3, [pc, #156]	; (800ad24 <network_configure_weights+0x160>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800ac8e:	3320      	adds	r3, #32
 800ac90:	4a29      	ldr	r2, [pc, #164]	; (800ad38 <network_configure_weights+0x174>)
 800ac92:	60d3      	str	r3, [r2, #12]
    
    conv1d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800ac94:	4b29      	ldr	r3, [pc, #164]	; (800ad3c <network_configure_weights+0x178>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac9c:	4a27      	ldr	r2, [pc, #156]	; (800ad3c <network_configure_weights+0x178>)
 800ac9e:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 46124);
 800aca0:	4b20      	ldr	r3, [pc, #128]	; (800ad24 <network_configure_weights+0x160>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800aca8:	332c      	adds	r3, #44	; 0x2c
 800acaa:	4a24      	ldr	r2, [pc, #144]	; (800ad3c <network_configure_weights+0x178>)
 800acac:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 46124);
 800acae:	4b1d      	ldr	r3, [pc, #116]	; (800ad24 <network_configure_weights+0x160>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800acb6:	332c      	adds	r3, #44	; 0x2c
 800acb8:	4a20      	ldr	r2, [pc, #128]	; (800ad3c <network_configure_weights+0x178>)
 800acba:	60d3      	str	r3, [r2, #12]
    
    conv1d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800acbc:	4b20      	ldr	r3, [pc, #128]	; (800ad40 <network_configure_weights+0x17c>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acc4:	4a1e      	ldr	r2, [pc, #120]	; (800ad40 <network_configure_weights+0x17c>)
 800acc6:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 46700);
 800acc8:	4b16      	ldr	r3, [pc, #88]	; (800ad24 <network_configure_weights+0x160>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f503 4336 	add.w	r3, r3, #46592	; 0xb600
 800acd0:	336c      	adds	r3, #108	; 0x6c
 800acd2:	4a1b      	ldr	r2, [pc, #108]	; (800ad40 <network_configure_weights+0x17c>)
 800acd4:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 46700);
 800acd6:	4b13      	ldr	r3, [pc, #76]	; (800ad24 <network_configure_weights+0x160>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f503 4336 	add.w	r3, r3, #46592	; 0xb600
 800acde:	336c      	adds	r3, #108	; 0x6c
 800ace0:	4a17      	ldr	r2, [pc, #92]	; (800ad40 <network_configure_weights+0x17c>)
 800ace2:	60d3      	str	r3, [r2, #12]
    
    conv1d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800ace4:	4b17      	ldr	r3, [pc, #92]	; (800ad44 <network_configure_weights+0x180>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acec:	4a15      	ldr	r2, [pc, #84]	; (800ad44 <network_configure_weights+0x180>)
 800acee:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 46764);
 800acf0:	4b0c      	ldr	r3, [pc, #48]	; (800ad24 <network_configure_weights+0x160>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f503 4336 	add.w	r3, r3, #46592	; 0xb600
 800acf8:	33ac      	adds	r3, #172	; 0xac
 800acfa:	4a12      	ldr	r2, [pc, #72]	; (800ad44 <network_configure_weights+0x180>)
 800acfc:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 46764);
 800acfe:	4b09      	ldr	r3, [pc, #36]	; (800ad24 <network_configure_weights+0x160>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f503 4336 	add.w	r3, r3, #46592	; 0xb600
 800ad06:	33ac      	adds	r3, #172	; 0xac
 800ad08:	4a0e      	ldr	r2, [pc, #56]	; (800ad44 <network_configure_weights+0x180>)
 800ad0a:	60d3      	str	r3, [r2, #12]
    
    return true;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e005      	b.n	800ad1c <network_configure_weights+0x158>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800ad10:	2212      	movs	r2, #18
 800ad12:	2130      	movs	r1, #48	; 0x30
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fadf 	bl	800b2d8 <ai_platform_network_set_error>
  return false;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	200022d0 	.word	0x200022d0
 800ad28:	20000018 	.word	0x20000018
 800ad2c:	20000028 	.word	0x20000028
 800ad30:	20000048 	.word	0x20000048
 800ad34:	20000078 	.word	0x20000078
 800ad38:	20000098 	.word	0x20000098
 800ad3c:	200000f8 	.word	0x200000f8
 800ad40:	20000108 	.word	0x20000108
 800ad44:	20000118 	.word	0x20000118

0800ad48 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fa53 	bl	800b1fc <ai_platform_network_get_error>
 800ad56:	4603      	mov	r3, r0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af02      	add	r7, sp, #8
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	9301      	str	r3, [sp, #4]
 800ad6e:	2305      	movs	r3, #5
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	2301      	movs	r3, #1
 800ad74:	4a04      	ldr	r2, [pc, #16]	; (800ad88 <ai_network_create+0x28>)
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 fc59 	bl	800b630 <ai_platform_network_create>
 800ad7e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	20000918 	.word	0x20000918

0800ad8c <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b096      	sub	sp, #88	; 0x58
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800ad98:	2100      	movs	r1, #0
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f7ff ffe0 	bl	800ad60 <ai_network_create>
 800ada0:	4603      	mov	r3, r0
 800ada2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 800ada4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d001      	beq.n	800adb0 <ai_network_create_and_init+0x24>
        return err;
 800adac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adae:	e05d      	b.n	800ae6c <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 800adb0:	f107 0314 	add.w	r3, r7, #20
 800adb4:	4618      	mov	r0, r3
 800adb6:	f000 f8dd 	bl	800af74 <ai_network_data_params_get>
 800adba:	4603      	mov	r3, r0
 800adbc:	f083 0301 	eor.w	r3, r3, #1
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d008      	beq.n	800add8 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff ffbc 	bl	800ad48 <ai_network_get_error>
 800add0:	4603      	mov	r3, r0
 800add2:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800add4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800add6:	e049      	b.n	800ae6c <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d016      	beq.n	800ae0c <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800adde:	2300      	movs	r3, #0
 800ade0:	657b      	str	r3, [r7, #84]	; 0x54
 800ade2:	e00e      	b.n	800ae02 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800ade4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ade6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	4413      	add	r3, r2
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	f107 0314 	add.w	r3, r7, #20
 800adf4:	330c      	adds	r3, #12
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 f922 	bl	800b040 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800adfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adfe:	3301      	adds	r3, #1
 800ae00:	657b      	str	r3, [r7, #84]	; 0x54
 800ae02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae04:	461a      	mov	r2, r3
 800ae06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	dbeb      	blt.n	800ade4 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d016      	beq.n	800ae40 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800ae12:	2300      	movs	r3, #0
 800ae14:	653b      	str	r3, [r7, #80]	; 0x50
 800ae16:	e00e      	b.n	800ae36 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800ae18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	4413      	add	r3, r2
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	f107 0314 	add.w	r3, r7, #20
 800ae28:	3304      	adds	r3, #4
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f000 f908 	bl	800b040 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800ae30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae32:	3301      	adds	r3, #1
 800ae34:	653b      	str	r3, [r7, #80]	; 0x50
 800ae36:	8b7b      	ldrh	r3, [r7, #26]
 800ae38:	461a      	mov	r2, r3
 800ae3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	dbeb      	blt.n	800ae18 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f107 0214 	add.w	r2, r7, #20
 800ae48:	4611      	mov	r1, r2
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 f846 	bl	800aedc <ai_network_init>
 800ae50:	4603      	mov	r3, r0
 800ae52:	f083 0301 	eor.w	r3, r3, #1
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d006      	beq.n	800ae6a <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7ff ff71 	bl	800ad48 <ai_network_get_error>
 800ae66:	4603      	mov	r3, r0
 800ae68:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800ae6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3758      	adds	r7, #88	; 0x58
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d104      	bne.n	800ae8e <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800ae84:	4b06      	ldr	r3, [pc, #24]	; (800aea0 <ai_network_inputs_get+0x2c>)
 800ae86:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a06      	ldr	r2, [pc, #24]	; (800aea4 <ai_network_inputs_get+0x30>)
 800ae8c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fa27 	bl	800b2e4 <ai_platform_inputs_get>
 800ae96:	4603      	mov	r3, r0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	20000918 	.word	0x20000918
 800aea4:	a1c00100 	.word	0xa1c00100

0800aea8 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d104      	bne.n	800aec2 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800aeb8:	4b06      	ldr	r3, [pc, #24]	; (800aed4 <ai_network_outputs_get+0x2c>)
 800aeba:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a06      	ldr	r2, [pc, #24]	; (800aed8 <ai_network_outputs_get+0x30>)
 800aec0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fae3 	bl	800b490 <ai_platform_outputs_get>
 800aeca:	4603      	mov	r3, r0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	20000918 	.word	0x20000918
 800aed8:	a1c00100 	.word	0xa1c00100

0800aedc <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fc77 	bl	800b7dc <ai_platform_network_init>
 800aeee:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <ai_network_init+0x1e>
 800aef6:	2300      	movs	r3, #0
 800aef8:	e028      	b.n	800af4c <ai_network_init+0x70>

  ai_bool ok = true;
 800aefa:	2301      	movs	r3, #1
 800aefc:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f7ff fe5f 	bl	800abc4 <network_configure_weights>
 800af06:	4603      	mov	r3, r0
 800af08:	461a      	mov	r2, r3
 800af0a:	7afb      	ldrb	r3, [r7, #11]
 800af0c:	4013      	ands	r3, r2
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bf14      	ite	ne
 800af12:	2301      	movne	r3, #1
 800af14:	2300      	moveq	r3, #0
 800af16:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f7ff fdca 	bl	800aab4 <network_configure_activations>
 800af20:	4603      	mov	r3, r0
 800af22:	461a      	mov	r2, r3
 800af24:	7afb      	ldrb	r3, [r7, #11]
 800af26:	4013      	ands	r3, r2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	bf14      	ite	ne
 800af2c:	2301      	movne	r3, #1
 800af2e:	2300      	moveq	r3, #0
 800af30:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fd40 	bl	800b9b8 <ai_platform_network_post_init>
 800af38:	4603      	mov	r3, r0
 800af3a:	461a      	mov	r2, r3
 800af3c:	7afb      	ldrb	r3, [r7, #11]
 800af3e:	4013      	ands	r3, r2
 800af40:	2b00      	cmp	r3, #0
 800af42:	bf14      	ite	ne
 800af44:	2301      	movne	r3, #1
 800af46:	2300      	moveq	r3, #0
 800af48:	72fb      	strb	r3, [r7, #11]

  return ok;
 800af4a:	7afb      	ldrb	r3, [r7, #11]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	68b9      	ldr	r1, [r7, #8]
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f000 fdaf 	bl	800bac8 <ai_platform_network_process>
 800af6a:	4603      	mov	r3, r0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <ai_network_data_params_get+0x12>
 800af82:	2300      	movs	r3, #0
 800af84:	e016      	b.n	800afb4 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800af86:	4a0d      	ldr	r2, [pc, #52]	; (800afbc <ai_network_data_params_get+0x48>)
 800af88:	f107 0310 	add.w	r3, r7, #16
 800af8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800af90:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800af94:	4a0a      	ldr	r2, [pc, #40]	; (800afc0 <ai_network_data_params_get+0x4c>)
 800af96:	f107 0308 	add.w	r3, r7, #8
 800af9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800af9e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800afa2:	f107 0210 	add.w	r2, r7, #16
 800afa6:	f107 0308 	add.w	r3, r7, #8
 800afaa:	4619      	mov	r1, r3
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f903 	bl	800b1b8 <ai_platform_bind_network_params>
 800afb2:	4603      	mov	r3, r0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3718      	adds	r7, #24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	08010c08 	.word	0x08010c08
 800afc0:	08010c10 	.word	0x08010c10

0800afc4 <ai_buffer_get_size>:
 800afc4:	b378      	cbz	r0, 800b026 <ai_buffer_get_size+0x62>
 800afc6:	b410      	push	{r4}
 800afc8:	6803      	ldr	r3, [r0, #0]
 800afca:	4a17      	ldr	r2, [pc, #92]	; (800b028 <ai_buffer_get_size+0x64>)
 800afcc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800afd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d01e      	beq.n	800b016 <ai_buffer_get_size+0x52>
 800afd8:	6984      	ldr	r4, [r0, #24]
 800afda:	6862      	ldr	r2, [r4, #4]
 800afdc:	7d03      	ldrb	r3, [r0, #20]
 800afde:	6941      	ldr	r1, [r0, #20]
 800afe0:	f1a3 0301 	sub.w	r3, r3, #1
 800afe4:	fab3 f383 	clz	r3, r3
 800afe8:	095b      	lsrs	r3, r3, #5
 800afea:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800afee:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800aff2:	da0b      	bge.n	800b00c <ai_buffer_get_size+0x48>
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d102      	bne.n	800affe <ai_buffer_get_size+0x3a>
 800aff8:	2802      	cmp	r0, #2
 800affa:	d007      	beq.n	800b00c <ai_buffer_get_size+0x48>
 800affc:	2302      	movs	r3, #2
 800affe:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800b002:	3301      	adds	r3, #1
 800b004:	4298      	cmp	r0, r3
 800b006:	fb01 f202 	mul.w	r2, r1, r2
 800b00a:	d1f3      	bne.n	800aff4 <ai_buffer_get_size+0x30>
 800b00c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800b010:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	2900      	cmp	r1, #0
 800b018:	d0de      	beq.n	800afd8 <ai_buffer_get_size+0x14>
 800b01a:	6984      	ldr	r4, [r0, #24]
 800b01c:	6863      	ldr	r3, [r4, #4]
 800b01e:	331f      	adds	r3, #31
 800b020:	f023 021f 	bic.w	r2, r3, #31
 800b024:	e7da      	b.n	800afdc <ai_buffer_get_size+0x18>
 800b026:	4770      	bx	lr
 800b028:	000400c0 	.word	0x000400c0

0800b02c <ai_buffer_array_sane>:
 800b02c:	b138      	cbz	r0, 800b03e <ai_buffer_array_sane+0x12>
 800b02e:	6843      	ldr	r3, [r0, #4]
 800b030:	b123      	cbz	r3, 800b03c <ai_buffer_array_sane+0x10>
 800b032:	8840      	ldrh	r0, [r0, #2]
 800b034:	3800      	subs	r0, #0
 800b036:	bf18      	it	ne
 800b038:	2001      	movne	r0, #1
 800b03a:	4770      	bx	lr
 800b03c:	4618      	mov	r0, r3
 800b03e:	4770      	bx	lr

0800b040 <ai_buffer_array_item_set_address>:
 800b040:	b150      	cbz	r0, 800b058 <ai_buffer_array_item_set_address+0x18>
 800b042:	6843      	ldr	r3, [r0, #4]
 800b044:	b14b      	cbz	r3, 800b05a <ai_buffer_array_item_set_address+0x1a>
 800b046:	8840      	ldrh	r0, [r0, #2]
 800b048:	b900      	cbnz	r0, 800b04c <ai_buffer_array_item_set_address+0xc>
 800b04a:	4770      	bx	lr
 800b04c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b050:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b054:	2001      	movs	r0, #1
 800b056:	604a      	str	r2, [r1, #4]
 800b058:	4770      	bx	lr
 800b05a:	4618      	mov	r0, r3
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop

0800b060 <_ai_platform_acquire_crc>:
 800b060:	2001      	movs	r0, #1
 800b062:	4770      	bx	lr

0800b064 <_ai_platform_release_crc>:
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop

0800b068 <ai_platform_get_weights_map>:
 800b068:	2a00      	cmp	r2, #0
 800b06a:	d037      	beq.n	800b0dc <ai_platform_get_weights_map+0x74>
 800b06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b06e:	4604      	mov	r4, r0
 800b070:	b1a0      	cbz	r0, 800b09c <ai_platform_get_weights_map+0x34>
 800b072:	460f      	mov	r7, r1
 800b074:	b191      	cbz	r1, 800b09c <ai_platform_get_weights_map+0x34>
 800b076:	4b25      	ldr	r3, [pc, #148]	; (800b10c <ai_platform_get_weights_map+0xa4>)
 800b078:	6810      	ldr	r0, [r2, #0]
 800b07a:	4298      	cmp	r0, r3
 800b07c:	4615      	mov	r5, r2
 800b07e:	d00f      	beq.n	800b0a0 <ai_platform_get_weights_map+0x38>
 800b080:	6855      	ldr	r5, [r2, #4]
 800b082:	b15d      	cbz	r5, 800b09c <ai_platform_get_weights_map+0x34>
 800b084:	682e      	ldr	r6, [r5, #0]
 800b086:	429e      	cmp	r6, r3
 800b088:	d02a      	beq.n	800b0e0 <ai_platform_get_weights_map+0x78>
 800b08a:	f1a1 0001 	sub.w	r0, r1, #1
 800b08e:	6025      	str	r5, [r4, #0]
 800b090:	fab0 f080 	clz	r0, r0
 800b094:	0940      	lsrs	r0, r0, #5
 800b096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b098:	42a7      	cmp	r7, r4
 800b09a:	d034      	beq.n	800b106 <ai_platform_get_weights_map+0x9e>
 800b09c:	2000      	movs	r0, #0
 800b09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a0:	1d10      	adds	r0, r2, #4
 800b0a2:	f7ff ffc3 	bl	800b02c <ai_buffer_array_sane>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d0f8      	beq.n	800b09c <ai_platform_get_weights_map+0x34>
 800b0aa:	88eb      	ldrh	r3, [r5, #6]
 800b0ac:	429f      	cmp	r7, r3
 800b0ae:	d1f5      	bne.n	800b09c <ai_platform_get_weights_map+0x34>
 800b0b0:	f04f 0e00 	mov.w	lr, #0
 800b0b4:	1f23      	subs	r3, r4, #4
 800b0b6:	4670      	mov	r0, lr
 800b0b8:	68aa      	ldr	r2, [r5, #8]
 800b0ba:	eb02 0c0e 	add.w	ip, r2, lr
 800b0be:	f10e 0e1c 	add.w	lr, lr, #28
 800b0c2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800b0c6:	b124      	cbz	r4, 800b0d2 <ai_platform_get_weights_map+0x6a>
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	4287      	cmp	r7, r0
 800b0cc:	f843 4f04 	str.w	r4, [r3, #4]!
 800b0d0:	d1f2      	bne.n	800b0b8 <ai_platform_get_weights_map+0x50>
 800b0d2:	1a38      	subs	r0, r7, r0
 800b0d4:	fab0 f080 	clz	r0, r0
 800b0d8:	0940      	lsrs	r0, r0, #5
 800b0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0dc:	2000      	movs	r0, #0
 800b0de:	4770      	bx	lr
 800b0e0:	1f23      	subs	r3, r4, #4
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	2400      	movs	r4, #0
 800b0e6:	e000      	b.n	800b0ea <ai_platform_get_weights_map+0x82>
 800b0e8:	4614      	mov	r4, r2
 800b0ea:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800b0ee:	42b2      	cmp	r2, r6
 800b0f0:	d0d2      	beq.n	800b098 <ai_platform_get_weights_map+0x30>
 800b0f2:	f843 2f04 	str.w	r2, [r3, #4]!
 800b0f6:	1c62      	adds	r2, r4, #1
 800b0f8:	4297      	cmp	r7, r2
 800b0fa:	d1f5      	bne.n	800b0e8 <ai_platform_get_weights_map+0x80>
 800b0fc:	3402      	adds	r4, #2
 800b0fe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b102:	42b3      	cmp	r3, r6
 800b104:	d1ca      	bne.n	800b09c <ai_platform_get_weights_map+0x34>
 800b106:	2001      	movs	r0, #1
 800b108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b10a:	bf00      	nop
 800b10c:	a1facade 	.word	0xa1facade

0800b110 <ai_platform_get_activations_map>:
 800b110:	2a00      	cmp	r2, #0
 800b112:	d038      	beq.n	800b186 <ai_platform_get_activations_map+0x76>
 800b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b116:	4604      	mov	r4, r0
 800b118:	b1a0      	cbz	r0, 800b144 <ai_platform_get_activations_map+0x34>
 800b11a:	460f      	mov	r7, r1
 800b11c:	b191      	cbz	r1, 800b144 <ai_platform_get_activations_map+0x34>
 800b11e:	4b25      	ldr	r3, [pc, #148]	; (800b1b4 <ai_platform_get_activations_map+0xa4>)
 800b120:	6810      	ldr	r0, [r2, #0]
 800b122:	4298      	cmp	r0, r3
 800b124:	4615      	mov	r5, r2
 800b126:	d00f      	beq.n	800b148 <ai_platform_get_activations_map+0x38>
 800b128:	6a15      	ldr	r5, [r2, #32]
 800b12a:	b15d      	cbz	r5, 800b144 <ai_platform_get_activations_map+0x34>
 800b12c:	682e      	ldr	r6, [r5, #0]
 800b12e:	429e      	cmp	r6, r3
 800b130:	d02b      	beq.n	800b18a <ai_platform_get_activations_map+0x7a>
 800b132:	f1a1 0001 	sub.w	r0, r1, #1
 800b136:	6025      	str	r5, [r4, #0]
 800b138:	fab0 f080 	clz	r0, r0
 800b13c:	0940      	lsrs	r0, r0, #5
 800b13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b140:	42a7      	cmp	r7, r4
 800b142:	d035      	beq.n	800b1b0 <ai_platform_get_activations_map+0xa0>
 800b144:	2000      	movs	r0, #0
 800b146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b148:	f102 000c 	add.w	r0, r2, #12
 800b14c:	f7ff ff6e 	bl	800b02c <ai_buffer_array_sane>
 800b150:	2800      	cmp	r0, #0
 800b152:	d0f7      	beq.n	800b144 <ai_platform_get_activations_map+0x34>
 800b154:	89eb      	ldrh	r3, [r5, #14]
 800b156:	429f      	cmp	r7, r3
 800b158:	d1f4      	bne.n	800b144 <ai_platform_get_activations_map+0x34>
 800b15a:	f04f 0e00 	mov.w	lr, #0
 800b15e:	1f23      	subs	r3, r4, #4
 800b160:	4670      	mov	r0, lr
 800b162:	692a      	ldr	r2, [r5, #16]
 800b164:	eb02 0c0e 	add.w	ip, r2, lr
 800b168:	f10e 0e1c 	add.w	lr, lr, #28
 800b16c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800b170:	b124      	cbz	r4, 800b17c <ai_platform_get_activations_map+0x6c>
 800b172:	3001      	adds	r0, #1
 800b174:	4287      	cmp	r7, r0
 800b176:	f843 4f04 	str.w	r4, [r3, #4]!
 800b17a:	d1f2      	bne.n	800b162 <ai_platform_get_activations_map+0x52>
 800b17c:	1a38      	subs	r0, r7, r0
 800b17e:	fab0 f080 	clz	r0, r0
 800b182:	0940      	lsrs	r0, r0, #5
 800b184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b186:	2000      	movs	r0, #0
 800b188:	4770      	bx	lr
 800b18a:	1f23      	subs	r3, r4, #4
 800b18c:	4628      	mov	r0, r5
 800b18e:	2400      	movs	r4, #0
 800b190:	e000      	b.n	800b194 <ai_platform_get_activations_map+0x84>
 800b192:	4614      	mov	r4, r2
 800b194:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800b198:	42b2      	cmp	r2, r6
 800b19a:	d0d1      	beq.n	800b140 <ai_platform_get_activations_map+0x30>
 800b19c:	f843 2f04 	str.w	r2, [r3, #4]!
 800b1a0:	1c62      	adds	r2, r4, #1
 800b1a2:	4297      	cmp	r7, r2
 800b1a4:	d1f5      	bne.n	800b192 <ai_platform_get_activations_map+0x82>
 800b1a6:	3402      	adds	r4, #2
 800b1a8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b1ac:	42b3      	cmp	r3, r6
 800b1ae:	d1c9      	bne.n	800b144 <ai_platform_get_activations_map+0x34>
 800b1b0:	2001      	movs	r0, #1
 800b1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1b4:	a1facade 	.word	0xa1facade

0800b1b8 <ai_platform_bind_network_params>:
 800b1b8:	b1a0      	cbz	r0, 800b1e4 <ai_platform_bind_network_params+0x2c>
 800b1ba:	b1b1      	cbz	r1, 800b1ea <ai_platform_bind_network_params+0x32>
 800b1bc:	b1c2      	cbz	r2, 800b1f0 <ai_platform_bind_network_params+0x38>
 800b1be:	b410      	push	{r4}
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	4c0d      	ldr	r4, [pc, #52]	; (800b1f8 <ai_platform_bind_network_params+0x40>)
 800b1c4:	f843 4b04 	str.w	r4, [r3], #4
 800b1c8:	f100 0c0c 	add.w	ip, r0, #12
 800b1cc:	c903      	ldmia	r1, {r0, r1}
 800b1ce:	e883 0003 	stmia.w	r3, {r0, r1}
 800b1d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b1d6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b1da:	2301      	movs	r3, #1
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1e2:	4770      	bx	lr
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	4770      	bx	lr
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	4770      	bx	lr
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	a1facade 	.word	0xa1facade

0800b1fc <ai_platform_network_get_error>:
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	b1f0      	cbz	r0, 800b23e <ai_platform_network_get_error+0x42>
 800b200:	4b2f      	ldr	r3, [pc, #188]	; (800b2c0 <ai_platform_network_get_error+0xc4>)
 800b202:	6802      	ldr	r2, [r0, #0]
 800b204:	429a      	cmp	r2, r3
 800b206:	4604      	mov	r4, r0
 800b208:	d119      	bne.n	800b23e <ai_platform_network_get_error+0x42>
 800b20a:	f7ff ff29 	bl	800b060 <_ai_platform_acquire_crc>
 800b20e:	4b2d      	ldr	r3, [pc, #180]	; (800b2c4 <ai_platform_network_get_error+0xc8>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b21a:	d03c      	beq.n	800b296 <ai_platform_network_get_error+0x9a>
 800b21c:	4a2a      	ldr	r2, [pc, #168]	; (800b2c8 <ai_platform_network_get_error+0xcc>)
 800b21e:	2301      	movs	r3, #1
 800b220:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b224:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d1fb      	bne.n	800b224 <ai_platform_network_get_error+0x28>
 800b22c:	4b27      	ldr	r3, [pc, #156]	; (800b2cc <ai_platform_network_get_error+0xd0>)
 800b22e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b232:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b236:	4b26      	ldr	r3, [pc, #152]	; (800b2d0 <ai_platform_network_get_error+0xd4>)
 800b238:	429a      	cmp	r2, r3
 800b23a:	d038      	beq.n	800b2ae <ai_platform_network_get_error+0xb2>
 800b23c:	e7fe      	b.n	800b23c <ai_platform_network_get_error+0x40>
 800b23e:	f7ff ff0f 	bl	800b060 <_ai_platform_acquire_crc>
 800b242:	4b20      	ldr	r3, [pc, #128]	; (800b2c4 <ai_platform_network_get_error+0xc8>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b24a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b24e:	d010      	beq.n	800b272 <ai_platform_network_get_error+0x76>
 800b250:	4a1d      	ldr	r2, [pc, #116]	; (800b2c8 <ai_platform_network_get_error+0xcc>)
 800b252:	2301      	movs	r3, #1
 800b254:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b258:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1fb      	bne.n	800b258 <ai_platform_network_get_error+0x5c>
 800b260:	4b1a      	ldr	r3, [pc, #104]	; (800b2cc <ai_platform_network_get_error+0xd0>)
 800b262:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b266:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b26a:	4b19      	ldr	r3, [pc, #100]	; (800b2d0 <ai_platform_network_get_error+0xd4>)
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d00d      	beq.n	800b28c <ai_platform_network_get_error+0x90>
 800b270:	e7fe      	b.n	800b270 <ai_platform_network_get_error+0x74>
 800b272:	4a18      	ldr	r2, [pc, #96]	; (800b2d4 <ai_platform_network_get_error+0xd8>)
 800b274:	2301      	movs	r3, #1
 800b276:	6093      	str	r3, [r2, #8]
 800b278:	6893      	ldr	r3, [r2, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1fc      	bne.n	800b278 <ai_platform_network_get_error+0x7c>
 800b27e:	4b13      	ldr	r3, [pc, #76]	; (800b2cc <ai_platform_network_get_error+0xd0>)
 800b280:	6013      	str	r3, [r2, #0]
 800b282:	6812      	ldr	r2, [r2, #0]
 800b284:	4b12      	ldr	r3, [pc, #72]	; (800b2d0 <ai_platform_network_get_error+0xd4>)
 800b286:	429a      	cmp	r2, r3
 800b288:	d000      	beq.n	800b28c <ai_platform_network_get_error+0x90>
 800b28a:	e7fe      	b.n	800b28a <ai_platform_network_get_error+0x8e>
 800b28c:	f7ff feea 	bl	800b064 <_ai_platform_release_crc>
 800b290:	f241 0010 	movw	r0, #4112	; 0x1010
 800b294:	bd10      	pop	{r4, pc}
 800b296:	4a0f      	ldr	r2, [pc, #60]	; (800b2d4 <ai_platform_network_get_error+0xd8>)
 800b298:	2301      	movs	r3, #1
 800b29a:	6093      	str	r3, [r2, #8]
 800b29c:	6893      	ldr	r3, [r2, #8]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1fc      	bne.n	800b29c <ai_platform_network_get_error+0xa0>
 800b2a2:	4b0a      	ldr	r3, [pc, #40]	; (800b2cc <ai_platform_network_get_error+0xd0>)
 800b2a4:	6013      	str	r3, [r2, #0]
 800b2a6:	6812      	ldr	r2, [r2, #0]
 800b2a8:	4b09      	ldr	r3, [pc, #36]	; (800b2d0 <ai_platform_network_get_error+0xd4>)
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d107      	bne.n	800b2be <ai_platform_network_get_error+0xc2>
 800b2ae:	f7ff fed9 	bl	800b064 <_ai_platform_release_crc>
 800b2b2:	f104 0010 	add.w	r0, r4, #16
 800b2b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2ba:	f000 be8b 	b.w	800bfd4 <core_get_error>
 800b2be:	e7fe      	b.n	800b2be <ai_platform_network_get_error+0xc2>
 800b2c0:	a1c00100 	.word	0xa1c00100
 800b2c4:	e0042000 	.word	0xe0042000
 800b2c8:	58024000 	.word	0x58024000
 800b2cc:	f407a5c2 	.word	0xf407a5c2
 800b2d0:	b5e8b5cd 	.word	0xb5e8b5cd
 800b2d4:	40023000 	.word	0x40023000

0800b2d8 <ai_platform_network_set_error>:
 800b2d8:	b110      	cbz	r0, 800b2e0 <ai_platform_network_set_error+0x8>
 800b2da:	3010      	adds	r0, #16
 800b2dc:	f000 be80 	b.w	800bfe0 <core_set_error>
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop

0800b2e4 <ai_platform_inputs_get>:
 800b2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e8:	b085      	sub	sp, #20
 800b2ea:	9102      	str	r1, [sp, #8]
 800b2ec:	b1f0      	cbz	r0, 800b32c <ai_platform_inputs_get+0x48>
 800b2ee:	4b62      	ldr	r3, [pc, #392]	; (800b478 <ai_platform_inputs_get+0x194>)
 800b2f0:	6802      	ldr	r2, [r0, #0]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	4607      	mov	r7, r0
 800b2f6:	d119      	bne.n	800b32c <ai_platform_inputs_get+0x48>
 800b2f8:	f7ff feb2 	bl	800b060 <_ai_platform_acquire_crc>
 800b2fc:	4b5f      	ldr	r3, [pc, #380]	; (800b47c <ai_platform_inputs_get+0x198>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b308:	d03d      	beq.n	800b386 <ai_platform_inputs_get+0xa2>
 800b30a:	4a5d      	ldr	r2, [pc, #372]	; (800b480 <ai_platform_inputs_get+0x19c>)
 800b30c:	2301      	movs	r3, #1
 800b30e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b312:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1fb      	bne.n	800b312 <ai_platform_inputs_get+0x2e>
 800b31a:	4b5a      	ldr	r3, [pc, #360]	; (800b484 <ai_platform_inputs_get+0x1a0>)
 800b31c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b320:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b324:	4b58      	ldr	r3, [pc, #352]	; (800b488 <ai_platform_inputs_get+0x1a4>)
 800b326:	429a      	cmp	r2, r3
 800b328:	d039      	beq.n	800b39e <ai_platform_inputs_get+0xba>
 800b32a:	e7fe      	b.n	800b32a <ai_platform_inputs_get+0x46>
 800b32c:	f7ff fe98 	bl	800b060 <_ai_platform_acquire_crc>
 800b330:	4b52      	ldr	r3, [pc, #328]	; (800b47c <ai_platform_inputs_get+0x198>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b33c:	d010      	beq.n	800b360 <ai_platform_inputs_get+0x7c>
 800b33e:	4a50      	ldr	r2, [pc, #320]	; (800b480 <ai_platform_inputs_get+0x19c>)
 800b340:	2301      	movs	r3, #1
 800b342:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b346:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1fb      	bne.n	800b346 <ai_platform_inputs_get+0x62>
 800b34e:	4b4d      	ldr	r3, [pc, #308]	; (800b484 <ai_platform_inputs_get+0x1a0>)
 800b350:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b354:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b358:	4b4b      	ldr	r3, [pc, #300]	; (800b488 <ai_platform_inputs_get+0x1a4>)
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d00d      	beq.n	800b37a <ai_platform_inputs_get+0x96>
 800b35e:	e7fe      	b.n	800b35e <ai_platform_inputs_get+0x7a>
 800b360:	4a4a      	ldr	r2, [pc, #296]	; (800b48c <ai_platform_inputs_get+0x1a8>)
 800b362:	2301      	movs	r3, #1
 800b364:	6093      	str	r3, [r2, #8]
 800b366:	6893      	ldr	r3, [r2, #8]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1fc      	bne.n	800b366 <ai_platform_inputs_get+0x82>
 800b36c:	4b45      	ldr	r3, [pc, #276]	; (800b484 <ai_platform_inputs_get+0x1a0>)
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	6812      	ldr	r2, [r2, #0]
 800b372:	4b45      	ldr	r3, [pc, #276]	; (800b488 <ai_platform_inputs_get+0x1a4>)
 800b374:	429a      	cmp	r2, r3
 800b376:	d000      	beq.n	800b37a <ai_platform_inputs_get+0x96>
 800b378:	e7fe      	b.n	800b378 <ai_platform_inputs_get+0x94>
 800b37a:	f7ff fe73 	bl	800b064 <_ai_platform_release_crc>
 800b37e:	2000      	movs	r0, #0
 800b380:	b005      	add	sp, #20
 800b382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b386:	4a41      	ldr	r2, [pc, #260]	; (800b48c <ai_platform_inputs_get+0x1a8>)
 800b388:	2301      	movs	r3, #1
 800b38a:	6093      	str	r3, [r2, #8]
 800b38c:	6893      	ldr	r3, [r2, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1fc      	bne.n	800b38c <ai_platform_inputs_get+0xa8>
 800b392:	4b3c      	ldr	r3, [pc, #240]	; (800b484 <ai_platform_inputs_get+0x1a0>)
 800b394:	6013      	str	r3, [r2, #0]
 800b396:	6812      	ldr	r2, [r2, #0]
 800b398:	4b3b      	ldr	r3, [pc, #236]	; (800b488 <ai_platform_inputs_get+0x1a4>)
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d155      	bne.n	800b44a <ai_platform_inputs_get+0x166>
 800b39e:	f7ff fe61 	bl	800b064 <_ai_platform_release_crc>
 800b3a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d051      	beq.n	800b44c <ai_platform_inputs_get+0x168>
 800b3a8:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800b3ac:	f1ba 0f00 	cmp.w	sl, #0
 800b3b0:	d04c      	beq.n	800b44c <ai_platform_inputs_get+0x168>
 800b3b2:	f04f 0b00 	mov.w	fp, #0
 800b3b6:	465d      	mov	r5, fp
 800b3b8:	9703      	str	r7, [sp, #12]
 800b3ba:	e016      	b.n	800b3ea <ai_platform_inputs_get+0x106>
 800b3bc:	9901      	ldr	r1, [sp, #4]
 800b3be:	2301      	movs	r3, #1
 800b3c0:	507b      	str	r3, [r7, r1]
 800b3c2:	69b1      	ldr	r1, [r6, #24]
 800b3c4:	6849      	ldr	r1, [r1, #4]
 800b3c6:	6121      	str	r1, [r4, #16]
 800b3c8:	f04f 0301 	mov.w	r3, #1
 800b3cc:	7523      	strb	r3, [r4, #20]
 800b3ce:	e9c4 c200 	strd	ip, r2, [r4]
 800b3d2:	6962      	ldr	r2, [r4, #20]
 800b3d4:	60a0      	str	r0, [r4, #8]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	f369 221f 	bfi	r2, r9, #8, #24
 800b3dc:	f8c4 8018 	str.w	r8, [r4, #24]
 800b3e0:	60e3      	str	r3, [r4, #12]
 800b3e2:	3501      	adds	r5, #1
 800b3e4:	f10b 0b1c 	add.w	fp, fp, #28
 800b3e8:	6162      	str	r2, [r4, #20]
 800b3ea:	f8ba 3000 	ldrh.w	r3, [sl]
 800b3ee:	42ab      	cmp	r3, r5
 800b3f0:	b2aa      	uxth	r2, r5
 800b3f2:	d93a      	bls.n	800b46a <ai_platform_inputs_get+0x186>
 800b3f4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b3f8:	00e9      	lsls	r1, r5, #3
 800b3fa:	9101      	str	r1, [sp, #4]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d034      	beq.n	800b46a <ai_platform_inputs_get+0x186>
 800b400:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b404:	2e00      	cmp	r6, #0
 800b406:	d030      	beq.n	800b46a <ai_platform_inputs_get+0x186>
 800b408:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b40c:	69b2      	ldr	r2, [r6, #24]
 800b40e:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800b412:	6810      	ldr	r0, [r2, #0]
 800b414:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800b418:	68b3      	ldr	r3, [r6, #8]
 800b41a:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800b41e:	f002 f81b 	bl	800d458 <ai_array_to_buffer_fmt>
 800b422:	69b1      	ldr	r1, [r6, #24]
 800b424:	4684      	mov	ip, r0
 800b426:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800b42a:	688a      	ldr	r2, [r1, #8]
 800b42c:	445c      	add	r4, fp
 800b42e:	2800      	cmp	r0, #0
 800b430:	d0c8      	beq.n	800b3c4 <ai_platform_inputs_get+0xe0>
 800b432:	2100      	movs	r1, #0
 800b434:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800b438:	6831      	ldr	r1, [r6, #0]
 800b43a:	6041      	str	r1, [r0, #4]
 800b43c:	b111      	cbz	r1, 800b444 <ai_platform_inputs_get+0x160>
 800b43e:	8849      	ldrh	r1, [r1, #2]
 800b440:	2900      	cmp	r1, #0
 800b442:	d1bb      	bne.n	800b3bc <ai_platform_inputs_get+0xd8>
 800b444:	69b1      	ldr	r1, [r6, #24]
 800b446:	2000      	movs	r0, #0
 800b448:	e7bc      	b.n	800b3c4 <ai_platform_inputs_get+0xe0>
 800b44a:	e7fe      	b.n	800b44a <ai_platform_inputs_get+0x166>
 800b44c:	2218      	movs	r2, #24
 800b44e:	2111      	movs	r1, #17
 800b450:	f107 0010 	add.w	r0, r7, #16
 800b454:	f000 fdc4 	bl	800bfe0 <core_set_error>
 800b458:	2200      	movs	r2, #0
 800b45a:	4610      	mov	r0, r2
 800b45c:	9b02      	ldr	r3, [sp, #8]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d08e      	beq.n	800b380 <ai_platform_inputs_get+0x9c>
 800b462:	801a      	strh	r2, [r3, #0]
 800b464:	b005      	add	sp, #20
 800b466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46a:	9f03      	ldr	r7, [sp, #12]
 800b46c:	2a00      	cmp	r2, #0
 800b46e:	d0ed      	beq.n	800b44c <ai_platform_inputs_get+0x168>
 800b470:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b474:	6858      	ldr	r0, [r3, #4]
 800b476:	e7f1      	b.n	800b45c <ai_platform_inputs_get+0x178>
 800b478:	a1c00100 	.word	0xa1c00100
 800b47c:	e0042000 	.word	0xe0042000
 800b480:	58024000 	.word	0x58024000
 800b484:	f407a5c2 	.word	0xf407a5c2
 800b488:	b5e8b5cd 	.word	0xb5e8b5cd
 800b48c:	40023000 	.word	0x40023000

0800b490 <ai_platform_outputs_get>:
 800b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	b085      	sub	sp, #20
 800b496:	9102      	str	r1, [sp, #8]
 800b498:	b1f0      	cbz	r0, 800b4d8 <ai_platform_outputs_get+0x48>
 800b49a:	4b5f      	ldr	r3, [pc, #380]	; (800b618 <ai_platform_outputs_get+0x188>)
 800b49c:	6802      	ldr	r2, [r0, #0]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	4607      	mov	r7, r0
 800b4a2:	d119      	bne.n	800b4d8 <ai_platform_outputs_get+0x48>
 800b4a4:	f7ff fddc 	bl	800b060 <_ai_platform_acquire_crc>
 800b4a8:	4b5c      	ldr	r3, [pc, #368]	; (800b61c <ai_platform_outputs_get+0x18c>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4b4:	d03d      	beq.n	800b532 <ai_platform_outputs_get+0xa2>
 800b4b6:	4a5a      	ldr	r2, [pc, #360]	; (800b620 <ai_platform_outputs_get+0x190>)
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b4be:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1fb      	bne.n	800b4be <ai_platform_outputs_get+0x2e>
 800b4c6:	4b57      	ldr	r3, [pc, #348]	; (800b624 <ai_platform_outputs_get+0x194>)
 800b4c8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b4cc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b4d0:	4b55      	ldr	r3, [pc, #340]	; (800b628 <ai_platform_outputs_get+0x198>)
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d039      	beq.n	800b54a <ai_platform_outputs_get+0xba>
 800b4d6:	e7fe      	b.n	800b4d6 <ai_platform_outputs_get+0x46>
 800b4d8:	f7ff fdc2 	bl	800b060 <_ai_platform_acquire_crc>
 800b4dc:	4b4f      	ldr	r3, [pc, #316]	; (800b61c <ai_platform_outputs_get+0x18c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4e8:	d010      	beq.n	800b50c <ai_platform_outputs_get+0x7c>
 800b4ea:	4a4d      	ldr	r2, [pc, #308]	; (800b620 <ai_platform_outputs_get+0x190>)
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b4f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1fb      	bne.n	800b4f2 <ai_platform_outputs_get+0x62>
 800b4fa:	4b4a      	ldr	r3, [pc, #296]	; (800b624 <ai_platform_outputs_get+0x194>)
 800b4fc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b500:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b504:	4b48      	ldr	r3, [pc, #288]	; (800b628 <ai_platform_outputs_get+0x198>)
 800b506:	429a      	cmp	r2, r3
 800b508:	d00d      	beq.n	800b526 <ai_platform_outputs_get+0x96>
 800b50a:	e7fe      	b.n	800b50a <ai_platform_outputs_get+0x7a>
 800b50c:	4a47      	ldr	r2, [pc, #284]	; (800b62c <ai_platform_outputs_get+0x19c>)
 800b50e:	2301      	movs	r3, #1
 800b510:	6093      	str	r3, [r2, #8]
 800b512:	6893      	ldr	r3, [r2, #8]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1fc      	bne.n	800b512 <ai_platform_outputs_get+0x82>
 800b518:	4b42      	ldr	r3, [pc, #264]	; (800b624 <ai_platform_outputs_get+0x194>)
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	6812      	ldr	r2, [r2, #0]
 800b51e:	4b42      	ldr	r3, [pc, #264]	; (800b628 <ai_platform_outputs_get+0x198>)
 800b520:	429a      	cmp	r2, r3
 800b522:	d000      	beq.n	800b526 <ai_platform_outputs_get+0x96>
 800b524:	e7fe      	b.n	800b524 <ai_platform_outputs_get+0x94>
 800b526:	f7ff fd9d 	bl	800b064 <_ai_platform_release_crc>
 800b52a:	2000      	movs	r0, #0
 800b52c:	b005      	add	sp, #20
 800b52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b532:	4a3e      	ldr	r2, [pc, #248]	; (800b62c <ai_platform_outputs_get+0x19c>)
 800b534:	2301      	movs	r3, #1
 800b536:	6093      	str	r3, [r2, #8]
 800b538:	6893      	ldr	r3, [r2, #8]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d1fc      	bne.n	800b538 <ai_platform_outputs_get+0xa8>
 800b53e:	4b39      	ldr	r3, [pc, #228]	; (800b624 <ai_platform_outputs_get+0x194>)
 800b540:	6013      	str	r3, [r2, #0]
 800b542:	6812      	ldr	r2, [r2, #0]
 800b544:	4b38      	ldr	r3, [pc, #224]	; (800b628 <ai_platform_outputs_get+0x198>)
 800b546:	429a      	cmp	r2, r3
 800b548:	d150      	bne.n	800b5ec <ai_platform_outputs_get+0x15c>
 800b54a:	f7ff fd8b 	bl	800b064 <_ai_platform_release_crc>
 800b54e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b550:	2b01      	cmp	r3, #1
 800b552:	d958      	bls.n	800b606 <ai_platform_outputs_get+0x176>
 800b554:	f04f 0b00 	mov.w	fp, #0
 800b558:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800b55c:	9703      	str	r7, [sp, #12]
 800b55e:	465d      	mov	r5, fp
 800b560:	e016      	b.n	800b590 <ai_platform_outputs_get+0x100>
 800b562:	9901      	ldr	r1, [sp, #4]
 800b564:	2301      	movs	r3, #1
 800b566:	507b      	str	r3, [r7, r1]
 800b568:	69b1      	ldr	r1, [r6, #24]
 800b56a:	6849      	ldr	r1, [r1, #4]
 800b56c:	6121      	str	r1, [r4, #16]
 800b56e:	f04f 0301 	mov.w	r3, #1
 800b572:	7523      	strb	r3, [r4, #20]
 800b574:	e9c4 c200 	strd	ip, r2, [r4]
 800b578:	6962      	ldr	r2, [r4, #20]
 800b57a:	60a0      	str	r0, [r4, #8]
 800b57c:	2300      	movs	r3, #0
 800b57e:	f369 221f 	bfi	r2, r9, #8, #24
 800b582:	f8c4 8018 	str.w	r8, [r4, #24]
 800b586:	60e3      	str	r3, [r4, #12]
 800b588:	3501      	adds	r5, #1
 800b58a:	f10b 0b1c 	add.w	fp, fp, #28
 800b58e:	6162      	str	r2, [r4, #20]
 800b590:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800b594:	42ab      	cmp	r3, r5
 800b596:	b2aa      	uxth	r2, r5
 800b598:	d929      	bls.n	800b5ee <ai_platform_outputs_get+0x15e>
 800b59a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800b59e:	00e9      	lsls	r1, r5, #3
 800b5a0:	9101      	str	r1, [sp, #4]
 800b5a2:	b323      	cbz	r3, 800b5ee <ai_platform_outputs_get+0x15e>
 800b5a4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b5a8:	b30e      	cbz	r6, 800b5ee <ai_platform_outputs_get+0x15e>
 800b5aa:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b5ae:	69b2      	ldr	r2, [r6, #24]
 800b5b0:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800b5b4:	6810      	ldr	r0, [r2, #0]
 800b5b6:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800b5ba:	68b3      	ldr	r3, [r6, #8]
 800b5bc:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800b5c0:	f001 ff4a 	bl	800d458 <ai_array_to_buffer_fmt>
 800b5c4:	69b1      	ldr	r1, [r6, #24]
 800b5c6:	4684      	mov	ip, r0
 800b5c8:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800b5cc:	688a      	ldr	r2, [r1, #8]
 800b5ce:	445c      	add	r4, fp
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	d0ca      	beq.n	800b56a <ai_platform_outputs_get+0xda>
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800b5da:	6831      	ldr	r1, [r6, #0]
 800b5dc:	6041      	str	r1, [r0, #4]
 800b5de:	b111      	cbz	r1, 800b5e6 <ai_platform_outputs_get+0x156>
 800b5e0:	8849      	ldrh	r1, [r1, #2]
 800b5e2:	2900      	cmp	r1, #0
 800b5e4:	d1bd      	bne.n	800b562 <ai_platform_outputs_get+0xd2>
 800b5e6:	69b1      	ldr	r1, [r6, #24]
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	e7be      	b.n	800b56a <ai_platform_outputs_get+0xda>
 800b5ec:	e7fe      	b.n	800b5ec <ai_platform_outputs_get+0x15c>
 800b5ee:	9f03      	ldr	r7, [sp, #12]
 800b5f0:	b14a      	cbz	r2, 800b606 <ai_platform_outputs_get+0x176>
 800b5f2:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b5f6:	6858      	ldr	r0, [r3, #4]
 800b5f8:	9b02      	ldr	r3, [sp, #8]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d096      	beq.n	800b52c <ai_platform_outputs_get+0x9c>
 800b5fe:	801a      	strh	r2, [r3, #0]
 800b600:	b005      	add	sp, #20
 800b602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b606:	2218      	movs	r2, #24
 800b608:	2111      	movs	r1, #17
 800b60a:	f107 0010 	add.w	r0, r7, #16
 800b60e:	f000 fce7 	bl	800bfe0 <core_set_error>
 800b612:	2200      	movs	r2, #0
 800b614:	4610      	mov	r0, r2
 800b616:	e7ef      	b.n	800b5f8 <ai_platform_outputs_get+0x168>
 800b618:	a1c00100 	.word	0xa1c00100
 800b61c:	e0042000 	.word	0xe0042000
 800b620:	58024000 	.word	0x58024000
 800b624:	f407a5c2 	.word	0xf407a5c2
 800b628:	b5e8b5cd 	.word	0xb5e8b5cd
 800b62c:	40023000 	.word	0x40023000

0800b630 <ai_platform_network_create>:
 800b630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b634:	b083      	sub	sp, #12
 800b636:	4606      	mov	r6, r0
 800b638:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800b63c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800b640:	4615      	mov	r5, r2
 800b642:	461f      	mov	r7, r3
 800b644:	f7ff fd0c 	bl	800b060 <_ai_platform_acquire_crc>
 800b648:	b188      	cbz	r0, 800b66e <ai_platform_network_create+0x3e>
 800b64a:	4a5d      	ldr	r2, [pc, #372]	; (800b7c0 <ai_platform_network_create+0x190>)
 800b64c:	6812      	ldr	r2, [r2, #0]
 800b64e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b652:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b656:	4603      	mov	r3, r0
 800b658:	d00e      	beq.n	800b678 <ai_platform_network_create+0x48>
 800b65a:	4a5a      	ldr	r2, [pc, #360]	; (800b7c4 <ai_platform_network_create+0x194>)
 800b65c:	2118      	movs	r1, #24
 800b65e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800b662:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800b666:	2918      	cmp	r1, #24
 800b668:	d018      	beq.n	800b69c <ai_platform_network_create+0x6c>
 800b66a:	f7ff fcfb 	bl	800b064 <_ai_platform_release_crc>
 800b66e:	f244 1033 	movw	r0, #16691	; 0x4133
 800b672:	b003      	add	sp, #12
 800b674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b678:	4a53      	ldr	r2, [pc, #332]	; (800b7c8 <ai_platform_network_create+0x198>)
 800b67a:	2101      	movs	r1, #1
 800b67c:	6091      	str	r1, [r2, #8]
 800b67e:	2114      	movs	r1, #20
 800b680:	e001      	b.n	800b686 <ai_platform_network_create+0x56>
 800b682:	3901      	subs	r1, #1
 800b684:	d002      	beq.n	800b68c <ai_platform_network_create+0x5c>
 800b686:	6894      	ldr	r4, [r2, #8]
 800b688:	2c00      	cmp	r4, #0
 800b68a:	d1fa      	bne.n	800b682 <ai_platform_network_create+0x52>
 800b68c:	4a4e      	ldr	r2, [pc, #312]	; (800b7c8 <ai_platform_network_create+0x198>)
 800b68e:	6891      	ldr	r1, [r2, #8]
 800b690:	b911      	cbnz	r1, 800b698 <ai_platform_network_create+0x68>
 800b692:	6812      	ldr	r2, [r2, #0]
 800b694:	3201      	adds	r2, #1
 800b696:	d008      	beq.n	800b6aa <ai_platform_network_create+0x7a>
 800b698:	4618      	mov	r0, r3
 800b69a:	e7e6      	b.n	800b66a <ai_platform_network_create+0x3a>
 800b69c:	2101      	movs	r1, #1
 800b69e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800b6a2:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800b6a6:	2900      	cmp	r1, #0
 800b6a8:	d1fb      	bne.n	800b6a2 <ai_platform_network_create+0x72>
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7ff fcda 	bl	800b064 <_ai_platform_release_crc>
 800b6b0:	f7ff fcd6 	bl	800b060 <_ai_platform_acquire_crc>
 800b6b4:	4b42      	ldr	r3, [pc, #264]	; (800b7c0 <ai_platform_network_create+0x190>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b6bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6c0:	d010      	beq.n	800b6e4 <ai_platform_network_create+0xb4>
 800b6c2:	4b40      	ldr	r3, [pc, #256]	; (800b7c4 <ai_platform_network_create+0x194>)
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800b6ca:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 800b6ce:	2900      	cmp	r1, #0
 800b6d0:	d1fb      	bne.n	800b6ca <ai_platform_network_create+0x9a>
 800b6d2:	4a3e      	ldr	r2, [pc, #248]	; (800b7cc <ai_platform_network_create+0x19c>)
 800b6d4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800b6d8:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800b6dc:	4b3c      	ldr	r3, [pc, #240]	; (800b7d0 <ai_platform_network_create+0x1a0>)
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d00c      	beq.n	800b6fc <ai_platform_network_create+0xcc>
 800b6e2:	e7fe      	b.n	800b6e2 <ai_platform_network_create+0xb2>
 800b6e4:	4a38      	ldr	r2, [pc, #224]	; (800b7c8 <ai_platform_network_create+0x198>)
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	6093      	str	r3, [r2, #8]
 800b6ea:	6893      	ldr	r3, [r2, #8]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1fc      	bne.n	800b6ea <ai_platform_network_create+0xba>
 800b6f0:	4b36      	ldr	r3, [pc, #216]	; (800b7cc <ai_platform_network_create+0x19c>)
 800b6f2:	6013      	str	r3, [r2, #0]
 800b6f4:	6812      	ldr	r2, [r2, #0]
 800b6f6:	4b36      	ldr	r3, [pc, #216]	; (800b7d0 <ai_platform_network_create+0x1a0>)
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d122      	bne.n	800b742 <ai_platform_network_create+0x112>
 800b6fc:	f7ff fcb2 	bl	800b064 <_ai_platform_release_crc>
 800b700:	b38e      	cbz	r6, 800b766 <ai_platform_network_create+0x136>
 800b702:	4b34      	ldr	r3, [pc, #208]	; (800b7d4 <ai_platform_network_create+0x1a4>)
 800b704:	602b      	str	r3, [r5, #0]
 800b706:	6035      	str	r5, [r6, #0]
 800b708:	f000 fc62 	bl	800bfd0 <core_init>
 800b70c:	b1d0      	cbz	r0, 800b744 <ai_platform_network_create+0x114>
 800b70e:	f7ff fca7 	bl	800b060 <_ai_platform_acquire_crc>
 800b712:	4b2b      	ldr	r3, [pc, #172]	; (800b7c0 <ai_platform_network_create+0x190>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b71a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b71e:	d025      	beq.n	800b76c <ai_platform_network_create+0x13c>
 800b720:	4a28      	ldr	r2, [pc, #160]	; (800b7c4 <ai_platform_network_create+0x194>)
 800b722:	2301      	movs	r3, #1
 800b724:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b728:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1fb      	bne.n	800b728 <ai_platform_network_create+0xf8>
 800b730:	4b26      	ldr	r3, [pc, #152]	; (800b7cc <ai_platform_network_create+0x19c>)
 800b732:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b736:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b73a:	4b25      	ldr	r3, [pc, #148]	; (800b7d0 <ai_platform_network_create+0x1a0>)
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d022      	beq.n	800b786 <ai_platform_network_create+0x156>
 800b740:	e7fe      	b.n	800b740 <ai_platform_network_create+0x110>
 800b742:	e7fe      	b.n	800b742 <ai_platform_network_create+0x112>
 800b744:	2430      	movs	r4, #48	; 0x30
 800b746:	2300      	movs	r3, #0
 800b748:	6033      	str	r3, [r6, #0]
 800b74a:	2610      	movs	r6, #16
 800b74c:	464a      	mov	r2, r9
 800b74e:	4641      	mov	r1, r8
 800b750:	4638      	mov	r0, r7
 800b752:	f001 ff27 	bl	800d5a4 <ai_version_get>
 800b756:	4603      	mov	r3, r0
 800b758:	2000      	movs	r0, #0
 800b75a:	f364 0007 	bfi	r0, r4, #0, #8
 800b75e:	64ab      	str	r3, [r5, #72]	; 0x48
 800b760:	f366 201f 	bfi	r0, r6, #8, #24
 800b764:	e785      	b.n	800b672 <ai_platform_network_create+0x42>
 800b766:	f241 0010 	movw	r0, #4112	; 0x1010
 800b76a:	e782      	b.n	800b672 <ai_platform_network_create+0x42>
 800b76c:	4a16      	ldr	r2, [pc, #88]	; (800b7c8 <ai_platform_network_create+0x198>)
 800b76e:	2301      	movs	r3, #1
 800b770:	6093      	str	r3, [r2, #8]
 800b772:	6893      	ldr	r3, [r2, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1fc      	bne.n	800b772 <ai_platform_network_create+0x142>
 800b778:	4b14      	ldr	r3, [pc, #80]	; (800b7cc <ai_platform_network_create+0x19c>)
 800b77a:	6013      	str	r3, [r2, #0]
 800b77c:	6812      	ldr	r2, [r2, #0]
 800b77e:	4b14      	ldr	r3, [pc, #80]	; (800b7d0 <ai_platform_network_create+0x1a0>)
 800b780:	429a      	cmp	r2, r3
 800b782:	d000      	beq.n	800b786 <ai_platform_network_create+0x156>
 800b784:	e7fe      	b.n	800b784 <ai_platform_network_create+0x154>
 800b786:	f7ff fc6d 	bl	800b064 <_ai_platform_release_crc>
 800b78a:	2200      	movs	r2, #0
 800b78c:	4641      	mov	r1, r8
 800b78e:	4638      	mov	r0, r7
 800b790:	f001 ff08 	bl	800d5a4 <ai_version_get>
 800b794:	2200      	movs	r2, #0
 800b796:	4604      	mov	r4, r0
 800b798:	2105      	movs	r1, #5
 800b79a:	2001      	movs	r0, #1
 800b79c:	f001 ff02 	bl	800d5a4 <ai_version_get>
 800b7a0:	4284      	cmp	r4, r0
 800b7a2:	d001      	beq.n	800b7a8 <ai_platform_network_create+0x178>
 800b7a4:	2401      	movs	r4, #1
 800b7a6:	e7ce      	b.n	800b746 <ai_platform_network_create+0x116>
 800b7a8:	4b0b      	ldr	r3, [pc, #44]	; (800b7d8 <ai_platform_network_create+0x1a8>)
 800b7aa:	9301      	str	r3, [sp, #4]
 800b7ac:	a801      	add	r0, sp, #4
 800b7ae:	f000 fc23 	bl	800bff8 <ai_check_custom_types>
 800b7b2:	b110      	cbz	r0, 800b7ba <ai_platform_network_create+0x18a>
 800b7b4:	2600      	movs	r6, #0
 800b7b6:	4634      	mov	r4, r6
 800b7b8:	e7c8      	b.n	800b74c <ai_platform_network_create+0x11c>
 800b7ba:	2402      	movs	r4, #2
 800b7bc:	e7c3      	b.n	800b746 <ai_platform_network_create+0x116>
 800b7be:	bf00      	nop
 800b7c0:	e0042000 	.word	0xe0042000
 800b7c4:	58024000 	.word	0x58024000
 800b7c8:	40023000 	.word	0x40023000
 800b7cc:	f407a5c2 	.word	0xf407a5c2
 800b7d0:	b5e8b5cd 	.word	0xb5e8b5cd
 800b7d4:	a1c00100 	.word	0xa1c00100
 800b7d8:	84048403 	.word	0x84048403

0800b7dc <ai_platform_network_init>:
 800b7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e0:	b1f8      	cbz	r0, 800b822 <ai_platform_network_init+0x46>
 800b7e2:	4b6e      	ldr	r3, [pc, #440]	; (800b99c <ai_platform_network_init+0x1c0>)
 800b7e4:	6802      	ldr	r2, [r0, #0]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	4604      	mov	r4, r0
 800b7ea:	d11a      	bne.n	800b822 <ai_platform_network_init+0x46>
 800b7ec:	460e      	mov	r6, r1
 800b7ee:	f7ff fc37 	bl	800b060 <_ai_platform_acquire_crc>
 800b7f2:	4b6b      	ldr	r3, [pc, #428]	; (800b9a0 <ai_platform_network_init+0x1c4>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b7fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7fe:	d03d      	beq.n	800b87c <ai_platform_network_init+0xa0>
 800b800:	4a68      	ldr	r2, [pc, #416]	; (800b9a4 <ai_platform_network_init+0x1c8>)
 800b802:	2301      	movs	r3, #1
 800b804:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b808:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d1fb      	bne.n	800b808 <ai_platform_network_init+0x2c>
 800b810:	4b65      	ldr	r3, [pc, #404]	; (800b9a8 <ai_platform_network_init+0x1cc>)
 800b812:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b816:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b81a:	4b64      	ldr	r3, [pc, #400]	; (800b9ac <ai_platform_network_init+0x1d0>)
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d039      	beq.n	800b894 <ai_platform_network_init+0xb8>
 800b820:	e7fe      	b.n	800b820 <ai_platform_network_init+0x44>
 800b822:	f7ff fc1d 	bl	800b060 <_ai_platform_acquire_crc>
 800b826:	4b5e      	ldr	r3, [pc, #376]	; (800b9a0 <ai_platform_network_init+0x1c4>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b82e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b832:	d010      	beq.n	800b856 <ai_platform_network_init+0x7a>
 800b834:	4a5b      	ldr	r2, [pc, #364]	; (800b9a4 <ai_platform_network_init+0x1c8>)
 800b836:	2301      	movs	r3, #1
 800b838:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b83c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1fb      	bne.n	800b83c <ai_platform_network_init+0x60>
 800b844:	4b58      	ldr	r3, [pc, #352]	; (800b9a8 <ai_platform_network_init+0x1cc>)
 800b846:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b84a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b84e:	4b57      	ldr	r3, [pc, #348]	; (800b9ac <ai_platform_network_init+0x1d0>)
 800b850:	429a      	cmp	r2, r3
 800b852:	d00d      	beq.n	800b870 <ai_platform_network_init+0x94>
 800b854:	e7fe      	b.n	800b854 <ai_platform_network_init+0x78>
 800b856:	4a56      	ldr	r2, [pc, #344]	; (800b9b0 <ai_platform_network_init+0x1d4>)
 800b858:	2301      	movs	r3, #1
 800b85a:	6093      	str	r3, [r2, #8]
 800b85c:	6893      	ldr	r3, [r2, #8]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1fc      	bne.n	800b85c <ai_platform_network_init+0x80>
 800b862:	4b51      	ldr	r3, [pc, #324]	; (800b9a8 <ai_platform_network_init+0x1cc>)
 800b864:	6013      	str	r3, [r2, #0]
 800b866:	6812      	ldr	r2, [r2, #0]
 800b868:	4b50      	ldr	r3, [pc, #320]	; (800b9ac <ai_platform_network_init+0x1d0>)
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d000      	beq.n	800b870 <ai_platform_network_init+0x94>
 800b86e:	e7fe      	b.n	800b86e <ai_platform_network_init+0x92>
 800b870:	f7ff fbf8 	bl	800b064 <_ai_platform_release_crc>
 800b874:	2600      	movs	r6, #0
 800b876:	4630      	mov	r0, r6
 800b878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b87c:	4a4c      	ldr	r2, [pc, #304]	; (800b9b0 <ai_platform_network_init+0x1d4>)
 800b87e:	2301      	movs	r3, #1
 800b880:	6093      	str	r3, [r2, #8]
 800b882:	6893      	ldr	r3, [r2, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1fc      	bne.n	800b882 <ai_platform_network_init+0xa6>
 800b888:	4b47      	ldr	r3, [pc, #284]	; (800b9a8 <ai_platform_network_init+0x1cc>)
 800b88a:	6013      	str	r3, [r2, #0]
 800b88c:	6812      	ldr	r2, [r2, #0]
 800b88e:	4b47      	ldr	r3, [pc, #284]	; (800b9ac <ai_platform_network_init+0x1d0>)
 800b890:	429a      	cmp	r2, r3
 800b892:	d11c      	bne.n	800b8ce <ai_platform_network_init+0xf2>
 800b894:	f7ff fbe6 	bl	800b064 <_ai_platform_release_crc>
 800b898:	2e00      	cmp	r6, #0
 800b89a:	d06f      	beq.n	800b97c <ai_platform_network_init+0x1a0>
 800b89c:	4b45      	ldr	r3, [pc, #276]	; (800b9b4 <ai_platform_network_init+0x1d8>)
 800b89e:	6832      	ldr	r2, [r6, #0]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d115      	bne.n	800b8d0 <ai_platform_network_init+0xf4>
 800b8a4:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800b8a8:	6933      	ldr	r3, [r6, #16]
 800b8aa:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800b8ae:	89f7      	ldrh	r7, [r6, #14]
 800b8b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8b2:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	84e7      	strh	r7, [r4, #38]	; 0x26
 800b8ba:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800b8be:	60e3      	str	r3, [r4, #12]
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	4626      	mov	r6, r4
 800b8c4:	f000 fbc2 	bl	800c04c <ai_layers_init_all>
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ce:	e7fe      	b.n	800b8ce <ai_platform_network_init+0xf2>
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	4635      	mov	r5, r6
 800b8d6:	6876      	ldr	r6, [r6, #4]
 800b8d8:	f7ff fb74 	bl	800afc4 <ai_buffer_get_size>
 800b8dc:	f105 081c 	add.w	r8, r5, #28
 800b8e0:	4681      	mov	r9, r0
 800b8e2:	2101      	movs	r1, #1
 800b8e4:	4640      	mov	r0, r8
 800b8e6:	6a2f      	ldr	r7, [r5, #32]
 800b8e8:	f7ff fb6c 	bl	800afc4 <ai_buffer_get_size>
 800b8ec:	f1b9 0f00 	cmp.w	r9, #0
 800b8f0:	d025      	beq.n	800b93e <ai_platform_network_init+0x162>
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	4696      	mov	lr, r2
 800b8f6:	bb30      	cbnz	r0, 800b946 <ai_platform_network_init+0x16a>
 800b8f8:	4680      	mov	r8, r0
 800b8fa:	4607      	mov	r7, r0
 800b8fc:	b376      	cbz	r6, 800b95c <ai_platform_network_init+0x180>
 800b8fe:	8be3      	ldrh	r3, [r4, #30]
 800b900:	4573      	cmp	r3, lr
 800b902:	d323      	bcc.n	800b94c <ai_platform_network_init+0x170>
 800b904:	b142      	cbz	r2, 800b918 <ai_platform_network_init+0x13c>
 800b906:	46ac      	mov	ip, r5
 800b908:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b90c:	6a25      	ldr	r5, [r4, #32]
 800b90e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b910:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800b914:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800b918:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800b91a:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800b91e:	2600      	movs	r6, #0
 800b920:	42bb      	cmp	r3, r7
 800b922:	83a6      	strh	r6, [r4, #28]
 800b924:	d323      	bcc.n	800b96e <ai_platform_network_init+0x192>
 800b926:	b37f      	cbz	r7, 800b988 <ai_platform_network_init+0x1ac>
 800b928:	46c4      	mov	ip, r8
 800b92a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b92e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800b930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b932:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800b936:	46b6      	mov	lr, r6
 800b938:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800b93c:	e7bb      	b.n	800b8b6 <ai_platform_network_init+0xda>
 800b93e:	464a      	mov	r2, r9
 800b940:	46ce      	mov	lr, r9
 800b942:	464d      	mov	r5, r9
 800b944:	e7d7      	b.n	800b8f6 <ai_platform_network_init+0x11a>
 800b946:	b30f      	cbz	r7, 800b98c <ai_platform_network_init+0x1b0>
 800b948:	2701      	movs	r7, #1
 800b94a:	e7d7      	b.n	800b8fc <ai_platform_network_init+0x120>
 800b94c:	2212      	movs	r2, #18
 800b94e:	2116      	movs	r1, #22
 800b950:	f104 0010 	add.w	r0, r4, #16
 800b954:	f000 fb44 	bl	800bfe0 <core_set_error>
 800b958:	2600      	movs	r6, #0
 800b95a:	e78c      	b.n	800b876 <ai_platform_network_init+0x9a>
 800b95c:	f1b9 0f00 	cmp.w	r9, #0
 800b960:	d0cd      	beq.n	800b8fe <ai_platform_network_init+0x122>
 800b962:	2110      	movs	r1, #16
 800b964:	2212      	movs	r2, #18
 800b966:	1860      	adds	r0, r4, r1
 800b968:	f000 fb3a 	bl	800bfe0 <core_set_error>
 800b96c:	e783      	b.n	800b876 <ai_platform_network_init+0x9a>
 800b96e:	2213      	movs	r2, #19
 800b970:	2116      	movs	r1, #22
 800b972:	f104 0010 	add.w	r0, r4, #16
 800b976:	f000 fb33 	bl	800bfe0 <core_set_error>
 800b97a:	e77c      	b.n	800b876 <ai_platform_network_init+0x9a>
 800b97c:	2110      	movs	r1, #16
 800b97e:	2211      	movs	r2, #17
 800b980:	1860      	adds	r0, r4, r1
 800b982:	f000 fb2d 	bl	800bfe0 <core_set_error>
 800b986:	e776      	b.n	800b876 <ai_platform_network_init+0x9a>
 800b988:	46be      	mov	lr, r7
 800b98a:	e794      	b.n	800b8b6 <ai_platform_network_init+0xda>
 800b98c:	2110      	movs	r1, #16
 800b98e:	2213      	movs	r2, #19
 800b990:	1860      	adds	r0, r4, r1
 800b992:	f000 fb25 	bl	800bfe0 <core_set_error>
 800b996:	463e      	mov	r6, r7
 800b998:	e76d      	b.n	800b876 <ai_platform_network_init+0x9a>
 800b99a:	bf00      	nop
 800b99c:	a1c00100 	.word	0xa1c00100
 800b9a0:	e0042000 	.word	0xe0042000
 800b9a4:	58024000 	.word	0x58024000
 800b9a8:	f407a5c2 	.word	0xf407a5c2
 800b9ac:	b5e8b5cd 	.word	0xb5e8b5cd
 800b9b0:	40023000 	.word	0x40023000
 800b9b4:	a1facade 	.word	0xa1facade

0800b9b8 <ai_platform_network_post_init>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	b1f0      	cbz	r0, 800b9fa <ai_platform_network_post_init+0x42>
 800b9bc:	4b3c      	ldr	r3, [pc, #240]	; (800bab0 <ai_platform_network_post_init+0xf8>)
 800b9be:	6802      	ldr	r2, [r0, #0]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	d119      	bne.n	800b9fa <ai_platform_network_post_init+0x42>
 800b9c6:	f7ff fb4b 	bl	800b060 <_ai_platform_acquire_crc>
 800b9ca:	4b3a      	ldr	r3, [pc, #232]	; (800bab4 <ai_platform_network_post_init+0xfc>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b9d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9d6:	d03b      	beq.n	800ba50 <ai_platform_network_post_init+0x98>
 800b9d8:	4a37      	ldr	r2, [pc, #220]	; (800bab8 <ai_platform_network_post_init+0x100>)
 800b9da:	2301      	movs	r3, #1
 800b9dc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b9e0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d1fb      	bne.n	800b9e0 <ai_platform_network_post_init+0x28>
 800b9e8:	4b34      	ldr	r3, [pc, #208]	; (800babc <ai_platform_network_post_init+0x104>)
 800b9ea:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b9ee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b9f2:	4b33      	ldr	r3, [pc, #204]	; (800bac0 <ai_platform_network_post_init+0x108>)
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d037      	beq.n	800ba68 <ai_platform_network_post_init+0xb0>
 800b9f8:	e7fe      	b.n	800b9f8 <ai_platform_network_post_init+0x40>
 800b9fa:	f7ff fb31 	bl	800b060 <_ai_platform_acquire_crc>
 800b9fe:	4b2d      	ldr	r3, [pc, #180]	; (800bab4 <ai_platform_network_post_init+0xfc>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba0a:	d010      	beq.n	800ba2e <ai_platform_network_post_init+0x76>
 800ba0c:	4a2a      	ldr	r2, [pc, #168]	; (800bab8 <ai_platform_network_post_init+0x100>)
 800ba0e:	2301      	movs	r3, #1
 800ba10:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ba14:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d1fb      	bne.n	800ba14 <ai_platform_network_post_init+0x5c>
 800ba1c:	4b27      	ldr	r3, [pc, #156]	; (800babc <ai_platform_network_post_init+0x104>)
 800ba1e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ba22:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ba26:	4b26      	ldr	r3, [pc, #152]	; (800bac0 <ai_platform_network_post_init+0x108>)
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d00d      	beq.n	800ba48 <ai_platform_network_post_init+0x90>
 800ba2c:	e7fe      	b.n	800ba2c <ai_platform_network_post_init+0x74>
 800ba2e:	4a25      	ldr	r2, [pc, #148]	; (800bac4 <ai_platform_network_post_init+0x10c>)
 800ba30:	2301      	movs	r3, #1
 800ba32:	6093      	str	r3, [r2, #8]
 800ba34:	6893      	ldr	r3, [r2, #8]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1fc      	bne.n	800ba34 <ai_platform_network_post_init+0x7c>
 800ba3a:	4b20      	ldr	r3, [pc, #128]	; (800babc <ai_platform_network_post_init+0x104>)
 800ba3c:	6013      	str	r3, [r2, #0]
 800ba3e:	6812      	ldr	r2, [r2, #0]
 800ba40:	4b1f      	ldr	r3, [pc, #124]	; (800bac0 <ai_platform_network_post_init+0x108>)
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d000      	beq.n	800ba48 <ai_platform_network_post_init+0x90>
 800ba46:	e7fe      	b.n	800ba46 <ai_platform_network_post_init+0x8e>
 800ba48:	f7ff fb0c 	bl	800b064 <_ai_platform_release_crc>
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	bd38      	pop	{r3, r4, r5, pc}
 800ba50:	4a1c      	ldr	r2, [pc, #112]	; (800bac4 <ai_platform_network_post_init+0x10c>)
 800ba52:	2301      	movs	r3, #1
 800ba54:	6093      	str	r3, [r2, #8]
 800ba56:	6893      	ldr	r3, [r2, #8]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1fc      	bne.n	800ba56 <ai_platform_network_post_init+0x9e>
 800ba5c:	4b17      	ldr	r3, [pc, #92]	; (800babc <ai_platform_network_post_init+0x104>)
 800ba5e:	6013      	str	r3, [r2, #0]
 800ba60:	6812      	ldr	r2, [r2, #0]
 800ba62:	4b17      	ldr	r3, [pc, #92]	; (800bac0 <ai_platform_network_post_init+0x108>)
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d11a      	bne.n	800ba9e <ai_platform_network_post_init+0xe6>
 800ba68:	f7ff fafc 	bl	800b064 <_ai_platform_release_crc>
 800ba6c:	68e3      	ldr	r3, [r4, #12]
 800ba6e:	f013 0502 	ands.w	r5, r3, #2
 800ba72:	d015      	beq.n	800baa0 <ai_platform_network_post_init+0xe8>
 800ba74:	4620      	mov	r0, r4
 800ba76:	f000 faf7 	bl	800c068 <ai_layers_post_init_all>
 800ba7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba7c:	b16b      	cbz	r3, 800ba9a <ai_platform_network_post_init+0xe2>
 800ba7e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800ba80:	e007      	b.n	800ba92 <ai_platform_network_post_init+0xda>
 800ba82:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800ba86:	4798      	blx	r3
 800ba88:	692b      	ldr	r3, [r5, #16]
 800ba8a:	42ab      	cmp	r3, r5
 800ba8c:	d005      	beq.n	800ba9a <ai_platform_network_post_init+0xe2>
 800ba8e:	b123      	cbz	r3, 800ba9a <ai_platform_network_post_init+0xe2>
 800ba90:	461d      	mov	r5, r3
 800ba92:	4629      	mov	r1, r5
 800ba94:	2000      	movs	r0, #0
 800ba96:	2d00      	cmp	r5, #0
 800ba98:	d1f3      	bne.n	800ba82 <ai_platform_network_post_init+0xca>
 800ba9a:	2001      	movs	r0, #1
 800ba9c:	bd38      	pop	{r3, r4, r5, pc}
 800ba9e:	e7fe      	b.n	800ba9e <ai_platform_network_post_init+0xe6>
 800baa0:	2210      	movs	r2, #16
 800baa2:	2111      	movs	r1, #17
 800baa4:	18a0      	adds	r0, r4, r2
 800baa6:	f000 fa9b 	bl	800bfe0 <core_set_error>
 800baaa:	4628      	mov	r0, r5
 800baac:	bd38      	pop	{r3, r4, r5, pc}
 800baae:	bf00      	nop
 800bab0:	a1c00100 	.word	0xa1c00100
 800bab4:	e0042000 	.word	0xe0042000
 800bab8:	58024000 	.word	0x58024000
 800babc:	f407a5c2 	.word	0xf407a5c2
 800bac0:	b5e8b5cd 	.word	0xb5e8b5cd
 800bac4:	40023000 	.word	0x40023000

0800bac8 <ai_platform_network_process>:
 800bac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bacc:	460e      	mov	r6, r1
 800bace:	b085      	sub	sp, #20
 800bad0:	4693      	mov	fp, r2
 800bad2:	4605      	mov	r5, r0
 800bad4:	b120      	cbz	r0, 800bae0 <ai_platform_network_process+0x18>
 800bad6:	4bb8      	ldr	r3, [pc, #736]	; (800bdb8 <ai_platform_network_process+0x2f0>)
 800bad8:	6802      	ldr	r2, [r0, #0]
 800bada:	429a      	cmp	r2, r3
 800badc:	bf18      	it	ne
 800bade:	2500      	movne	r5, #0
 800bae0:	f7ff fabe 	bl	800b060 <_ai_platform_acquire_crc>
 800bae4:	4bb5      	ldr	r3, [pc, #724]	; (800bdbc <ai_platform_network_process+0x2f4>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800baec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800baf0:	d010      	beq.n	800bb14 <ai_platform_network_process+0x4c>
 800baf2:	4ab3      	ldr	r2, [pc, #716]	; (800bdc0 <ai_platform_network_process+0x2f8>)
 800baf4:	2301      	movs	r3, #1
 800baf6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bafa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1fb      	bne.n	800bafa <ai_platform_network_process+0x32>
 800bb02:	4bb0      	ldr	r3, [pc, #704]	; (800bdc4 <ai_platform_network_process+0x2fc>)
 800bb04:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800bb08:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bb0c:	4bae      	ldr	r3, [pc, #696]	; (800bdc8 <ai_platform_network_process+0x300>)
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d00d      	beq.n	800bb2e <ai_platform_network_process+0x66>
 800bb12:	e7fe      	b.n	800bb12 <ai_platform_network_process+0x4a>
 800bb14:	4aad      	ldr	r2, [pc, #692]	; (800bdcc <ai_platform_network_process+0x304>)
 800bb16:	2301      	movs	r3, #1
 800bb18:	6093      	str	r3, [r2, #8]
 800bb1a:	6893      	ldr	r3, [r2, #8]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d1fc      	bne.n	800bb1a <ai_platform_network_process+0x52>
 800bb20:	4ba8      	ldr	r3, [pc, #672]	; (800bdc4 <ai_platform_network_process+0x2fc>)
 800bb22:	6013      	str	r3, [r2, #0]
 800bb24:	6812      	ldr	r2, [r2, #0]
 800bb26:	4ba8      	ldr	r3, [pc, #672]	; (800bdc8 <ai_platform_network_process+0x300>)
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	f040 812c 	bne.w	800bd86 <ai_platform_network_process+0x2be>
 800bb2e:	f7ff fa99 	bl	800b064 <_ai_platform_release_crc>
 800bb32:	2d00      	cmp	r5, #0
 800bb34:	f000 8154 	beq.w	800bde0 <ai_platform_network_process+0x318>
 800bb38:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f000 8124 	beq.w	800bd88 <ai_platform_network_process+0x2c0>
 800bb40:	68eb      	ldr	r3, [r5, #12]
 800bb42:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800bb46:	f003 0303 	and.w	r3, r3, #3
 800bb4a:	2700      	movs	r7, #0
 800bb4c:	2b03      	cmp	r3, #3
 800bb4e:	616f      	str	r7, [r5, #20]
 800bb50:	f040 813e 	bne.w	800bdd0 <ai_platform_network_process+0x308>
 800bb54:	2e00      	cmp	r6, #0
 800bb56:	f000 811d 	beq.w	800bd94 <ai_platform_network_process+0x2cc>
 800bb5a:	f1ba 0f00 	cmp.w	sl, #0
 800bb5e:	f000 8119 	beq.w	800bd94 <ai_platform_network_process+0x2cc>
 800bb62:	f8ba 3000 	ldrh.w	r3, [sl]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f000 8114 	beq.w	800bd94 <ai_platform_network_process+0x2cc>
 800bb6c:	69b3      	ldr	r3, [r6, #24]
 800bb6e:	f8cd b00c 	str.w	fp, [sp, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800bb78:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d072      	beq.n	800bc66 <ai_platform_network_process+0x19e>
 800bb80:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800bb84:	2c00      	cmp	r4, #0
 800bb86:	d06e      	beq.n	800bc66 <ai_platform_network_process+0x19e>
 800bb88:	f8da 3008 	ldr.w	r3, [sl, #8]
 800bb8c:	f8d3 9000 	ldr.w	r9, [r3]
 800bb90:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800bb94:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800bb98:	f000 81de 	beq.w	800bf58 <ai_platform_network_process+0x490>
 800bb9c:	69a3      	ldr	r3, [r4, #24]
 800bb9e:	2101      	movs	r1, #1
 800bba0:	4630      	mov	r0, r6
 800bba2:	685d      	ldr	r5, [r3, #4]
 800bba4:	f7ff fa0e 	bl	800afc4 <ai_buffer_get_size>
 800bba8:	4285      	cmp	r5, r0
 800bbaa:	f0c0 811b 	bcc.w	800bde4 <ai_platform_network_process+0x31c>
 800bbae:	68e0      	ldr	r0, [r4, #12]
 800bbb0:	69b1      	ldr	r1, [r6, #24]
 800bbb2:	68c2      	ldr	r2, [r0, #12]
 800bbb4:	68cb      	ldr	r3, [r1, #12]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	f040 8114 	bne.w	800bde4 <ai_platform_network_process+0x31c>
 800bbbc:	6882      	ldr	r2, [r0, #8]
 800bbbe:	688b      	ldr	r3, [r1, #8]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	f040 810f 	bne.w	800bde4 <ai_platform_network_process+0x31c>
 800bbc6:	6842      	ldr	r2, [r0, #4]
 800bbc8:	684b      	ldr	r3, [r1, #4]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	f040 810a 	bne.w	800bde4 <ai_platform_network_process+0x31c>
 800bbd0:	69a3      	ldr	r3, [r4, #24]
 800bbd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbd6:	f001 fcd3 	bl	800d580 <ai_array_get_data_byte_size>
 800bbda:	4605      	mov	r5, r0
 800bbdc:	4620      	mov	r0, r4
 800bbde:	f001 fce7 	bl	800d5b0 <get_tensor_byte_size>
 800bbe2:	4285      	cmp	r5, r0
 800bbe4:	f0c0 80fe 	bcc.w	800bde4 <ai_platform_network_process+0x31c>
 800bbe8:	69a3      	ldr	r3, [r4, #24]
 800bbea:	6818      	ldr	r0, [r3, #0]
 800bbec:	f001 fc34 	bl	800d458 <ai_array_to_buffer_fmt>
 800bbf0:	6833      	ldr	r3, [r6, #0]
 800bbf2:	4058      	eors	r0, r3
 800bbf4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800bbf8:	f040 81b9 	bne.w	800bf6e <ai_platform_network_process+0x4a6>
 800bbfc:	6873      	ldr	r3, [r6, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f000 81ac 	beq.w	800bf5c <ai_platform_network_process+0x494>
 800bc04:	69b3      	ldr	r3, [r6, #24]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f000 819c 	beq.w	800bf46 <ai_platform_network_process+0x47e>
 800bc0e:	9a01      	ldr	r2, [sp, #4]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	bf38      	it	cc
 800bc14:	461a      	movcc	r2, r3
 800bc16:	4620      	mov	r0, r4
 800bc18:	9201      	str	r2, [sp, #4]
 800bc1a:	f001 fcc9 	bl	800d5b0 <get_tensor_byte_size>
 800bc1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc22:	69b3      	ldr	r3, [r6, #24]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	fb00 f303 	mul.w	r3, r0, r3
 800bc2a:	f8c8 300c 	str.w	r3, [r8, #12]
 800bc2e:	6871      	ldr	r1, [r6, #4]
 800bc30:	f8c8 1004 	str.w	r1, [r8, #4]
 800bc34:	440b      	add	r3, r1
 800bc36:	f849 300b 	str.w	r3, [r9, fp]
 800bc3a:	69a0      	ldr	r0, [r4, #24]
 800bc3c:	6803      	ldr	r3, [r0, #0]
 800bc3e:	009a      	lsls	r2, r3, #2
 800bc40:	f107 0701 	add.w	r7, r7, #1
 800bc44:	f106 061c 	add.w	r6, r6, #28
 800bc48:	f100 80af 	bmi.w	800bdaa <ai_platform_network_process+0x2e2>
 800bc4c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800bc50:	1a9b      	subs	r3, r3, r2
 800bc52:	4419      	add	r1, r3
 800bc54:	6081      	str	r1, [r0, #8]
 800bc56:	69a3      	ldr	r3, [r4, #24]
 800bc58:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800bc5c:	60da      	str	r2, [r3, #12]
 800bc5e:	f8ba 3000 	ldrh.w	r3, [sl]
 800bc62:	42bb      	cmp	r3, r7
 800bc64:	d888      	bhi.n	800bb78 <ai_platform_network_process+0xb0>
 800bc66:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800bc6a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800bc6c:	f1bb 0f00 	cmp.w	fp, #0
 800bc70:	f000 8186 	beq.w	800bf80 <ai_platform_network_process+0x4b8>
 800bc74:	2a01      	cmp	r2, #1
 800bc76:	f240 815e 	bls.w	800bf36 <ai_platform_network_process+0x46e>
 800bc7a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800bc7e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f000 8157 	beq.w	800bf36 <ai_platform_network_process+0x46e>
 800bc88:	465e      	mov	r6, fp
 800bc8a:	2700      	movs	r7, #0
 800bc8c:	462c      	mov	r4, r5
 800bc8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f000 80b4 	beq.w	800be00 <ai_platform_network_process+0x338>
 800bc98:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800bc9c:	2d00      	cmp	r5, #0
 800bc9e:	f000 80af 	beq.w	800be00 <ai_platform_network_process+0x338>
 800bca2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bca6:	f8d3 8000 	ldr.w	r8, [r3]
 800bcaa:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800bcae:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800bcb2:	f000 8171 	beq.w	800bf98 <ai_platform_network_process+0x4d0>
 800bcb6:	69ab      	ldr	r3, [r5, #24]
 800bcb8:	2101      	movs	r1, #1
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	9302      	str	r3, [sp, #8]
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	f7ff f980 	bl	800afc4 <ai_buffer_get_size>
 800bcc4:	9b02      	ldr	r3, [sp, #8]
 800bcc6:	4283      	cmp	r3, r0
 800bcc8:	f0c0 8134 	bcc.w	800bf34 <ai_platform_network_process+0x46c>
 800bccc:	68e8      	ldr	r0, [r5, #12]
 800bcce:	69b1      	ldr	r1, [r6, #24]
 800bcd0:	68c2      	ldr	r2, [r0, #12]
 800bcd2:	68cb      	ldr	r3, [r1, #12]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	f040 812d 	bne.w	800bf34 <ai_platform_network_process+0x46c>
 800bcda:	6882      	ldr	r2, [r0, #8]
 800bcdc:	688b      	ldr	r3, [r1, #8]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	f040 8128 	bne.w	800bf34 <ai_platform_network_process+0x46c>
 800bce4:	6842      	ldr	r2, [r0, #4]
 800bce6:	684b      	ldr	r3, [r1, #4]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	f040 8123 	bne.w	800bf34 <ai_platform_network_process+0x46c>
 800bcee:	69ab      	ldr	r3, [r5, #24]
 800bcf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bcf4:	f001 fc44 	bl	800d580 <ai_array_get_data_byte_size>
 800bcf8:	9002      	str	r0, [sp, #8]
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	f001 fc58 	bl	800d5b0 <get_tensor_byte_size>
 800bd00:	9b02      	ldr	r3, [sp, #8]
 800bd02:	4283      	cmp	r3, r0
 800bd04:	f0c0 8116 	bcc.w	800bf34 <ai_platform_network_process+0x46c>
 800bd08:	69ab      	ldr	r3, [r5, #24]
 800bd0a:	6818      	ldr	r0, [r3, #0]
 800bd0c:	f001 fba4 	bl	800d458 <ai_array_to_buffer_fmt>
 800bd10:	6833      	ldr	r3, [r6, #0]
 800bd12:	4058      	eors	r0, r3
 800bd14:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800bd18:	f040 8136 	bne.w	800bf88 <ai_platform_network_process+0x4c0>
 800bd1c:	6873      	ldr	r3, [r6, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f000 814d 	beq.w	800bfbe <ai_platform_network_process+0x4f6>
 800bd24:	69b3      	ldr	r3, [r6, #24]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	f000 813f 	beq.w	800bfac <ai_platform_network_process+0x4e4>
 800bd2e:	9a01      	ldr	r2, [sp, #4]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	bf38      	it	cc
 800bd34:	461a      	movcc	r2, r3
 800bd36:	4628      	mov	r0, r5
 800bd38:	9201      	str	r2, [sp, #4]
 800bd3a:	f001 fc39 	bl	800d5b0 <get_tensor_byte_size>
 800bd3e:	f8ca 0008 	str.w	r0, [sl, #8]
 800bd42:	69b3      	ldr	r3, [r6, #24]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	fb00 f303 	mul.w	r3, r0, r3
 800bd4a:	f8ca 300c 	str.w	r3, [sl, #12]
 800bd4e:	6871      	ldr	r1, [r6, #4]
 800bd50:	f8ca 1004 	str.w	r1, [sl, #4]
 800bd54:	440b      	add	r3, r1
 800bd56:	f848 300b 	str.w	r3, [r8, fp]
 800bd5a:	69a8      	ldr	r0, [r5, #24]
 800bd5c:	6803      	ldr	r3, [r0, #0]
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	f107 0701 	add.w	r7, r7, #1
 800bd64:	f106 061c 	add.w	r6, r6, #28
 800bd68:	d445      	bmi.n	800bdf6 <ai_platform_network_process+0x32e>
 800bd6a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800bd6e:	1a9b      	subs	r3, r3, r2
 800bd70:	4419      	add	r1, r3
 800bd72:	6081      	str	r1, [r0, #8]
 800bd74:	69ab      	ldr	r3, [r5, #24]
 800bd76:	f8da 2004 	ldr.w	r2, [sl, #4]
 800bd7a:	60da      	str	r2, [r3, #12]
 800bd7c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800bd80:	429f      	cmp	r7, r3
 800bd82:	d384      	bcc.n	800bc8e <ai_platform_network_process+0x1c6>
 800bd84:	e03c      	b.n	800be00 <ai_platform_network_process+0x338>
 800bd86:	e7fe      	b.n	800bd86 <ai_platform_network_process+0x2be>
 800bd88:	68ea      	ldr	r2, [r5, #12]
 800bd8a:	616b      	str	r3, [r5, #20]
 800bd8c:	f002 0203 	and.w	r2, r2, #3
 800bd90:	2a03      	cmp	r2, #3
 800bd92:	d11d      	bne.n	800bdd0 <ai_platform_network_process+0x308>
 800bd94:	2217      	movs	r2, #23
 800bd96:	2112      	movs	r1, #18
 800bd98:	f105 0010 	add.w	r0, r5, #16
 800bd9c:	f000 f920 	bl	800bfe0 <core_set_error>
 800bda0:	2400      	movs	r4, #0
 800bda2:	4620      	mov	r0, r4
 800bda4:	b005      	add	sp, #20
 800bda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdaa:	f8ba 3000 	ldrh.w	r3, [sl]
 800bdae:	429f      	cmp	r7, r3
 800bdb0:	f4ff aee2 	bcc.w	800bb78 <ai_platform_network_process+0xb0>
 800bdb4:	e757      	b.n	800bc66 <ai_platform_network_process+0x19e>
 800bdb6:	bf00      	nop
 800bdb8:	a1c00100 	.word	0xa1c00100
 800bdbc:	e0042000 	.word	0xe0042000
 800bdc0:	58024000 	.word	0x58024000
 800bdc4:	f407a5c2 	.word	0xf407a5c2
 800bdc8:	b5e8b5cd 	.word	0xb5e8b5cd
 800bdcc:	40023000 	.word	0x40023000
 800bdd0:	2230      	movs	r2, #48	; 0x30
 800bdd2:	2111      	movs	r1, #17
 800bdd4:	f105 0010 	add.w	r0, r5, #16
 800bdd8:	f000 f902 	bl	800bfe0 <core_set_error>
 800bddc:	2400      	movs	r4, #0
 800bdde:	e7e0      	b.n	800bda2 <ai_platform_network_process+0x2da>
 800bde0:	462c      	mov	r4, r5
 800bde2:	e7de      	b.n	800bda2 <ai_platform_network_process+0x2da>
 800bde4:	9d02      	ldr	r5, [sp, #8]
 800bde6:	2218      	movs	r2, #24
 800bde8:	2112      	movs	r1, #18
 800bdea:	f105 0010 	add.w	r0, r5, #16
 800bdee:	f000 f8f7 	bl	800bfe0 <core_set_error>
 800bdf2:	2400      	movs	r4, #0
 800bdf4:	e7d5      	b.n	800bda2 <ai_platform_network_process+0x2da>
 800bdf6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800bdfa:	429f      	cmp	r7, r3
 800bdfc:	f4ff af47 	bcc.w	800bc8e <ai_platform_network_process+0x1c6>
 800be00:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800be04:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800be06:	82a3      	strh	r3, [r4, #20]
 800be08:	4625      	mov	r5, r4
 800be0a:	2a00      	cmp	r2, #0
 800be0c:	f040 808c 	bne.w	800bf28 <ai_platform_network_process+0x460>
 800be10:	4616      	mov	r6, r2
 800be12:	4617      	mov	r7, r2
 800be14:	8aec      	ldrh	r4, [r5, #22]
 800be16:	429c      	cmp	r4, r3
 800be18:	bf38      	it	cc
 800be1a:	46ab      	movcc	fp, r5
 800be1c:	d2c1      	bcs.n	800bda2 <ai_platform_network_process+0x2da>
 800be1e:	2e00      	cmp	r6, #0
 800be20:	d030      	beq.n	800be84 <ai_platform_network_process+0x3bc>
 800be22:	f04f 0800 	mov.w	r8, #0
 800be26:	e014      	b.n	800be52 <ai_platform_network_process+0x38a>
 800be28:	6882      	ldr	r2, [r0, #8]
 800be2a:	68c5      	ldr	r5, [r0, #12]
 800be2c:	6863      	ldr	r3, [r4, #4]
 800be2e:	1b52      	subs	r2, r2, r5
 800be30:	4413      	add	r3, r2
 800be32:	6083      	str	r3, [r0, #8]
 800be34:	698b      	ldr	r3, [r1, #24]
 800be36:	6862      	ldr	r2, [r4, #4]
 800be38:	60da      	str	r2, [r3, #12]
 800be3a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800be3e:	f859 200a 	ldr.w	r2, [r9, sl]
 800be42:	440b      	add	r3, r1
 800be44:	4293      	cmp	r3, r2
 800be46:	bf24      	itt	cs
 800be48:	68e3      	ldrcs	r3, [r4, #12]
 800be4a:	1ad3      	subcs	r3, r2, r3
 800be4c:	6063      	str	r3, [r4, #4]
 800be4e:	f108 0801 	add.w	r8, r8, #1
 800be52:	8833      	ldrh	r3, [r6, #0]
 800be54:	4543      	cmp	r3, r8
 800be56:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800be5a:	d913      	bls.n	800be84 <ai_platform_network_process+0x3bc>
 800be5c:	6873      	ldr	r3, [r6, #4]
 800be5e:	b18b      	cbz	r3, 800be84 <ai_platform_network_process+0x3bc>
 800be60:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800be64:	b171      	cbz	r1, 800be84 <ai_platform_network_process+0x3bc>
 800be66:	6988      	ldr	r0, [r1, #24]
 800be68:	68b2      	ldr	r2, [r6, #8]
 800be6a:	6803      	ldr	r3, [r0, #0]
 800be6c:	f8d2 9000 	ldr.w	r9, [r2]
 800be70:	009d      	lsls	r5, r3, #2
 800be72:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800be76:	d5d7      	bpl.n	800be28 <ai_platform_network_process+0x360>
 800be78:	6881      	ldr	r1, [r0, #8]
 800be7a:	68a2      	ldr	r2, [r4, #8]
 800be7c:	6860      	ldr	r0, [r4, #4]
 800be7e:	f001 fa65 	bl	800d34c <st_int8_copy>
 800be82:	e7da      	b.n	800be3a <ai_platform_network_process+0x372>
 800be84:	4658      	mov	r0, fp
 800be86:	f000 f903 	bl	800c090 <ai_layers_forward_all>
 800be8a:	2f00      	cmp	r7, #0
 800be8c:	d03d      	beq.n	800bf0a <ai_platform_network_process+0x442>
 800be8e:	2400      	movs	r4, #0
 800be90:	e016      	b.n	800bec0 <ai_platform_network_process+0x3f8>
 800be92:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800be96:	f859 100a 	ldr.w	r1, [r9, sl]
 800be9a:	4413      	add	r3, r2
 800be9c:	428b      	cmp	r3, r1
 800be9e:	bf24      	itt	cs
 800bea0:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800bea4:	1acb      	subcs	r3, r1, r3
 800bea6:	f8c8 3004 	str.w	r3, [r8, #4]
 800beaa:	6981      	ldr	r1, [r0, #24]
 800beac:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800beb0:	1b52      	subs	r2, r2, r5
 800beb2:	4413      	add	r3, r2
 800beb4:	608b      	str	r3, [r1, #8]
 800beb6:	6983      	ldr	r3, [r0, #24]
 800beb8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800bebc:	60da      	str	r2, [r3, #12]
 800bebe:	3401      	adds	r4, #1
 800bec0:	883b      	ldrh	r3, [r7, #0]
 800bec2:	42a3      	cmp	r3, r4
 800bec4:	d921      	bls.n	800bf0a <ai_platform_network_process+0x442>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	b1fb      	cbz	r3, 800bf0a <ai_platform_network_process+0x442>
 800beca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bece:	b1e0      	cbz	r0, 800bf0a <ai_platform_network_process+0x442>
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	6983      	ldr	r3, [r0, #24]
 800bed4:	f8d2 9000 	ldr.w	r9, [r2]
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	0092      	lsls	r2, r2, #2
 800bedc:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800bee0:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800bee4:	d5d5      	bpl.n	800be92 <ai_platform_network_process+0x3ca>
 800bee6:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800beea:	6898      	ldr	r0, [r3, #8]
 800beec:	f001 fa2e 	bl	800d34c <st_int8_copy>
 800bef0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800bef4:	f859 200a 	ldr.w	r2, [r9, sl]
 800bef8:	440b      	add	r3, r1
 800befa:	4293      	cmp	r3, r2
 800befc:	bf24      	itt	cs
 800befe:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800bf02:	1ad3      	subcs	r3, r2, r3
 800bf04:	f8c8 3004 	str.w	r3, [r8, #4]
 800bf08:	e7d9      	b.n	800bebe <ai_platform_network_process+0x3f6>
 800bf0a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800bf0e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800bf12:	3401      	adds	r4, #1
 800bf14:	b2a4      	uxth	r4, r4
 800bf16:	42a3      	cmp	r3, r4
 800bf18:	f8ab 4016 	strh.w	r4, [fp, #22]
 800bf1c:	f63f af7f 	bhi.w	800be1e <ai_platform_network_process+0x356>
 800bf20:	4620      	mov	r0, r4
 800bf22:	b005      	add	sp, #20
 800bf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf28:	2a01      	cmp	r2, #1
 800bf2a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800bf2c:	d03c      	beq.n	800bfa8 <ai_platform_network_process+0x4e0>
 800bf2e:	f106 070c 	add.w	r7, r6, #12
 800bf32:	e76f      	b.n	800be14 <ai_platform_network_process+0x34c>
 800bf34:	4625      	mov	r5, r4
 800bf36:	2218      	movs	r2, #24
 800bf38:	2113      	movs	r1, #19
 800bf3a:	f105 0010 	add.w	r0, r5, #16
 800bf3e:	f000 f84f 	bl	800bfe0 <core_set_error>
 800bf42:	2400      	movs	r4, #0
 800bf44:	e72d      	b.n	800bda2 <ai_platform_network_process+0x2da>
 800bf46:	9d02      	ldr	r5, [sp, #8]
 800bf48:	4604      	mov	r4, r0
 800bf4a:	2221      	movs	r2, #33	; 0x21
 800bf4c:	2112      	movs	r1, #18
 800bf4e:	f105 0010 	add.w	r0, r5, #16
 800bf52:	f000 f845 	bl	800bfe0 <core_set_error>
 800bf56:	e724      	b.n	800bda2 <ai_platform_network_process+0x2da>
 800bf58:	9d02      	ldr	r5, [sp, #8]
 800bf5a:	e71b      	b.n	800bd94 <ai_platform_network_process+0x2cc>
 800bf5c:	9d02      	ldr	r5, [sp, #8]
 800bf5e:	4604      	mov	r4, r0
 800bf60:	2217      	movs	r2, #23
 800bf62:	2112      	movs	r1, #18
 800bf64:	f105 0010 	add.w	r0, r5, #16
 800bf68:	f000 f83a 	bl	800bfe0 <core_set_error>
 800bf6c:	e719      	b.n	800bda2 <ai_platform_network_process+0x2da>
 800bf6e:	9d02      	ldr	r5, [sp, #8]
 800bf70:	2219      	movs	r2, #25
 800bf72:	2112      	movs	r1, #18
 800bf74:	f105 0010 	add.w	r0, r5, #16
 800bf78:	f000 f832 	bl	800bfe0 <core_set_error>
 800bf7c:	2400      	movs	r4, #0
 800bf7e:	e710      	b.n	800bda2 <ai_platform_network_process+0x2da>
 800bf80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800bf84:	82ab      	strh	r3, [r5, #20]
 800bf86:	e740      	b.n	800be0a <ai_platform_network_process+0x342>
 800bf88:	f104 0010 	add.w	r0, r4, #16
 800bf8c:	2219      	movs	r2, #25
 800bf8e:	2113      	movs	r1, #19
 800bf90:	f000 f826 	bl	800bfe0 <core_set_error>
 800bf94:	2400      	movs	r4, #0
 800bf96:	e704      	b.n	800bda2 <ai_platform_network_process+0x2da>
 800bf98:	f104 0010 	add.w	r0, r4, #16
 800bf9c:	2217      	movs	r2, #23
 800bf9e:	2113      	movs	r1, #19
 800bfa0:	f000 f81e 	bl	800bfe0 <core_set_error>
 800bfa4:	4654      	mov	r4, sl
 800bfa6:	e6fc      	b.n	800bda2 <ai_platform_network_process+0x2da>
 800bfa8:	2700      	movs	r7, #0
 800bfaa:	e733      	b.n	800be14 <ai_platform_network_process+0x34c>
 800bfac:	4625      	mov	r5, r4
 800bfae:	2221      	movs	r2, #33	; 0x21
 800bfb0:	4604      	mov	r4, r0
 800bfb2:	2113      	movs	r1, #19
 800bfb4:	f105 0010 	add.w	r0, r5, #16
 800bfb8:	f000 f812 	bl	800bfe0 <core_set_error>
 800bfbc:	e6f1      	b.n	800bda2 <ai_platform_network_process+0x2da>
 800bfbe:	4625      	mov	r5, r4
 800bfc0:	2217      	movs	r2, #23
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	2113      	movs	r1, #19
 800bfc6:	f105 0010 	add.w	r0, r5, #16
 800bfca:	f000 f809 	bl	800bfe0 <core_set_error>
 800bfce:	e6e8      	b.n	800bda2 <ai_platform_network_process+0x2da>

0800bfd0 <core_init>:
 800bfd0:	2001      	movs	r0, #1
 800bfd2:	4770      	bx	lr

0800bfd4 <core_get_error>:
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	6800      	ldr	r0, [r0, #0]
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop

0800bfe0 <core_set_error>:
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	7800      	ldrb	r0, [r0, #0]
 800bfe4:	b108      	cbz	r0, 800bfea <core_set_error+0xa>
 800bfe6:	2000      	movs	r0, #0
 800bfe8:	4770      	bx	lr
 800bfea:	7019      	strb	r1, [r3, #0]
 800bfec:	6819      	ldr	r1, [r3, #0]
 800bfee:	f362 211f 	bfi	r1, r2, #8, #24
 800bff2:	2001      	movs	r0, #1
 800bff4:	6019      	str	r1, [r3, #0]
 800bff6:	4770      	bx	lr

0800bff8 <ai_check_custom_types>:
 800bff8:	b082      	sub	sp, #8
 800bffa:	4b13      	ldr	r3, [pc, #76]	; (800c048 <ai_check_custom_types+0x50>)
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	b118      	cbz	r0, 800c008 <ai_check_custom_types+0x10>
 800c000:	7803      	ldrb	r3, [r0, #0]
 800c002:	2b03      	cmp	r3, #3
 800c004:	d002      	beq.n	800c00c <ai_check_custom_types+0x14>
 800c006:	2000      	movs	r0, #0
 800c008:	b002      	add	sp, #8
 800c00a:	4770      	bx	lr
 800c00c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c010:	4293      	cmp	r3, r2
 800c012:	d004      	beq.n	800c01e <ai_check_custom_types+0x26>
 800c014:	2001      	movs	r0, #1
 800c016:	f080 0001 	eor.w	r0, r0, #1
 800c01a:	b002      	add	sp, #8
 800c01c:	4770      	bx	lr
 800c01e:	7842      	ldrb	r2, [r0, #1]
 800c020:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c024:	429a      	cmp	r2, r3
 800c026:	f100 0001 	add.w	r0, r0, #1
 800c02a:	d1f3      	bne.n	800c014 <ai_check_custom_types+0x1c>
 800c02c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800c030:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c034:	429a      	cmp	r2, r3
 800c036:	d1ed      	bne.n	800c014 <ai_check_custom_types+0x1c>
 800c038:	7842      	ldrb	r2, [r0, #1]
 800c03a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d1e8      	bne.n	800c014 <ai_check_custom_types+0x1c>
 800c042:	2000      	movs	r0, #0
 800c044:	e7e7      	b.n	800c016 <ai_check_custom_types+0x1e>
 800c046:	bf00      	nop
 800c048:	84048403 	.word	0x84048403

0800c04c <ai_layers_init_all>:
 800c04c:	4601      	mov	r1, r0
 800c04e:	2000      	movs	r0, #0
 800c050:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c052:	b143      	cbz	r3, 800c066 <ai_layers_init_all+0x1a>
 800c054:	691a      	ldr	r2, [r3, #16]
 800c056:	60d9      	str	r1, [r3, #12]
 800c058:	429a      	cmp	r2, r3
 800c05a:	f100 0001 	add.w	r0, r0, #1
 800c05e:	d002      	beq.n	800c066 <ai_layers_init_all+0x1a>
 800c060:	b10a      	cbz	r2, 800c066 <ai_layers_init_all+0x1a>
 800c062:	4613      	mov	r3, r2
 800c064:	e7f5      	b.n	800c052 <ai_layers_init_all+0x6>
 800c066:	4770      	bx	lr

0800c068 <ai_layers_post_init_all>:
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c06c:	2500      	movs	r5, #0
 800c06e:	b16c      	cbz	r4, 800c08c <ai_layers_post_init_all+0x24>
 800c070:	6863      	ldr	r3, [r4, #4]
 800c072:	07db      	lsls	r3, r3, #31
 800c074:	d504      	bpl.n	800c080 <ai_layers_post_init_all+0x18>
 800c076:	6a23      	ldr	r3, [r4, #32]
 800c078:	4620      	mov	r0, r4
 800c07a:	b10b      	cbz	r3, 800c080 <ai_layers_post_init_all+0x18>
 800c07c:	4798      	blx	r3
 800c07e:	3501      	adds	r5, #1
 800c080:	6923      	ldr	r3, [r4, #16]
 800c082:	42a3      	cmp	r3, r4
 800c084:	d002      	beq.n	800c08c <ai_layers_post_init_all+0x24>
 800c086:	b10b      	cbz	r3, 800c08c <ai_layers_post_init_all+0x24>
 800c088:	461c      	mov	r4, r3
 800c08a:	e7f0      	b.n	800c06e <ai_layers_post_init_all+0x6>
 800c08c:	4628      	mov	r0, r5
 800c08e:	bd38      	pop	{r3, r4, r5, pc}

0800c090 <ai_layers_forward_all>:
 800c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800c098:	4604      	mov	r4, r0
 800c09a:	f1b8 0f00 	cmp.w	r8, #0
 800c09e:	d02b      	beq.n	800c0f8 <ai_layers_forward_all+0x68>
 800c0a0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800c0a2:	6381      	str	r1, [r0, #56]	; 0x38
 800c0a4:	b321      	cbz	r1, 800c0f0 <ai_layers_forward_all+0x60>
 800c0a6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c0a8:	2001      	movs	r0, #1
 800c0aa:	47c0      	blx	r8
 800c0ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c0ae:	b1fe      	cbz	r6, 800c0f0 <ai_layers_forward_all+0x60>
 800c0b0:	2700      	movs	r7, #0
 800c0b2:	4631      	mov	r1, r6
 800c0b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c0b6:	2002      	movs	r0, #2
 800c0b8:	47c0      	blx	r8
 800c0ba:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800c0bc:	4628      	mov	r0, r5
 800c0be:	696b      	ldr	r3, [r5, #20]
 800c0c0:	4798      	blx	r3
 800c0c2:	692e      	ldr	r6, [r5, #16]
 800c0c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c0c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c0c8:	42b5      	cmp	r5, r6
 800c0ca:	f04f 0003 	mov.w	r0, #3
 800c0ce:	d007      	beq.n	800c0e0 <ai_layers_forward_all+0x50>
 800c0d0:	47c0      	blx	r8
 800c0d2:	3701      	adds	r7, #1
 800c0d4:	63a6      	str	r6, [r4, #56]	; 0x38
 800c0d6:	2e00      	cmp	r6, #0
 800c0d8:	d1eb      	bne.n	800c0b2 <ai_layers_forward_all+0x22>
 800c0da:	4638      	mov	r0, r7
 800c0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e0:	2003      	movs	r0, #3
 800c0e2:	47c0      	blx	r8
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	3701      	adds	r7, #1
 800c0e8:	63a3      	str	r3, [r4, #56]	; 0x38
 800c0ea:	4638      	mov	r0, r7
 800c0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f0:	2700      	movs	r7, #0
 800c0f2:	4638      	mov	r0, r7
 800c0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800c0fa:	6385      	str	r5, [r0, #56]	; 0x38
 800c0fc:	2d00      	cmp	r5, #0
 800c0fe:	d0f7      	beq.n	800c0f0 <ai_layers_forward_all+0x60>
 800c100:	4647      	mov	r7, r8
 800c102:	696b      	ldr	r3, [r5, #20]
 800c104:	4628      	mov	r0, r5
 800c106:	4798      	blx	r3
 800c108:	462b      	mov	r3, r5
 800c10a:	692d      	ldr	r5, [r5, #16]
 800c10c:	429d      	cmp	r5, r3
 800c10e:	d004      	beq.n	800c11a <ai_layers_forward_all+0x8a>
 800c110:	63a5      	str	r5, [r4, #56]	; 0x38
 800c112:	3701      	adds	r7, #1
 800c114:	2d00      	cmp	r5, #0
 800c116:	d1f4      	bne.n	800c102 <ai_layers_forward_all+0x72>
 800c118:	e7df      	b.n	800c0da <ai_layers_forward_all+0x4a>
 800c11a:	2300      	movs	r3, #0
 800c11c:	63a3      	str	r3, [r4, #56]	; 0x38
 800c11e:	3701      	adds	r7, #1
 800c120:	e7db      	b.n	800c0da <ai_layers_forward_all+0x4a>
 800c122:	bf00      	nop

0800c124 <ai_dict_decompress_f32>:
 800c124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c128:	9d08      	ldr	r5, [sp, #32]
 800c12a:	2b04      	cmp	r3, #4
 800c12c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c130:	d00e      	beq.n	800c150 <ai_dict_decompress_f32+0x2c>
 800c132:	2b08      	cmp	r3, #8
 800c134:	d10a      	bne.n	800c14c <ai_dict_decompress_f32+0x28>
 800c136:	42a8      	cmp	r0, r5
 800c138:	d208      	bcs.n	800c14c <ai_dict_decompress_f32+0x28>
 800c13a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c13e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f840 3b04 	str.w	r3, [r0], #4
 800c148:	4285      	cmp	r5, r0
 800c14a:	d8f6      	bhi.n	800c13a <ai_dict_decompress_f32+0x16>
 800c14c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c150:	9b07      	ldr	r3, [sp, #28]
 800c152:	085e      	lsrs	r6, r3, #1
 800c154:	f003 0701 	and.w	r7, r3, #1
 800c158:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800c15c:	f106 38ff 	add.w	r8, r6, #4294967295
 800c160:	42a8      	cmp	r0, r5
 800c162:	d2f3      	bcs.n	800c14c <ai_dict_decompress_f32+0x28>
 800c164:	b33e      	cbz	r6, 800c1b6 <ai_dict_decompress_f32+0x92>
 800c166:	f100 0e08 	add.w	lr, r0, #8
 800c16a:	f101 3cff 	add.w	ip, r1, #4294967295
 800c16e:	eb01 0408 	add.w	r4, r1, r8
 800c172:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800c176:	091b      	lsrs	r3, r3, #4
 800c178:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c17c:	f10e 0e08 	add.w	lr, lr, #8
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f84e 3c10 	str.w	r3, [lr, #-16]
 800c186:	f89c 3000 	ldrb.w	r3, [ip]
 800c18a:	f003 030f 	and.w	r3, r3, #15
 800c18e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c192:	4564      	cmp	r4, ip
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800c19a:	d1ea      	bne.n	800c172 <ai_dict_decompress_f32+0x4e>
 800c19c:	4431      	add	r1, r6
 800c19e:	4448      	add	r0, r9
 800c1a0:	2f00      	cmp	r7, #0
 800c1a2:	d0dd      	beq.n	800c160 <ai_dict_decompress_f32+0x3c>
 800c1a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1a8:	091b      	lsrs	r3, r3, #4
 800c1aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f840 3b04 	str.w	r3, [r0], #4
 800c1b4:	e7d4      	b.n	800c160 <ai_dict_decompress_f32+0x3c>
 800c1b6:	2f00      	cmp	r7, #0
 800c1b8:	d1f4      	bne.n	800c1a4 <ai_dict_decompress_f32+0x80>
 800c1ba:	42a8      	cmp	r0, r5
 800c1bc:	d3fd      	bcc.n	800c1ba <ai_dict_decompress_f32+0x96>
 800c1be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1c2:	bf00      	nop

0800c1c4 <forward_conv2d_if32of32wf32>:
 800c1c4:	6982      	ldr	r2, [r0, #24]
 800c1c6:	8813      	ldrh	r3, [r2, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f000 8092 	beq.w	800c2f2 <forward_conv2d_if32of32wf32+0x12e>
 800c1ce:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800c1d2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800c1d6:	b102      	cbz	r2, 800c1da <forward_conv2d_if32of32wf32+0x16>
 800c1d8:	6812      	ldr	r2, [r2, #0]
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	f000 80b2 	beq.w	800c344 <forward_conv2d_if32of32wf32+0x180>
 800c1e0:	f8dc 1010 	ldr.w	r1, [ip, #16]
 800c1e4:	b101      	cbz	r1, 800c1e8 <forward_conv2d_if32of32wf32+0x24>
 800c1e6:	6809      	ldr	r1, [r1, #0]
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	f000 8084 	beq.w	800c2f6 <forward_conv2d_if32of32wf32+0x132>
 800c1ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f2:	f8dc 601c 	ldr.w	r6, [ip, #28]
 800c1f6:	b0a1      	sub	sp, #132	; 0x84
 800c1f8:	2e00      	cmp	r6, #0
 800c1fa:	f000 809c 	beq.w	800c336 <forward_conv2d_if32of32wf32+0x172>
 800c1fe:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 800c202:	6834      	ldr	r4, [r6, #0]
 800c204:	2d01      	cmp	r5, #1
 800c206:	f240 8098 	bls.w	800c33a <forward_conv2d_if32of32wf32+0x176>
 800c20a:	6876      	ldr	r6, [r6, #4]
 800c20c:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800c210:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800c214:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c218:	9713      	str	r7, [sp, #76]	; 0x4c
 800c21a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800c21e:	9714      	str	r7, [sp, #80]	; 0x50
 800c220:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800c224:	9715      	str	r7, [sp, #84]	; 0x54
 800c226:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800c22a:	9716      	str	r7, [sp, #88]	; 0x58
 800c22c:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800c230:	6992      	ldr	r2, [r2, #24]
 800c232:	9717      	str	r7, [sp, #92]	; 0x5c
 800c234:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800c238:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 800c23c:	9718      	str	r7, [sp, #96]	; 0x60
 800c23e:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 800c240:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800c244:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800c248:	69a2      	ldr	r2, [r4, #24]
 800c24a:	9719      	str	r7, [sp, #100]	; 0x64
 800c24c:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 800c250:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 800c252:	69c0      	ldr	r0, [r0, #28]
 800c254:	901f      	str	r0, [sp, #124]	; 0x7c
 800c256:	f8be 0000 	ldrh.w	r0, [lr]
 800c25a:	901b      	str	r0, [sp, #108]	; 0x6c
 800c25c:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800c260:	901c      	str	r0, [sp, #112]	; 0x70
 800c262:	b2a8      	uxth	r0, r5
 800c264:	971a      	str	r7, [sp, #104]	; 0x68
 800c266:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 800c26a:	901d      	str	r0, [sp, #116]	; 0x74
 800c26c:	b2a0      	uxth	r0, r4
 800c26e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800c272:	901e      	str	r0, [sp, #120]	; 0x78
 800c274:	b10e      	cbz	r6, 800c27a <forward_conv2d_if32of32wf32+0xb6>
 800c276:	69b0      	ldr	r0, [r6, #24]
 800c278:	6886      	ldr	r6, [r0, #8]
 800c27a:	6989      	ldr	r1, [r1, #24]
 800c27c:	b2a4      	uxth	r4, r4
 800c27e:	f108 30ff 	add.w	r0, r8, #4294967295
 800c282:	f8d1 a008 	ldr.w	sl, [r1, #8]
 800c286:	6811      	ldr	r1, [r2, #0]
 800c288:	b2ad      	uxth	r5, r5
 800c28a:	3c01      	subs	r4, #1
 800c28c:	3d01      	subs	r5, #1
 800c28e:	fb00 8404 	mla	r4, r0, r4, r8
 800c292:	1e78      	subs	r0, r7, #1
 800c294:	fb00 7505 	mla	r5, r0, r5, r7
 800c298:	f3c1 4043 	ubfx	r0, r1, #17, #4
 800c29c:	2804      	cmp	r0, #4
 800c29e:	d02d      	beq.n	800c2fc <forward_conv2d_if32of32wf32+0x138>
 800c2a0:	2808      	cmp	r0, #8
 800c2a2:	d02b      	beq.n	800c2fc <forward_conv2d_if32of32wf32+0x138>
 800c2a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c2a6:	940c      	str	r4, [sp, #48]	; 0x30
 800c2a8:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
 800c2ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c2ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c2b2:	930a      	str	r3, [sp, #40]	; 0x28
 800c2b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c2ba:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800c2bc:	9706      	str	r7, [sp, #24]
 800c2be:	e9cd 8307 	strd	r8, r3, [sp, #28]
 800c2c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2c4:	9305      	str	r3, [sp, #20]
 800c2c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c2c8:	9304      	str	r3, [sp, #16]
 800c2ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2cc:	9303      	str	r3, [sp, #12]
 800c2ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c2d0:	9302      	str	r3, [sp, #8]
 800c2d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2d4:	9301      	str	r3, [sp, #4]
 800c2d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c2d8:	9300      	str	r3, [sp, #0]
 800c2da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c2dc:	9310      	str	r3, [sp, #64]	; 0x40
 800c2de:	464a      	mov	r2, r9
 800c2e0:	4633      	mov	r3, r6
 800c2e2:	4651      	mov	r1, sl
 800c2e4:	4658      	mov	r0, fp
 800c2e6:	940f      	str	r4, [sp, #60]	; 0x3c
 800c2e8:	f000 fdaa 	bl	800ce40 <forward_lite_conv2d_if32of32wf32>
 800c2ec:	b021      	add	sp, #132	; 0x84
 800c2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	deff      	udf	#255	; 0xff
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	deff      	udf	#255	; 0xff
 800c2fc:	68d2      	ldr	r2, [r2, #12]
 800c2fe:	2a00      	cmp	r2, #0
 800c300:	d0d0      	beq.n	800c2a4 <forward_conv2d_if32of32wf32+0xe0>
 800c302:	2b03      	cmp	r3, #3
 800c304:	d021      	beq.n	800c34a <forward_conv2d_if32of32wf32+0x186>
 800c306:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 800c30a:	b1c3      	cbz	r3, 800c33e <forward_conv2d_if32of32wf32+0x17a>
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	b1b3      	cbz	r3, 800c33e <forward_conv2d_if32of32wf32+0x17a>
 800c310:	699b      	ldr	r3, [r3, #24]
 800c312:	e9d3 3001 	ldrd	r3, r0, [r3, #4]
 800c316:	9301      	str	r3, [sp, #4]
 800c318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 800c320:	f3c1 5141 	ubfx	r1, r1, #21, #2
 800c324:	410b      	asrs	r3, r1
 800c326:	b29b      	uxth	r3, r3
 800c328:	4649      	mov	r1, r9
 800c32a:	2800      	cmp	r0, #0
 800c32c:	bf18      	it	ne
 800c32e:	4681      	movne	r9, r0
 800c330:	f7ff fef8 	bl	800c124 <ai_dict_decompress_f32>
 800c334:	e7b6      	b.n	800c2a4 <forward_conv2d_if32of32wf32+0xe0>
 800c336:	4634      	mov	r4, r6
 800c338:	e768      	b.n	800c20c <forward_conv2d_if32of32wf32+0x48>
 800c33a:	2600      	movs	r6, #0
 800c33c:	e766      	b.n	800c20c <forward_conv2d_if32of32wf32+0x48>
 800c33e:	2300      	movs	r3, #0
 800c340:	699b      	ldr	r3, [r3, #24]
 800c342:	deff      	udf	#255	; 0xff
 800c344:	2300      	movs	r3, #0
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	deff      	udf	#255	; 0xff
 800c34a:	2300      	movs	r3, #0
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	deff      	udf	#255	; 0xff

0800c350 <forward_dense>:
 800c350:	6983      	ldr	r3, [r0, #24]
 800c352:	881a      	ldrh	r2, [r3, #0]
 800c354:	2a00      	cmp	r2, #0
 800c356:	f000 8181 	beq.w	800c65c <forward_dense+0x30c>
 800c35a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35e:	ed2d 8b02 	vpush	{d8}
 800c362:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800c366:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800c36a:	b095      	sub	sp, #84	; 0x54
 800c36c:	b105      	cbz	r5, 800c370 <forward_dense+0x20>
 800c36e:	682d      	ldr	r5, [r5, #0]
 800c370:	2a01      	cmp	r2, #1
 800c372:	f000 828f 	beq.w	800c894 <forward_dense+0x544>
 800c376:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800c37a:	b106      	cbz	r6, 800c37e <forward_dense+0x2e>
 800c37c:	6836      	ldr	r6, [r6, #0]
 800c37e:	2a02      	cmp	r2, #2
 800c380:	f000 816e 	beq.w	800c660 <forward_dense+0x310>
 800c384:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800c388:	930b      	str	r3, [sp, #44]	; 0x2c
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f000 8274 	beq.w	800c878 <forward_dense+0x528>
 800c390:	4619      	mov	r1, r3
 800c392:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800c396:	6809      	ldr	r1, [r1, #0]
 800c398:	910d      	str	r1, [sp, #52]	; 0x34
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	f240 826e 	bls.w	800c87c <forward_dense+0x52c>
 800c3a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	68e8      	ldr	r0, [r5, #12]
 800c3aa:	68f7      	ldr	r7, [r6, #12]
 800c3ac:	6840      	ldr	r0, [r0, #4]
 800c3ae:	6999      	ldr	r1, [r3, #24]
 800c3b0:	9013      	str	r0, [sp, #76]	; 0x4c
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	680b      	ldr	r3, [r1, #0]
 800c3b6:	9012      	str	r0, [sp, #72]	; 0x48
 800c3b8:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800c3bc:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800c3c0:	fb00 f404 	mul.w	r4, r0, r4
 800c3c4:	f3c3 5041 	ubfx	r0, r3, #21, #2
 800c3c8:	fa4e f000 	asr.w	r0, lr, r0
 800c3cc:	2a03      	cmp	r2, #3
 800c3ce:	9010      	str	r0, [sp, #64]	; 0x40
 800c3d0:	f000 825d 	beq.w	800c88e <forward_dense+0x53e>
 800c3d4:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800c3d8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800c3dc:	2a00      	cmp	r2, #0
 800c3de:	f000 8246 	beq.w	800c86e <forward_dense+0x51e>
 800c3e2:	6812      	ldr	r2, [r2, #0]
 800c3e4:	2a00      	cmp	r2, #0
 800c3e6:	f000 8242 	beq.w	800c86e <forward_dense+0x51e>
 800c3ea:	2b04      	cmp	r3, #4
 800c3ec:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800c3f0:	f000 822c 	beq.w	800c84c <forward_dense+0x4fc>
 800c3f4:	2b08      	cmp	r3, #8
 800c3f6:	f000 8229 	beq.w	800c84c <forward_dense+0x4fc>
 800c3fa:	f04f 0b00 	mov.w	fp, #0
 800c3fe:	69b2      	ldr	r2, [r6, #24]
 800c400:	69ab      	ldr	r3, [r5, #24]
 800c402:	6891      	ldr	r1, [r2, #8]
 800c404:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	6952      	ldr	r2, [r2, #20]
 800c40a:	9106      	str	r1, [sp, #24]
 800c40c:	fb07 f404 	mul.w	r4, r7, r4
 800c410:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800c414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c416:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c41a:	4281      	cmp	r1, r0
 800c41c:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800c420:	900e      	str	r0, [sp, #56]	; 0x38
 800c422:	940c      	str	r4, [sp, #48]	; 0x30
 800c424:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 800c428:	f080 8113 	bcs.w	800c652 <forward_dense+0x302>
 800c42c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c42e:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800c67c <forward_dense+0x32c>
 800c432:	f021 0201 	bic.w	r2, r1, #1
 800c436:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c43a:	9204      	str	r2, [sp, #16]
 800c43c:	f001 0201 	and.w	r2, r1, #1
 800c440:	08c8      	lsrs	r0, r1, #3
 800c442:	9208      	str	r2, [sp, #32]
 800c444:	008a      	lsls	r2, r1, #2
 800c446:	f001 0a07 	and.w	sl, r1, #7
 800c44a:	920f      	str	r2, [sp, #60]	; 0x3c
 800c44c:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 800c450:	3320      	adds	r3, #32
 800c452:	465c      	mov	r4, fp
 800c454:	9007      	str	r0, [sp, #28]
 800c456:	46cb      	mov	fp, r9
 800c458:	9205      	str	r2, [sp, #20]
 800c45a:	9302      	str	r3, [sp, #8]
 800c45c:	46c1      	mov	r9, r8
 800c45e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800c462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c464:	699b      	ldr	r3, [r3, #24]
 800c466:	689a      	ldr	r2, [r3, #8]
 800c468:	9b02      	ldr	r3, [sp, #8]
 800c46a:	3b20      	subs	r3, #32
 800c46c:	930a      	str	r3, [sp, #40]	; 0x28
 800c46e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c470:	b10b      	cbz	r3, 800c476 <forward_dense+0x126>
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	2c00      	cmp	r4, #0
 800c478:	f000 81da 	beq.w	800c830 <forward_dense+0x4e0>
 800c47c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c47e:	2904      	cmp	r1, #4
 800c480:	9906      	ldr	r1, [sp, #24]
 800c482:	f000 80fd 	beq.w	800c680 <forward_dense+0x330>
 800c486:	4549      	cmp	r1, r9
 800c488:	f080 80d2 	bcs.w	800c630 <forward_dense+0x2e0>
 800c48c:	460f      	mov	r7, r1
 800c48e:	9907      	ldr	r1, [sp, #28]
 800c490:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c494:	f8dd a014 	ldr.w	sl, [sp, #20]
 800c498:	1c4e      	adds	r6, r1, #1
 800c49a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c49e:	4694      	mov	ip, r2
 800c4a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c4a2:	468e      	mov	lr, r1
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f000 80de 	beq.w	800c666 <forward_dense+0x316>
 800c4aa:	ecf3 2a01 	vldmia	r3!, {s5}
 800c4ae:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800c67c <forward_dense+0x32c>
 800c4b2:	f1be 0f00 	cmp.w	lr, #0
 800c4b6:	f000 80de 	beq.w	800c676 <forward_dense+0x326>
 800c4ba:	f10c 0108 	add.w	r1, ip, #8
 800c4be:	4640      	mov	r0, r8
 800c4c0:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800c4c4:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800c4c8:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800c4cc:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800c4d0:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 800c4d4:	ed10 5a04 	vldr	s10, [r0, #-16]
 800c4d8:	ed50 5a03 	vldr	s11, [r0, #-12]
 800c4dc:	ed10 6a02 	vldr	s12, [r0, #-8]
 800c4e0:	ed50 6a01 	vldr	s13, [r0, #-4]
 800c4e4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c4e8:	edd5 7a00 	vldr	s15, [r5]
 800c4ec:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 800c4f0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c4f4:	ee67 7a83 	vmul.f32	s15, s15, s6
 800c4f8:	ed95 3a00 	vldr	s6, [r5]
 800c4fc:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 800c500:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c504:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c508:	3108      	adds	r1, #8
 800c50a:	edd5 3a00 	vldr	s7, [r5]
 800c50e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800c512:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c516:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c51a:	3020      	adds	r0, #32
 800c51c:	ed95 4a00 	vldr	s8, [r5]
 800c520:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800c524:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c528:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c52c:	edd5 4a00 	vldr	s9, [r5]
 800c530:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800c534:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c538:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c53c:	ed95 5a00 	vldr	s10, [r5]
 800c540:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800c544:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c548:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c54c:	edd5 5a00 	vldr	s11, [r5]
 800c550:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800c554:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c558:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c55c:	428e      	cmp	r6, r1
 800c55e:	ed95 6a00 	vldr	s12, [r5]
 800c562:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c566:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c56a:	d1a9      	bne.n	800c4c0 <forward_dense+0x170>
 800c56c:	f1a6 0108 	sub.w	r1, r6, #8
 800c570:	4650      	mov	r0, sl
 800c572:	2a00      	cmp	r2, #0
 800c574:	d04a      	beq.n	800c60c <forward_dense+0x2bc>
 800c576:	780d      	ldrb	r5, [r1, #0]
 800c578:	edd0 6a00 	vldr	s13, [r0]
 800c57c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c580:	edd5 7a00 	vldr	s15, [r5]
 800c584:	2a01      	cmp	r2, #1
 800c586:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c58a:	d03f      	beq.n	800c60c <forward_dense+0x2bc>
 800c58c:	784d      	ldrb	r5, [r1, #1]
 800c58e:	edd0 6a01 	vldr	s13, [r0, #4]
 800c592:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c596:	edd5 7a00 	vldr	s15, [r5]
 800c59a:	2a02      	cmp	r2, #2
 800c59c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c5a0:	d034      	beq.n	800c60c <forward_dense+0x2bc>
 800c5a2:	788d      	ldrb	r5, [r1, #2]
 800c5a4:	edd0 6a02 	vldr	s13, [r0, #8]
 800c5a8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c5ac:	edd5 7a00 	vldr	s15, [r5]
 800c5b0:	2a03      	cmp	r2, #3
 800c5b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c5b6:	d029      	beq.n	800c60c <forward_dense+0x2bc>
 800c5b8:	78cd      	ldrb	r5, [r1, #3]
 800c5ba:	edd0 6a03 	vldr	s13, [r0, #12]
 800c5be:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c5c2:	edd5 7a00 	vldr	s15, [r5]
 800c5c6:	2a04      	cmp	r2, #4
 800c5c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c5cc:	d01e      	beq.n	800c60c <forward_dense+0x2bc>
 800c5ce:	790d      	ldrb	r5, [r1, #4]
 800c5d0:	edd0 6a04 	vldr	s13, [r0, #16]
 800c5d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c5d8:	edd5 7a00 	vldr	s15, [r5]
 800c5dc:	2a05      	cmp	r2, #5
 800c5de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c5e2:	d013      	beq.n	800c60c <forward_dense+0x2bc>
 800c5e4:	794d      	ldrb	r5, [r1, #5]
 800c5e6:	edd0 6a05 	vldr	s13, [r0, #20]
 800c5ea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c5ee:	edd5 7a00 	vldr	s15, [r5]
 800c5f2:	2a06      	cmp	r2, #6
 800c5f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c5f8:	d008      	beq.n	800c60c <forward_dense+0x2bc>
 800c5fa:	7989      	ldrb	r1, [r1, #6]
 800c5fc:	edd0 7a06 	vldr	s15, [r0, #24]
 800c600:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c604:	edd1 6a00 	vldr	s13, [r1]
 800c608:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c60c:	44dc      	add	ip, fp
 800c60e:	445e      	add	r6, fp
 800c610:	ee32 7a87 	vadd.f32	s14, s5, s14
 800c614:	eca7 7a01 	vstmia	r7!, {s14}
 800c618:	454f      	cmp	r7, r9
 800c61a:	f4ff af43 	bcc.w	800c4a4 <forward_dense+0x154>
 800c61e:	9a06      	ldr	r2, [sp, #24]
 800c620:	eba9 0302 	sub.w	r3, r9, r2
 800c624:	3b01      	subs	r3, #1
 800c626:	f023 0303 	bic.w	r3, r3, #3
 800c62a:	3304      	adds	r3, #4
 800c62c:	18d3      	adds	r3, r2, r3
 800c62e:	9306      	str	r3, [sp, #24]
 800c630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c632:	9a05      	ldr	r2, [sp, #20]
 800c634:	4499      	add	r9, r3
 800c636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c638:	441a      	add	r2, r3
 800c63a:	9205      	str	r2, [sp, #20]
 800c63c:	9a02      	ldr	r2, [sp, #8]
 800c63e:	441a      	add	r2, r3
 800c640:	9202      	str	r2, [sp, #8]
 800c642:	9a04      	ldr	r2, [sp, #16]
 800c644:	441a      	add	r2, r3
 800c646:	9204      	str	r2, [sp, #16]
 800c648:	9b06      	ldr	r3, [sp, #24]
 800c64a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c64c:	4293      	cmp	r3, r2
 800c64e:	f4ff af08 	bcc.w	800c462 <forward_dense+0x112>
 800c652:	b015      	add	sp, #84	; 0x54
 800c654:	ecbd 8b02 	vpop	{d8}
 800c658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65c:	6853      	ldr	r3, [r2, #4]
 800c65e:	deff      	udf	#255	; 0xff
 800c660:	2300      	movs	r3, #0
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	deff      	udf	#255	; 0xff
 800c666:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800c67c <forward_dense+0x32c>
 800c66a:	eef0 2a48 	vmov.f32	s5, s16
 800c66e:	f1be 0f00 	cmp.w	lr, #0
 800c672:	f47f af22 	bne.w	800c4ba <forward_dense+0x16a>
 800c676:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c678:	4661      	mov	r1, ip
 800c67a:	e77a      	b.n	800c572 <forward_dense+0x222>
 800c67c:	00000000 	.word	0x00000000
 800c680:	4549      	cmp	r1, r9
 800c682:	d2d5      	bcs.n	800c630 <forward_dense+0x2e0>
 800c684:	9807      	ldr	r0, [sp, #28]
 800c686:	9103      	str	r1, [sp, #12]
 800c688:	9904      	ldr	r1, [sp, #16]
 800c68a:	f100 0c01 	add.w	ip, r0, #1
 800c68e:	3901      	subs	r1, #1
 800c690:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800c694:	9109      	str	r1, [sp, #36]	; 0x24
 800c696:	2b00      	cmp	r3, #0
 800c698:	f000 80b2 	beq.w	800c800 <forward_dense+0x4b0>
 800c69c:	9907      	ldr	r1, [sp, #28]
 800c69e:	ecf3 2a01 	vldmia	r3!, {s5}
 800c6a2:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800c67c <forward_dense+0x32c>
 800c6a6:	2900      	cmp	r1, #0
 800c6a8:	f000 80b2 	beq.w	800c810 <forward_dense+0x4c0>
 800c6ac:	9902      	ldr	r1, [sp, #8]
 800c6ae:	1d10      	adds	r0, r2, #4
 800c6b0:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 800c6b4:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800c6b8:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 800c6bc:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 800c6c0:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800c6c4:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 800c6c8:	ed11 5a04 	vldr	s10, [r1, #-16]
 800c6cc:	ed51 5a03 	vldr	s11, [r1, #-12]
 800c6d0:	ed11 6a02 	vldr	s12, [r1, #-8]
 800c6d4:	ed51 6a01 	vldr	s13, [r1, #-4]
 800c6d8:	f006 070f 	and.w	r7, r6, #15
 800c6dc:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800c6e0:	edd7 7a00 	vldr	s15, [r7]
 800c6e4:	0936      	lsrs	r6, r6, #4
 800c6e6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c6ea:	ed96 3a00 	vldr	s6, [r6]
 800c6ee:	ee67 7a82 	vmul.f32	s15, s15, s4
 800c6f2:	092e      	lsrs	r6, r5, #4
 800c6f4:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c6f8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c6fc:	f005 050f 	and.w	r5, r5, #15
 800c700:	edd6 3a00 	vldr	s7, [r6]
 800c704:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 800c708:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c70c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c710:	0937      	lsrs	r7, r6, #4
 800c712:	ed95 4a00 	vldr	s8, [r5]
 800c716:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800c71a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c71e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800c722:	f006 060f 	and.w	r6, r6, #15
 800c726:	edd7 4a00 	vldr	s9, [r7]
 800c72a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c72e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c732:	3004      	adds	r0, #4
 800c734:	ed96 5a00 	vldr	s10, [r6]
 800c738:	092e      	lsrs	r6, r5, #4
 800c73a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c73e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c742:	f005 050f 	and.w	r5, r5, #15
 800c746:	edd6 5a00 	vldr	s11, [r6]
 800c74a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c74e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c752:	4584      	cmp	ip, r0
 800c754:	ed95 6a00 	vldr	s12, [r5]
 800c758:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c75c:	f101 0120 	add.w	r1, r1, #32
 800c760:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c764:	d1a4      	bne.n	800c6b0 <forward_dense+0x360>
 800c766:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c76a:	f1ac 0804 	sub.w	r8, ip, #4
 800c76e:	9904      	ldr	r1, [sp, #16]
 800c770:	458e      	cmp	lr, r1
 800c772:	d22a      	bcs.n	800c7ca <forward_dense+0x47a>
 800c774:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c776:	eba1 070e 	sub.w	r7, r1, lr
 800c77a:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800c77e:	f10e 0008 	add.w	r0, lr, #8
 800c782:	f108 36ff 	add.w	r6, r8, #4294967295
 800c786:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800c78a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c78e:	ed50 5a01 	vldr	s11, [r0, #-4]
 800c792:	ed50 6a02 	vldr	s13, [r0, #-8]
 800c796:	f001 050f 	and.w	r5, r1, #15
 800c79a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c79e:	edd5 7a00 	vldr	s15, [r5]
 800c7a2:	0909      	lsrs	r1, r1, #4
 800c7a4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c7a8:	ed91 6a00 	vldr	s12, [r1]
 800c7ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c7b0:	42b7      	cmp	r7, r6
 800c7b2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c7b6:	f100 0008 	add.w	r0, r0, #8
 800c7ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c7be:	d1e4      	bne.n	800c78a <forward_dense+0x43a>
 800c7c0:	f10a 0a01 	add.w	sl, sl, #1
 800c7c4:	44d0      	add	r8, sl
 800c7c6:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800c7ca:	9908      	ldr	r1, [sp, #32]
 800c7cc:	b321      	cbz	r1, 800c818 <forward_dense+0x4c8>
 800c7ce:	f898 1000 	ldrb.w	r1, [r8]
 800c7d2:	edde 7a00 	vldr	s15, [lr]
 800c7d6:	0909      	lsrs	r1, r1, #4
 800c7d8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c7dc:	edd1 6a00 	vldr	s13, [r1]
 800c7e0:	9903      	ldr	r1, [sp, #12]
 800c7e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c7e6:	445a      	add	r2, fp
 800c7e8:	44dc      	add	ip, fp
 800c7ea:	ee72 2a87 	vadd.f32	s5, s5, s14
 800c7ee:	ece1 2a01 	vstmia	r1!, {s5}
 800c7f2:	4589      	cmp	r9, r1
 800c7f4:	9103      	str	r1, [sp, #12]
 800c7f6:	f67f af12 	bls.w	800c61e <forward_dense+0x2ce>
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f47f af4e 	bne.w	800c69c <forward_dense+0x34c>
 800c800:	9907      	ldr	r1, [sp, #28]
 800c802:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800c67c <forward_dense+0x32c>
 800c806:	eef0 2a48 	vmov.f32	s5, s16
 800c80a:	2900      	cmp	r1, #0
 800c80c:	f47f af4e 	bne.w	800c6ac <forward_dense+0x35c>
 800c810:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800c814:	4690      	mov	r8, r2
 800c816:	e7aa      	b.n	800c76e <forward_dense+0x41e>
 800c818:	9903      	ldr	r1, [sp, #12]
 800c81a:	ee32 7a87 	vadd.f32	s14, s5, s14
 800c81e:	445a      	add	r2, fp
 800c820:	eca1 7a01 	vstmia	r1!, {s14}
 800c824:	4549      	cmp	r1, r9
 800c826:	9103      	str	r1, [sp, #12]
 800c828:	44dc      	add	ip, fp
 800c82a:	f4ff af34 	bcc.w	800c696 <forward_dense+0x346>
 800c82e:	e6f6      	b.n	800c61e <forward_dense+0x2ce>
 800c830:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c832:	9d06      	ldr	r5, [sp, #24]
 800c834:	9101      	str	r1, [sp, #4]
 800c836:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c838:	9100      	str	r1, [sp, #0]
 800c83a:	4628      	mov	r0, r5
 800c83c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c83e:	f000 fc61 	bl	800d104 <forward_lite_dense_if32of32wf32>
 800c842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c844:	462b      	mov	r3, r5
 800c846:	4413      	add	r3, r2
 800c848:	9306      	str	r3, [sp, #24]
 800c84a:	e6f1      	b.n	800c630 <forward_dense+0x2e0>
 800c84c:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800c850:	f1b9 0f00 	cmp.w	r9, #0
 800c854:	d016      	beq.n	800c884 <forward_dense+0x534>
 800c856:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c85a:	f000 fe69 	bl	800d530 <ai_array_get_byte_size>
 800c85e:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800c862:	4602      	mov	r2, r0
 800c864:	4659      	mov	r1, fp
 800c866:	4640      	mov	r0, r8
 800c868:	f000 fd70 	bl	800d34c <st_int8_copy>
 800c86c:	e5c7      	b.n	800c3fe <forward_dense+0xae>
 800c86e:	2b04      	cmp	r3, #4
 800c870:	d00a      	beq.n	800c888 <forward_dense+0x538>
 800c872:	f04f 0900 	mov.w	r9, #0
 800c876:	e5bd      	b.n	800c3f4 <forward_dense+0xa4>
 800c878:	930d      	str	r3, [sp, #52]	; 0x34
 800c87a:	e595      	b.n	800c3a8 <forward_dense+0x58>
 800c87c:	2300      	movs	r3, #0
 800c87e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c880:	460b      	mov	r3, r1
 800c882:	e591      	b.n	800c3a8 <forward_dense+0x58>
 800c884:	46c3      	mov	fp, r8
 800c886:	e5ba      	b.n	800c3fe <forward_dense+0xae>
 800c888:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800c88c:	e5b7      	b.n	800c3fe <forward_dense+0xae>
 800c88e:	2300      	movs	r3, #0
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	deff      	udf	#255	; 0xff
 800c894:	2300      	movs	r3, #0
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	deff      	udf	#255	; 0xff
 800c89a:	bf00      	nop

0800c89c <forward_relu>:
 800c89c:	6982      	ldr	r2, [r0, #24]
 800c89e:	8813      	ldrh	r3, [r2, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d05b      	beq.n	800c95c <forward_relu+0xc0>
 800c8a4:	6851      	ldr	r1, [r2, #4]
 800c8a6:	684a      	ldr	r2, [r1, #4]
 800c8a8:	b102      	cbz	r2, 800c8ac <forward_relu+0x10>
 800c8aa:	6812      	ldr	r2, [r2, #0]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	f000 8123 	beq.w	800caf8 <forward_relu+0x25c>
 800c8b2:	b470      	push	{r4, r5, r6}
 800c8b4:	6909      	ldr	r1, [r1, #16]
 800c8b6:	b101      	cbz	r1, 800c8ba <forward_relu+0x1e>
 800c8b8:	6809      	ldr	r1, [r1, #0]
 800c8ba:	69c6      	ldr	r6, [r0, #28]
 800c8bc:	2e00      	cmp	r6, #0
 800c8be:	f000 8097 	beq.w	800c9f0 <forward_relu+0x154>
 800c8c2:	6873      	ldr	r3, [r6, #4]
 800c8c4:	6988      	ldr	r0, [r1, #24]
 800c8c6:	6991      	ldr	r1, [r2, #24]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	f000 80c1 	beq.w	800ca50 <forward_relu+0x1b4>
 800c8ce:	6893      	ldr	r3, [r2, #8]
 800c8d0:	6880      	ldr	r0, [r0, #8]
 800c8d2:	688c      	ldr	r4, [r1, #8]
 800c8d4:	0a1b      	lsrs	r3, r3, #8
 800c8d6:	f000 80f2 	beq.w	800cabe <forward_relu+0x222>
 800c8da:	68d5      	ldr	r5, [r2, #12]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c8e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c8e6:	42ab      	cmp	r3, r5
 800c8e8:	fb01 f202 	mul.w	r2, r1, r2
 800c8ec:	d1f9      	bne.n	800c8e2 <forward_relu+0x46>
 800c8ee:	68b3      	ldr	r3, [r6, #8]
 800c8f0:	ed93 7a02 	vldr	s14, [r3, #8]
 800c8f4:	edd3 6a00 	vldr	s13, [r3]
 800c8f8:	ed93 6a01 	vldr	s12, [r3, #4]
 800c8fc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800c900:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c904:	3a01      	subs	r2, #1
 800c906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c90a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c90e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800c912:	d425      	bmi.n	800c960 <forward_relu+0xc4>
 800c914:	429c      	cmp	r4, r3
 800c916:	d81f      	bhi.n	800c958 <forward_relu+0xbc>
 800c918:	1d1a      	adds	r2, r3, #4
 800c91a:	1d01      	adds	r1, r0, #4
 800c91c:	e00d      	b.n	800c93a <forward_relu+0x9e>
 800c91e:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c926:	db03      	blt.n	800c930 <forward_relu+0x94>
 800c928:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c92c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c930:	3b08      	subs	r3, #8
 800c932:	429c      	cmp	r4, r3
 800c934:	ed61 7a01 	vstmdb	r1!, {s15}
 800c938:	d80e      	bhi.n	800c958 <forward_relu+0xbc>
 800c93a:	4613      	mov	r3, r2
 800c93c:	ed72 7a01 	vldmdb	r2!, {s15}
 800c940:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c948:	d9e9      	bls.n	800c91e <forward_relu+0x82>
 800c94a:	3b08      	subs	r3, #8
 800c94c:	eef0 7a47 	vmov.f32	s15, s14
 800c950:	429c      	cmp	r4, r3
 800c952:	ed61 7a01 	vstmdb	r1!, {s15}
 800c956:	d9f0      	bls.n	800c93a <forward_relu+0x9e>
 800c958:	bc70      	pop	{r4, r5, r6}
 800c95a:	4770      	bx	lr
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	deff      	udf	#255	; 0xff
 800c960:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800c964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c968:	d11f      	bne.n	800c9aa <forward_relu+0x10e>
 800c96a:	429c      	cmp	r4, r3
 800c96c:	d8f4      	bhi.n	800c958 <forward_relu+0xbc>
 800c96e:	1b1c      	subs	r4, r3, r4
 800c970:	f024 0403 	bic.w	r4, r4, #3
 800c974:	1d1a      	adds	r2, r3, #4
 800c976:	2500      	movs	r5, #0
 800c978:	1b1b      	subs	r3, r3, r4
 800c97a:	1d01      	adds	r1, r0, #4
 800c97c:	ed72 7a01 	vldmdb	r2!, {s15}
 800c980:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c988:	dc0a      	bgt.n	800c9a0 <forward_relu+0x104>
 800c98a:	429a      	cmp	r2, r3
 800c98c:	f841 5d04 	str.w	r5, [r1, #-4]!
 800c990:	d0e2      	beq.n	800c958 <forward_relu+0xbc>
 800c992:	ed72 7a01 	vldmdb	r2!, {s15}
 800c996:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c99e:	ddf4      	ble.n	800c98a <forward_relu+0xee>
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	ed61 7a01 	vstmdb	r1!, {s15}
 800c9a6:	d1e9      	bne.n	800c97c <forward_relu+0xe0>
 800c9a8:	e7d6      	b.n	800c958 <forward_relu+0xbc>
 800c9aa:	429c      	cmp	r4, r3
 800c9ac:	d8d4      	bhi.n	800c958 <forward_relu+0xbc>
 800c9ae:	1b1c      	subs	r4, r3, r4
 800c9b0:	f024 0403 	bic.w	r4, r4, #3
 800c9b4:	1d1a      	adds	r2, r3, #4
 800c9b6:	1d01      	adds	r1, r0, #4
 800c9b8:	1b1b      	subs	r3, r3, r4
 800c9ba:	ed72 7a01 	vldmdb	r2!, {s15}
 800c9be:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c6:	db0e      	blt.n	800c9e6 <forward_relu+0x14a>
 800c9c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c9d2:	ed61 7a01 	vstmdb	r1!, {s15}
 800c9d6:	d0bf      	beq.n	800c958 <forward_relu+0xbc>
 800c9d8:	ed72 7a01 	vldmdb	r2!, {s15}
 800c9dc:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e4:	daf0      	bge.n	800c9c8 <forward_relu+0x12c>
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	ed61 7a01 	vstmdb	r1!, {s15}
 800c9ec:	d1e5      	bne.n	800c9ba <forward_relu+0x11e>
 800c9ee:	e7b3      	b.n	800c958 <forward_relu+0xbc>
 800c9f0:	6893      	ldr	r3, [r2, #8]
 800c9f2:	6989      	ldr	r1, [r1, #24]
 800c9f4:	6990      	ldr	r0, [r2, #24]
 800c9f6:	6889      	ldr	r1, [r1, #8]
 800c9f8:	6884      	ldr	r4, [r0, #8]
 800c9fa:	0a1b      	lsrs	r3, r3, #8
 800c9fc:	d075      	beq.n	800caea <forward_relu+0x24e>
 800c9fe:	68d5      	ldr	r5, [r2, #12]
 800ca00:	2201      	movs	r2, #1
 800ca02:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ca06:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800ca0a:	429d      	cmp	r5, r3
 800ca0c:	fb00 f202 	mul.w	r2, r0, r2
 800ca10:	d1f9      	bne.n	800ca06 <forward_relu+0x16a>
 800ca12:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800ca16:	3b01      	subs	r3, #1
 800ca18:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ca1c:	4294      	cmp	r4, r2
 800ca1e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800ca22:	d899      	bhi.n	800c958 <forward_relu+0xbc>
 800ca24:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800cb00 <forward_relu+0x264>
 800ca28:	3204      	adds	r2, #4
 800ca2a:	3104      	adds	r1, #4
 800ca2c:	4613      	mov	r3, r2
 800ca2e:	ed72 7a01 	vldmdb	r2!, {s15}
 800ca32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ca36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca3a:	f1a3 0308 	sub.w	r3, r3, #8
 800ca3e:	bfb8      	it	lt
 800ca40:	eef0 7a47 	vmovlt.f32	s15, s14
 800ca44:	429c      	cmp	r4, r3
 800ca46:	ed61 7a01 	vstmdb	r1!, {s15}
 800ca4a:	d9ef      	bls.n	800ca2c <forward_relu+0x190>
 800ca4c:	bc70      	pop	{r4, r5, r6}
 800ca4e:	4770      	bx	lr
 800ca50:	688c      	ldr	r4, [r1, #8]
 800ca52:	6891      	ldr	r1, [r2, #8]
 800ca54:	6880      	ldr	r0, [r0, #8]
 800ca56:	0a09      	lsrs	r1, r1, #8
 800ca58:	d049      	beq.n	800caee <forward_relu+0x252>
 800ca5a:	68d5      	ldr	r5, [r2, #12]
 800ca5c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800ca60:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ca64:	42aa      	cmp	r2, r5
 800ca66:	fb01 f303 	mul.w	r3, r1, r3
 800ca6a:	d1f9      	bne.n	800ca60 <forward_relu+0x1c4>
 800ca6c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800ca70:	3a01      	subs	r2, #1
 800ca72:	68b1      	ldr	r1, [r6, #8]
 800ca74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca78:	429c      	cmp	r4, r3
 800ca7a:	ed91 7a00 	vldr	s14, [r1]
 800ca7e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800ca82:	f63f af69 	bhi.w	800c958 <forward_relu+0xbc>
 800ca86:	2500      	movs	r5, #0
 800ca88:	3304      	adds	r3, #4
 800ca8a:	1d02      	adds	r2, r0, #4
 800ca8c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ca90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ca94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca98:	f1a3 0104 	sub.w	r1, r3, #4
 800ca9c:	f1a3 0308 	sub.w	r3, r3, #8
 800caa0:	d406      	bmi.n	800cab0 <forward_relu+0x214>
 800caa2:	429c      	cmp	r4, r3
 800caa4:	f842 5d04 	str.w	r5, [r2, #-4]!
 800caa8:	f63f af56 	bhi.w	800c958 <forward_relu+0xbc>
 800caac:	460b      	mov	r3, r1
 800caae:	e7ed      	b.n	800ca8c <forward_relu+0x1f0>
 800cab0:	429c      	cmp	r4, r3
 800cab2:	ed62 7a01 	vstmdb	r2!, {s15}
 800cab6:	f63f af4f 	bhi.w	800c958 <forward_relu+0xbc>
 800caba:	460b      	mov	r3, r1
 800cabc:	e7e6      	b.n	800ca8c <forward_relu+0x1f0>
 800cabe:	68b3      	ldr	r3, [r6, #8]
 800cac0:	ed93 7a02 	vldr	s14, [r3, #8]
 800cac4:	edd3 6a00 	vldr	s13, [r3]
 800cac8:	ed93 6a01 	vldr	s12, [r3, #4]
 800cacc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800cad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad4:	d401      	bmi.n	800cada <forward_relu+0x23e>
 800cad6:	4623      	mov	r3, r4
 800cad8:	e71e      	b.n	800c918 <forward_relu+0x7c>
 800cada:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cae2:	4623      	mov	r3, r4
 800cae4:	f47f af63 	bne.w	800c9ae <forward_relu+0x112>
 800cae8:	e741      	b.n	800c96e <forward_relu+0xd2>
 800caea:	4622      	mov	r2, r4
 800caec:	e79a      	b.n	800ca24 <forward_relu+0x188>
 800caee:	68b2      	ldr	r2, [r6, #8]
 800caf0:	4623      	mov	r3, r4
 800caf2:	ed92 7a00 	vldr	s14, [r2]
 800caf6:	e7c6      	b.n	800ca86 <forward_relu+0x1ea>
 800caf8:	2300      	movs	r3, #0
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	deff      	udf	#255	; 0xff
 800cafe:	bf00      	nop
 800cb00:	00000000 	.word	0x00000000

0800cb04 <forward_sm>:
 800cb04:	6982      	ldr	r2, [r0, #24]
 800cb06:	8813      	ldrh	r3, [r2, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d07c      	beq.n	800cc06 <forward_sm+0x102>
 800cb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb10:	ed2d 8b04 	vpush	{d8-d9}
 800cb14:	6852      	ldr	r2, [r2, #4]
 800cb16:	6854      	ldr	r4, [r2, #4]
 800cb18:	b085      	sub	sp, #20
 800cb1a:	b104      	cbz	r4, 800cb1e <forward_sm+0x1a>
 800cb1c:	6824      	ldr	r4, [r4, #0]
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d076      	beq.n	800cc10 <forward_sm+0x10c>
 800cb22:	6913      	ldr	r3, [r2, #16]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d076      	beq.n	800cc16 <forward_sm+0x112>
 800cb28:	681e      	ldr	r6, [r3, #0]
 800cb2a:	68a3      	ldr	r3, [r4, #8]
 800cb2c:	68e0      	ldr	r0, [r4, #12]
 800cb2e:	68f2      	ldr	r2, [r6, #12]
 800cb30:	6845      	ldr	r5, [r0, #4]
 800cb32:	6857      	ldr	r7, [r2, #4]
 800cb34:	0a1b      	lsrs	r3, r3, #8
 800cb36:	d068      	beq.n	800cc0a <forward_sm+0x106>
 800cb38:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb42:	4298      	cmp	r0, r3
 800cb44:	fb01 f202 	mul.w	r2, r1, r2
 800cb48:	d1f9      	bne.n	800cb3e <forward_sm+0x3a>
 800cb4a:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800cb4e:	69a2      	ldr	r2, [r4, #24]
 800cb50:	69b3      	ldr	r3, [r6, #24]
 800cb52:	6892      	ldr	r2, [r2, #8]
 800cb54:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800cb58:	eb02 0309 	add.w	r3, r2, r9
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	9301      	str	r3, [sp, #4]
 800cb60:	d24c      	bcs.n	800cbfc <forward_sm+0xf8>
 800cb62:	00bb      	lsls	r3, r7, #2
 800cb64:	9303      	str	r3, [sp, #12]
 800cb66:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800cb6a:	00ab      	lsls	r3, r5, #2
 800cb6c:	2d01      	cmp	r5, #1
 800cb6e:	ed92 8a00 	vldr	s16, [r2]
 800cb72:	9302      	str	r3, [sp, #8]
 800cb74:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800cb78:	463e      	mov	r6, r7
 800cb7a:	d93c      	bls.n	800cbf6 <forward_sm+0xf2>
 800cb7c:	1d13      	adds	r3, r2, #4
 800cb7e:	ecf3 7a01 	vldmia	r3!, {s15}
 800cb82:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb8a:	bfb8      	it	lt
 800cb8c:	eeb0 8a67 	vmovlt.f32	s16, s15
 800cb90:	429e      	cmp	r6, r3
 800cb92:	d1f4      	bne.n	800cb7e <forward_sm+0x7a>
 800cb94:	eddf 8a21 	vldr	s17, [pc, #132]	; 800cc1c <forward_sm+0x118>
 800cb98:	4692      	mov	sl, r2
 800cb9a:	46c3      	mov	fp, r8
 800cb9c:	46c1      	mov	r9, r8
 800cb9e:	2400      	movs	r4, #0
 800cba0:	ecba 0a01 	vldmia	sl!, {s0}
 800cba4:	ee30 0a48 	vsub.f32	s0, s0, s16
 800cba8:	f003 fd62 	bl	8010670 <expf>
 800cbac:	3401      	adds	r4, #1
 800cbae:	42a5      	cmp	r5, r4
 800cbb0:	ee78 8a80 	vadd.f32	s17, s17, s0
 800cbb4:	eca9 0a01 	vstmia	r9!, {s0}
 800cbb8:	d8f2      	bhi.n	800cba0 <forward_sm+0x9c>
 800cbba:	eef5 8a40 	vcmp.f32	s17, #0.0
 800cbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc2:	d00b      	beq.n	800cbdc <forward_sm+0xd8>
 800cbc4:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800cbc8:	2300      	movs	r3, #0
 800cbca:	3301      	adds	r3, #1
 800cbcc:	429d      	cmp	r5, r3
 800cbce:	eddb 7a00 	vldr	s15, [fp]
 800cbd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbd6:	eceb 7a01 	vstmia	fp!, {s15}
 800cbda:	d8f6      	bhi.n	800cbca <forward_sm+0xc6>
 800cbdc:	9b03      	ldr	r3, [sp, #12]
 800cbde:	9901      	ldr	r1, [sp, #4]
 800cbe0:	4498      	add	r8, r3
 800cbe2:	9b02      	ldr	r3, [sp, #8]
 800cbe4:	42b9      	cmp	r1, r7
 800cbe6:	463a      	mov	r2, r7
 800cbe8:	441e      	add	r6, r3
 800cbea:	d907      	bls.n	800cbfc <forward_sm+0xf8>
 800cbec:	2d01      	cmp	r5, #1
 800cbee:	ed92 8a00 	vldr	s16, [r2]
 800cbf2:	441f      	add	r7, r3
 800cbf4:	d8c2      	bhi.n	800cb7c <forward_sm+0x78>
 800cbf6:	2d00      	cmp	r5, #0
 800cbf8:	d0f0      	beq.n	800cbdc <forward_sm+0xd8>
 800cbfa:	e7cb      	b.n	800cb94 <forward_sm+0x90>
 800cbfc:	b005      	add	sp, #20
 800cbfe:	ecbd 8b04 	vpop	{d8-d9}
 800cc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	deff      	udf	#255	; 0xff
 800cc0a:	f04f 0904 	mov.w	r9, #4
 800cc0e:	e79e      	b.n	800cb4e <forward_sm+0x4a>
 800cc10:	2300      	movs	r3, #0
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	deff      	udf	#255	; 0xff
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	deff      	udf	#255	; 0xff
 800cc1a:	bf00      	nop
 800cc1c:	00000000 	.word	0x00000000

0800cc20 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 800cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	b08d      	sub	sp, #52	; 0x34
 800cc26:	9003      	str	r0, [sp, #12]
 800cc28:	9207      	str	r2, [sp, #28]
 800cc2a:	9308      	str	r3, [sp, #32]
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
 800cc32:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800cc34:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800cc36:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 800cc3a:	910b      	str	r1, [sp, #44]	; 0x2c
 800cc3c:	fb00 f003 	mul.w	r0, r0, r3
 800cc40:	9004      	str	r0, [sp, #16]
 800cc42:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 800cc46:	9009      	str	r0, [sp, #36]	; 0x24
 800cc48:	2d00      	cmp	r5, #0
 800cc4a:	f000 80ef 	beq.w	800ce2c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 800cc4e:	fb00 f302 	mul.w	r3, r0, r2
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	9306      	str	r3, [sp, #24]
 800cc56:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cc58:	fb03 f302 	mul.w	r3, r3, r2
 800cc5c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cc60:	9301      	str	r3, [sp, #4]
 800cc62:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cc64:	425b      	negs	r3, r3
 800cc66:	9300      	str	r3, [sp, #0]
 800cc68:	2300      	movs	r3, #0
 800cc6a:	00a4      	lsls	r4, r4, #2
 800cc6c:	9302      	str	r3, [sp, #8]
 800cc6e:	0093      	lsls	r3, r2, #2
 800cc70:	9405      	str	r4, [sp, #20]
 800cc72:	930a      	str	r3, [sp, #40]	; 0x28
 800cc74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f2c0 80db 	blt.w	800ce32 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x212>
 800cc7c:	9e01      	ldr	r6, [sp, #4]
 800cc7e:	9d04      	ldr	r5, [sp, #16]
 800cc80:	2000      	movs	r0, #0
 800cc82:	9b07      	ldr	r3, [sp, #28]
 800cc84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc86:	9900      	ldr	r1, [sp, #0]
 800cc88:	fb05 3502 	mla	r5, r5, r2, r3
 800cc8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc8e:	440b      	add	r3, r1
 800cc90:	9919      	ldr	r1, [sp, #100]	; 0x64
 800cc92:	428b      	cmp	r3, r1
 800cc94:	bf94      	ite	ls
 800cc96:	ebc0 0003 	rsbls	r0, r0, r3
 800cc9a:	ebc0 0001 	rsbhi	r0, r0, r1
 800cc9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cca0:	eba3 0a00 	sub.w	sl, r3, r0
 800cca4:	9b08      	ldr	r3, [sp, #32]
 800cca6:	f1bb 0f00 	cmp.w	fp, #0
 800ccaa:	eba1 0900 	sub.w	r9, r1, r0
 800ccae:	eeb0 7a40 	vmov.f32	s14, s0
 800ccb2:	fb03 f000 	mul.w	r0, r3, r0
 800ccb6:	f340 80a1 	ble.w	800cdfc <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>
 800ccba:	f020 040f 	bic.w	r4, r0, #15
 800ccbe:	f104 38ff 	add.w	r8, r4, #4294967295
 800ccc2:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800ccc6:	f108 0801 	add.w	r8, r8, #1
 800ccca:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800ccce:	fb02 fa0a 	mul.w	sl, r2, sl
 800ccd2:	fb02 f909 	mul.w	r9, r2, r9
 800ccd6:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800ccda:	f04f 0c00 	mov.w	ip, #0
 800ccde:	2c00      	cmp	r4, #0
 800cce0:	bfd8      	it	le
 800cce2:	2700      	movle	r7, #0
 800cce4:	dd70      	ble.n	800cdc8 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 800cce6:	f106 0240 	add.w	r2, r6, #64	; 0x40
 800ccea:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800ccee:	2100      	movs	r1, #0
 800ccf0:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 800ccf4:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800ccf8:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 800ccfc:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 800cd00:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 800cd04:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 800cd08:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 800cd0c:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 800cd10:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 800cd14:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 800cd18:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800cd1c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 800cd20:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 800cd24:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cd28:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800cd2c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cd30:	3110      	adds	r1, #16
 800cd32:	42a1      	cmp	r1, r4
 800cd34:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 800cd38:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 800cd3c:	eee5 7a86 	vfma.f32	s15, s11, s12
 800cd40:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800cd44:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800cd48:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 800cd4c:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800cd50:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800cd54:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 800cd58:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 800cd5c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cd60:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 800cd64:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 800cd68:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cd6c:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 800cd70:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 800cd74:	eee3 7a23 	vfma.f32	s15, s6, s7
 800cd78:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800cd7c:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800cd80:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cd84:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800cd88:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800cd8c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cd90:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800cd94:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800cd98:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cd9c:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800cda0:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 800cda4:	eee1 7a21 	vfma.f32	s15, s2, s3
 800cda8:	eee2 7a22 	vfma.f32	s15, s4, s5
 800cdac:	eee3 7a23 	vfma.f32	s15, s6, s7
 800cdb0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cdb4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cdb8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cdbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cdc0:	db96      	blt.n	800ccf0 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd0>
 800cdc2:	4476      	add	r6, lr
 800cdc4:	4475      	add	r5, lr
 800cdc6:	4647      	mov	r7, r8
 800cdc8:	42b8      	cmp	r0, r7
 800cdca:	dd10      	ble.n	800cdee <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 800cdcc:	463b      	mov	r3, r7
 800cdce:	4631      	mov	r1, r6
 800cdd0:	462a      	mov	r2, r5
 800cdd2:	ecf2 6a01 	vldmia	r2!, {s13}
 800cdd6:	ecf1 7a01 	vldmia	r1!, {s15}
 800cdda:	3301      	adds	r3, #1
 800cddc:	4298      	cmp	r0, r3
 800cdde:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cde2:	d1f6      	bne.n	800cdd2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 800cde4:	1bc7      	subs	r7, r0, r7
 800cde6:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800cdea:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800cdee:	f10c 0c01 	add.w	ip, ip, #1
 800cdf2:	45dc      	cmp	ip, fp
 800cdf4:	4456      	add	r6, sl
 800cdf6:	444d      	add	r5, r9
 800cdf8:	f47f af71 	bne.w	800ccde <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xbe>
 800cdfc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cdfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce00:	9a03      	ldr	r2, [sp, #12]
 800ce02:	9b02      	ldr	r3, [sp, #8]
 800ce04:	ed82 7a00 	vstr	s14, [r2]
 800ce08:	4401      	add	r1, r0
 800ce0a:	911c      	str	r1, [sp, #112]	; 0x70
 800ce0c:	9905      	ldr	r1, [sp, #20]
 800ce0e:	440a      	add	r2, r1
 800ce10:	9203      	str	r2, [sp, #12]
 800ce12:	9a00      	ldr	r2, [sp, #0]
 800ce14:	9906      	ldr	r1, [sp, #24]
 800ce16:	1a12      	subs	r2, r2, r0
 800ce18:	9200      	str	r2, [sp, #0]
 800ce1a:	9a01      	ldr	r2, [sp, #4]
 800ce1c:	440a      	add	r2, r1
 800ce1e:	9201      	str	r2, [sp, #4]
 800ce20:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ce22:	3301      	adds	r3, #1
 800ce24:	4293      	cmp	r3, r2
 800ce26:	9302      	str	r3, [sp, #8]
 800ce28:	f47f af24 	bne.w	800cc74 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x54>
 800ce2c:	b00d      	add	sp, #52	; 0x34
 800ce2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce32:	9a00      	ldr	r2, [sp, #0]
 800ce34:	9b04      	ldr	r3, [sp, #16]
 800ce36:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ce38:	4610      	mov	r0, r2
 800ce3a:	189d      	adds	r5, r3, r2
 800ce3c:	e721      	b.n	800cc82 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x62>
 800ce3e:	bf00      	nop

0800ce40 <forward_lite_conv2d_if32of32wf32>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	ed2d 8b02 	vpush	{d8}
 800ce48:	b09f      	sub	sp, #124	; 0x7c
 800ce4a:	af08      	add	r7, sp, #32
 800ce4c:	461c      	mov	r4, r3
 800ce4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ce50:	63fc      	str	r4, [r7, #60]	; 0x3c
 800ce52:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 800ce56:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	; 0xb0
 800ce5a:	64fc      	str	r4, [r7, #76]	; 0x4c
 800ce5c:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800ce60:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	; 0xb4
 800ce64:	6078      	str	r0, [r7, #4]
 800ce66:	424e      	negs	r6, r1
 800ce68:	4686      	mov	lr, r0
 800ce6a:	4694      	mov	ip, r2
 800ce6c:	613a      	str	r2, [r7, #16]
 800ce6e:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	; 0x88
 800ce72:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ce76:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 800ce7a:	617d      	str	r5, [r7, #20]
 800ce7c:	633e      	str	r6, [r7, #48]	; 0x30
 800ce7e:	2c00      	cmp	r4, #0
 800ce80:	f000 8092 	beq.w	800cfa8 <forward_lite_conv2d_if32of32wf32+0x168>
 800ce84:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800ce88:	6379      	str	r1, [r7, #52]	; 0x34
 800ce8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ce8e:	eddf 0a9c 	vldr	s1, [pc, #624]	; 800d100 <forward_lite_conv2d_if32of32wf32+0x2c0>
 800ce92:	fb04 f202 	mul.w	r2, r4, r2
 800ce96:	fb03 f402 	mul.w	r4, r3, r2
 800ce9a:	fb03 f201 	mul.w	r2, r3, r1
 800ce9e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800cea2:	63bc      	str	r4, [r7, #56]	; 0x38
 800cea4:	fb01 f10a 	mul.w	r1, r1, sl
 800cea8:	0089      	lsls	r1, r1, #2
 800ceaa:	61b9      	str	r1, [r7, #24]
 800ceac:	fb05 f102 	mul.w	r1, r5, r2
 800ceb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ceb4:	fb06 f202 	mul.w	r2, r6, r2
 800ceb8:	0089      	lsls	r1, r1, #2
 800ceba:	61f9      	str	r1, [r7, #28]
 800cebc:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 800cec0:	f10b 0207 	add.w	r2, fp, #7
 800cec4:	62b9      	str	r1, [r7, #40]	; 0x28
 800cec6:	f022 0107 	bic.w	r1, r2, #7
 800ceca:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 800cece:	4240      	negs	r0, r0
 800ced0:	60f9      	str	r1, [r7, #12]
 800ced2:	60ba      	str	r2, [r7, #8]
 800ced4:	f10c 4178 	add.w	r1, ip, #4160749568	; 0xf8000000
 800ced8:	2200      	movs	r2, #0
 800ceda:	4655      	mov	r5, sl
 800cedc:	6538      	str	r0, [r7, #80]	; 0x50
 800cede:	6239      	str	r1, [r7, #32]
 800cee0:	627a      	str	r2, [r7, #36]	; 0x24
 800cee2:	46da      	mov	sl, fp
 800cee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cee6:	2a00      	cmp	r2, #0
 800cee8:	f2c0 80d7 	blt.w	800d09a <forward_lite_conv2d_if32of32wf32+0x25a>
 800ceec:	2200      	movs	r2, #0
 800ceee:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
 800cef2:	657a      	str	r2, [r7, #84]	; 0x54
 800cef4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cef6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cefa:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800cefe:	440a      	add	r2, r1
 800cf00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf02:	4282      	cmp	r2, r0
 800cf04:	bf94      	ite	ls
 800cf06:	ebc1 0102 	rsbls	r1, r1, r2
 800cf0a:	ebc1 0100 	rsbhi	r1, r1, r0
 800cf0e:	6a3a      	ldr	r2, [r7, #32]
 800cf10:	6439      	str	r1, [r7, #64]	; 0x40
 800cf12:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800cf16:	d24d      	bcs.n	800cfb4 <forward_lite_conv2d_if32of32wf32+0x174>
 800cf18:	b385      	cbz	r5, 800cf7c <forward_lite_conv2d_if32of32wf32+0x13c>
 800cf1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf1c:	2a00      	cmp	r2, #0
 800cf1e:	f000 80c1 	beq.w	800d0a4 <forward_lite_conv2d_if32of32wf32+0x264>
 800cf22:	4659      	mov	r1, fp
 800cf24:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 800cf28:	693e      	ldr	r6, [r7, #16]
 800cf2a:	46d3      	mov	fp, sl
 800cf2c:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 800cf30:	4691      	mov	r9, r2
 800cf32:	2400      	movs	r4, #0
 800cf34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf36:	ecb9 0a01 	vldmia	r9!, {s0}
 800cf3a:	9207      	str	r2, [sp, #28]
 800cf3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf3e:	e9cd a205 	strd	sl, r2, [sp, #20]
 800cf42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf44:	9204      	str	r2, [sp, #16]
 800cf46:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800cf4a:	9203      	str	r2, [sp, #12]
 800cf4c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cf50:	9202      	str	r2, [sp, #8]
 800cf52:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cf56:	4640      	mov	r0, r8
 800cf58:	e9cd 5200 	strd	r5, r2, [sp]
 800cf5c:	3401      	adds	r4, #1
 800cf5e:	4632      	mov	r2, r6
 800cf60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cf64:	64b9      	str	r1, [r7, #72]	; 0x48
 800cf66:	f7ff fe5b 	bl	800cc20 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800cf6a:	42a5      	cmp	r5, r4
 800cf6c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cf6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cf72:	445e      	add	r6, fp
 800cf74:	f108 0804 	add.w	r8, r8, #4
 800cf78:	d1dc      	bne.n	800cf34 <forward_lite_conv2d_if32of32wf32+0xf4>
 800cf7a:	46da      	mov	sl, fp
 800cf7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf7e:	69b8      	ldr	r0, [r7, #24]
 800cf80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf82:	4401      	add	r1, r0
 800cf84:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cf86:	6978      	ldr	r0, [r7, #20]
 800cf88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf8a:	4401      	add	r1, r0
 800cf8c:	6339      	str	r1, [r7, #48]	; 0x30
 800cf8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf90:	1a09      	subs	r1, r1, r0
 800cf92:	6379      	str	r1, [r7, #52]	; 0x34
 800cf94:	69f8      	ldr	r0, [r7, #28]
 800cf96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf98:	4401      	add	r1, r0
 800cf9a:	62b9      	str	r1, [r7, #40]	; 0x28
 800cf9c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800cfa0:	3201      	adds	r2, #1
 800cfa2:	4291      	cmp	r1, r2
 800cfa4:	627a      	str	r2, [r7, #36]	; 0x24
 800cfa6:	d19d      	bne.n	800cee4 <forward_lite_conv2d_if32of32wf32+0xa4>
 800cfa8:	375c      	adds	r7, #92	; 0x5c
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	ecbd 8b02 	vpop	{d8}
 800cfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb4:	466a      	mov	r2, sp
 800cfb6:	ee08 2a10 	vmov	s16, r2
 800cfba:	68fa      	ldr	r2, [r7, #12]
 800cfbc:	ebad 0d02 	sub.w	sp, sp, r2
 800cfc0:	aa08      	add	r2, sp, #32
 800cfc2:	2d00      	cmp	r5, #0
 800cfc4:	d03d      	beq.n	800d042 <forward_lite_conv2d_if32of32wf32+0x202>
 800cfc6:	6938      	ldr	r0, [r7, #16]
 800cfc8:	68bc      	ldr	r4, [r7, #8]
 800cfca:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
 800cfce:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800cfd0:	4659      	mov	r1, fp
 800cfd2:	f04f 0800 	mov.w	r8, #0
 800cfd6:	46ab      	mov	fp, r5
 800cfd8:	4605      	mov	r5, r0
 800cfda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cfdc:	b138      	cbz	r0, 800cfee <forward_lite_conv2d_if32of32wf32+0x1ae>
 800cfde:	4628      	mov	r0, r5
 800cfe0:	4694      	mov	ip, r2
 800cfe2:	f850 eb04 	ldr.w	lr, [r0], #4
 800cfe6:	f84c eb04 	str.w	lr, [ip], #4
 800cfea:	42a0      	cmp	r0, r4
 800cfec:	d1f9      	bne.n	800cfe2 <forward_lite_conv2d_if32of32wf32+0x1a2>
 800cfee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cff0:	b358      	cbz	r0, 800d04a <forward_lite_conv2d_if32of32wf32+0x20a>
 800cff2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cff4:	ecb6 0a01 	vldmia	r6!, {s0}
 800cff8:	9007      	str	r0, [sp, #28]
 800cffa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cffc:	9006      	str	r0, [sp, #24]
 800cffe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d000:	9005      	str	r0, [sp, #20]
 800d002:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d004:	9004      	str	r0, [sp, #16]
 800d006:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800d00a:	9003      	str	r0, [sp, #12]
 800d00c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800d010:	9002      	str	r0, [sp, #8]
 800d012:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d016:	f108 0801 	add.w	r8, r8, #1
 800d01a:	e9cd b000 	strd	fp, r0, [sp]
 800d01e:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 800d022:	4648      	mov	r0, r9
 800d024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d028:	f7ff fdfa 	bl	800cc20 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800d02c:	45d8      	cmp	r8, fp
 800d02e:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 800d032:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d036:	4455      	add	r5, sl
 800d038:	4454      	add	r4, sl
 800d03a:	f109 0904 	add.w	r9, r9, #4
 800d03e:	d1cc      	bne.n	800cfda <forward_lite_conv2d_if32of32wf32+0x19a>
 800d040:	465d      	mov	r5, fp
 800d042:	ee18 2a10 	vmov	r2, s16
 800d046:	4695      	mov	sp, r2
 800d048:	e798      	b.n	800cf7c <forward_lite_conv2d_if32of32wf32+0x13c>
 800d04a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d04c:	9007      	str	r0, [sp, #28]
 800d04e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d050:	9006      	str	r0, [sp, #24]
 800d052:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d054:	9005      	str	r0, [sp, #20]
 800d056:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d058:	9004      	str	r0, [sp, #16]
 800d05a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800d05e:	9003      	str	r0, [sp, #12]
 800d060:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800d064:	9002      	str	r0, [sp, #8]
 800d066:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d06a:	eeb0 0a60 	vmov.f32	s0, s1
 800d06e:	e9cd b000 	strd	fp, r0, [sp]
 800d072:	f108 0801 	add.w	r8, r8, #1
 800d076:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 800d07a:	4648      	mov	r0, r9
 800d07c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d080:	f7ff fdce 	bl	800cc20 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800d084:	45c3      	cmp	fp, r8
 800d086:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 800d08a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d08e:	4455      	add	r5, sl
 800d090:	4454      	add	r4, sl
 800d092:	f109 0904 	add.w	r9, r9, #4
 800d096:	d1a0      	bne.n	800cfda <forward_lite_conv2d_if32of32wf32+0x19a>
 800d098:	e7d2      	b.n	800d040 <forward_lite_conv2d_if32of32wf32+0x200>
 800d09a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d09c:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800d0a0:	657a      	str	r2, [r7, #84]	; 0x54
 800d0a2:	e727      	b.n	800cef4 <forward_lite_conv2d_if32of32wf32+0xb4>
 800d0a4:	4659      	mov	r1, fp
 800d0a6:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 800d0aa:	693e      	ldr	r6, [r7, #16]
 800d0ac:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
 800d0b0:	46d3      	mov	fp, sl
 800d0b2:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 800d0b6:	4614      	mov	r4, r2
 800d0b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d0ba:	9207      	str	r2, [sp, #28]
 800d0bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0be:	f8cd 9010 	str.w	r9, [sp, #16]
 800d0c2:	e9cd a205 	strd	sl, r2, [sp, #20]
 800d0c6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d0ca:	9203      	str	r2, [sp, #12]
 800d0cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d0d0:	9202      	str	r2, [sp, #8]
 800d0d2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d0d6:	4640      	mov	r0, r8
 800d0d8:	e9cd 5200 	strd	r5, r2, [sp]
 800d0dc:	eeb0 0a60 	vmov.f32	s0, s1
 800d0e0:	4632      	mov	r2, r6
 800d0e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d0e6:	6579      	str	r1, [r7, #84]	; 0x54
 800d0e8:	3401      	adds	r4, #1
 800d0ea:	f7ff fd99 	bl	800cc20 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800d0ee:	42a5      	cmp	r5, r4
 800d0f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d0f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d0f6:	445e      	add	r6, fp
 800d0f8:	f108 0804 	add.w	r8, r8, #4
 800d0fc:	d1dc      	bne.n	800d0b8 <forward_lite_conv2d_if32of32wf32+0x278>
 800d0fe:	e73c      	b.n	800cf7a <forward_lite_conv2d_if32of32wf32+0x13a>
 800d100:	00000000 	.word	0x00000000

0800d104 <forward_lite_dense_if32of32wf32>:
 800d104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d108:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 800d10c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800d110:	4287      	cmp	r7, r0
 800d112:	f240 8106 	bls.w	800d322 <forward_lite_dense_if32of32wf32+0x21e>
 800d116:	f1a6 0810 	sub.w	r8, r6, #16
 800d11a:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800d11e:	f108 0801 	add.w	r8, r8, #1
 800d122:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800d126:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800d12a:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800d12e:	4605      	mov	r5, r0
 800d130:	f006 0a0f 	and.w	sl, r6, #15
 800d134:	2e0f      	cmp	r6, #15
 800d136:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800d348 <forward_lite_dense_if32of32wf32+0x244>
 800d13a:	f240 8101 	bls.w	800d340 <forward_lite_dense_if32of32wf32+0x23c>
 800d13e:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800d142:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800d146:	46b6      	mov	lr, r6
 800d148:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 800d14c:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800d150:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 800d154:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800d158:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 800d15c:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800d160:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 800d164:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 800d168:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 800d16c:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800d170:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800d174:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800d178:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800d17c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d180:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800d184:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d188:	f1ae 0e10 	sub.w	lr, lr, #16
 800d18c:	f1be 0f0f 	cmp.w	lr, #15
 800d190:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 800d194:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800d198:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d19c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800d1a0:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800d1a4:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 800d1a8:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 800d1ac:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800d1b0:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 800d1b4:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 800d1b8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d1bc:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 800d1c0:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 800d1c4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d1c8:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800d1cc:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 800d1d0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800d1d4:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800d1d8:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800d1dc:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d1e0:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800d1e4:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800d1e8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d1ec:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800d1f0:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800d1f4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d1f8:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800d1fc:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800d200:	eee1 7a21 	vfma.f32	s15, s2, s3
 800d204:	eee2 7a22 	vfma.f32	s15, s4, s5
 800d208:	eee3 7a23 	vfma.f32	s15, s6, s7
 800d20c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d210:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d214:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d218:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d21c:	d894      	bhi.n	800d148 <forward_lite_dense_if32of32wf32+0x44>
 800d21e:	eb02 0e0b 	add.w	lr, r2, fp
 800d222:	4654      	mov	r4, sl
 800d224:	46c4      	mov	ip, r8
 800d226:	2c00      	cmp	r4, #0
 800d228:	d075      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d22a:	eddc 6a00 	vldr	s13, [ip]
 800d22e:	edde 7a00 	vldr	s15, [lr]
 800d232:	2c01      	cmp	r4, #1
 800d234:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d238:	d06d      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d23a:	eddc 6a01 	vldr	s13, [ip, #4]
 800d23e:	edde 7a01 	vldr	s15, [lr, #4]
 800d242:	2c02      	cmp	r4, #2
 800d244:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d248:	d065      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d24a:	eddc 6a02 	vldr	s13, [ip, #8]
 800d24e:	edde 7a02 	vldr	s15, [lr, #8]
 800d252:	2c03      	cmp	r4, #3
 800d254:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d258:	d05d      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d25a:	eddc 6a03 	vldr	s13, [ip, #12]
 800d25e:	edde 7a03 	vldr	s15, [lr, #12]
 800d262:	2c04      	cmp	r4, #4
 800d264:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d268:	d055      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d26a:	eddc 6a04 	vldr	s13, [ip, #16]
 800d26e:	edde 7a04 	vldr	s15, [lr, #16]
 800d272:	2c05      	cmp	r4, #5
 800d274:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d278:	d04d      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d27a:	eddc 6a05 	vldr	s13, [ip, #20]
 800d27e:	edde 7a05 	vldr	s15, [lr, #20]
 800d282:	2c06      	cmp	r4, #6
 800d284:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d288:	d045      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d28a:	eddc 6a06 	vldr	s13, [ip, #24]
 800d28e:	edde 7a06 	vldr	s15, [lr, #24]
 800d292:	2c07      	cmp	r4, #7
 800d294:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d298:	d03d      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d29a:	eddc 6a07 	vldr	s13, [ip, #28]
 800d29e:	edde 7a07 	vldr	s15, [lr, #28]
 800d2a2:	2c08      	cmp	r4, #8
 800d2a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d2a8:	d035      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d2aa:	eddc 6a08 	vldr	s13, [ip, #32]
 800d2ae:	edde 7a08 	vldr	s15, [lr, #32]
 800d2b2:	2c09      	cmp	r4, #9
 800d2b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d2b8:	d02d      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d2ba:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800d2be:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800d2c2:	2c0a      	cmp	r4, #10
 800d2c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d2c8:	d025      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d2ca:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800d2ce:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800d2d2:	2c0b      	cmp	r4, #11
 800d2d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d2d8:	d01d      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d2da:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800d2de:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800d2e2:	2c0c      	cmp	r4, #12
 800d2e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d2e8:	d015      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d2ea:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800d2ee:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800d2f2:	3c0d      	subs	r4, #13
 800d2f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d2f8:	d00d      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d2fa:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800d2fe:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800d302:	2c01      	cmp	r4, #1
 800d304:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d308:	d005      	beq.n	800d316 <forward_lite_dense_if32of32wf32+0x212>
 800d30a:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800d30e:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800d312:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d316:	444a      	add	r2, r9
 800d318:	eca5 7a01 	vstmia	r5!, {s14}
 800d31c:	42af      	cmp	r7, r5
 800d31e:	f63f af09 	bhi.w	800d134 <forward_lite_dense_if32of32wf32+0x30>
 800d322:	b15b      	cbz	r3, 800d33c <forward_lite_dense_if32of32wf32+0x238>
 800d324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d326:	b14a      	cbz	r2, 800d33c <forward_lite_dense_if32of32wf32+0x238>
 800d328:	edd0 7a00 	vldr	s15, [r0]
 800d32c:	ecb3 7a01 	vldmia	r3!, {s14}
 800d330:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d334:	ece0 7a01 	vstmia	r0!, {s15}
 800d338:	4287      	cmp	r7, r0
 800d33a:	d1f5      	bne.n	800d328 <forward_lite_dense_if32of32wf32+0x224>
 800d33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d340:	4634      	mov	r4, r6
 800d342:	4696      	mov	lr, r2
 800d344:	468c      	mov	ip, r1
 800d346:	e76e      	b.n	800d226 <forward_lite_dense_if32of32wf32+0x122>
 800d348:	00000000 	.word	0x00000000

0800d34c <st_int8_copy>:
 800d34c:	4288      	cmp	r0, r1
 800d34e:	d057      	beq.n	800d400 <st_int8_copy+0xb4>
 800d350:	2a00      	cmp	r2, #0
 800d352:	d055      	beq.n	800d400 <st_int8_copy+0xb4>
 800d354:	4288      	cmp	r0, r1
 800d356:	d354      	bcc.n	800d402 <st_int8_copy+0xb6>
 800d358:	078b      	lsls	r3, r1, #30
 800d35a:	d102      	bne.n	800d362 <st_int8_copy+0x16>
 800d35c:	e009      	b.n	800d372 <st_int8_copy+0x26>
 800d35e:	2a00      	cmp	r2, #0
 800d360:	d05c      	beq.n	800d41c <st_int8_copy+0xd0>
 800d362:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800d366:	f801 3b01 	strb.w	r3, [r1], #1
 800d36a:	078b      	lsls	r3, r1, #30
 800d36c:	f102 32ff 	add.w	r2, r2, #4294967295
 800d370:	d1f5      	bne.n	800d35e <st_int8_copy+0x12>
 800d372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d376:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800d37a:	d069      	beq.n	800d450 <st_int8_copy+0x104>
 800d37c:	ea41 0300 	orr.w	r3, r1, r0
 800d380:	075b      	lsls	r3, r3, #29
 800d382:	d14c      	bne.n	800d41e <st_int8_copy+0xd2>
 800d384:	f10e 33ff 	add.w	r3, lr, #4294967295
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d948      	bls.n	800d41e <st_int8_copy+0xd2>
 800d38c:	f100 0310 	add.w	r3, r0, #16
 800d390:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800d394:	f101 0c10 	add.w	ip, r1, #16
 800d398:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800d39c:	ed13 6b04 	vldr	d6, [r3, #-16]
 800d3a0:	ed13 7b02 	vldr	d7, [r3, #-8]
 800d3a4:	3310      	adds	r3, #16
 800d3a6:	4573      	cmp	r3, lr
 800d3a8:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800d3ac:	ed0c 7b02 	vstr	d7, [ip, #-8]
 800d3b0:	f10c 0c10 	add.w	ip, ip, #16
 800d3b4:	d1f2      	bne.n	800d39c <st_int8_copy+0x50>
 800d3b6:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800d3ba:	4421      	add	r1, r4
 800d3bc:	4420      	add	r0, r4
 800d3be:	f002 0203 	and.w	r2, r2, #3
 800d3c2:	b16b      	cbz	r3, 800d3e0 <st_int8_copy+0x94>
 800d3c4:	6804      	ldr	r4, [r0, #0]
 800d3c6:	600c      	str	r4, [r1, #0]
 800d3c8:	1e5c      	subs	r4, r3, #1
 800d3ca:	d005      	beq.n	800d3d8 <st_int8_copy+0x8c>
 800d3cc:	6845      	ldr	r5, [r0, #4]
 800d3ce:	604d      	str	r5, [r1, #4]
 800d3d0:	2c01      	cmp	r4, #1
 800d3d2:	bf1c      	itt	ne
 800d3d4:	6884      	ldrne	r4, [r0, #8]
 800d3d6:	608c      	strne	r4, [r1, #8]
 800d3d8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d3dc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800d3e0:	b162      	cbz	r2, 800d3fc <st_int8_copy+0xb0>
 800d3e2:	f990 3000 	ldrsb.w	r3, [r0]
 800d3e6:	700b      	strb	r3, [r1, #0]
 800d3e8:	3a01      	subs	r2, #1
 800d3ea:	d007      	beq.n	800d3fc <st_int8_copy+0xb0>
 800d3ec:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d3f0:	704b      	strb	r3, [r1, #1]
 800d3f2:	2a01      	cmp	r2, #1
 800d3f4:	bf1c      	itt	ne
 800d3f6:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800d3fa:	708b      	strbne	r3, [r1, #2]
 800d3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d400:	4770      	bx	lr
 800d402:	1883      	adds	r3, r0, r2
 800d404:	428b      	cmp	r3, r1
 800d406:	d9a7      	bls.n	800d358 <st_int8_copy+0xc>
 800d408:	4283      	cmp	r3, r0
 800d40a:	440a      	add	r2, r1
 800d40c:	d9f8      	bls.n	800d400 <st_int8_copy+0xb4>
 800d40e:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800d412:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800d416:	4283      	cmp	r3, r0
 800d418:	d1f9      	bne.n	800d40e <st_int8_copy+0xc2>
 800d41a:	4770      	bx	lr
 800d41c:	4770      	bx	lr
 800d41e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800d422:	460b      	mov	r3, r1
 800d424:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800d428:	4684      	mov	ip, r0
 800d42a:	f8dc 7000 	ldr.w	r7, [ip]
 800d42e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800d432:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800d436:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800d43a:	f8c3 800c 	str.w	r8, [r3, #12]
 800d43e:	601f      	str	r7, [r3, #0]
 800d440:	605e      	str	r6, [r3, #4]
 800d442:	609d      	str	r5, [r3, #8]
 800d444:	3310      	adds	r3, #16
 800d446:	459e      	cmp	lr, r3
 800d448:	f10c 0c10 	add.w	ip, ip, #16
 800d44c:	d1ed      	bne.n	800d42a <st_int8_copy+0xde>
 800d44e:	e7b2      	b.n	800d3b6 <st_int8_copy+0x6a>
 800d450:	0893      	lsrs	r3, r2, #2
 800d452:	f002 0203 	and.w	r2, r2, #3
 800d456:	e7b4      	b.n	800d3c2 <st_int8_copy+0x76>

0800d458 <ai_array_to_buffer_fmt>:
 800d458:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	d050      	beq.n	800d502 <ai_array_to_buffer_fmt+0xaa>
 800d460:	4b2a      	ldr	r3, [pc, #168]	; (800d50c <ai_array_to_buffer_fmt+0xb4>)
 800d462:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800d466:	429a      	cmp	r2, r3
 800d468:	d00b      	beq.n	800d482 <ai_array_to_buffer_fmt+0x2a>
 800d46a:	dc1c      	bgt.n	800d4a6 <ai_array_to_buffer_fmt+0x4e>
 800d46c:	4b28      	ldr	r3, [pc, #160]	; (800d510 <ai_array_to_buffer_fmt+0xb8>)
 800d46e:	429a      	cmp	r2, r3
 800d470:	d007      	beq.n	800d482 <ai_array_to_buffer_fmt+0x2a>
 800d472:	dd0b      	ble.n	800d48c <ai_array_to_buffer_fmt+0x34>
 800d474:	4b27      	ldr	r3, [pc, #156]	; (800d514 <ai_array_to_buffer_fmt+0xbc>)
 800d476:	429a      	cmp	r2, r3
 800d478:	d003      	beq.n	800d482 <ai_array_to_buffer_fmt+0x2a>
 800d47a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800d47e:	429a      	cmp	r2, r3
 800d480:	d131      	bne.n	800d4e6 <ai_array_to_buffer_fmt+0x8e>
 800d482:	4613      	mov	r3, r2
 800d484:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d488:	4318      	orrs	r0, r3
 800d48a:	4770      	bx	lr
 800d48c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d490:	429a      	cmp	r2, r3
 800d492:	d0f6      	beq.n	800d482 <ai_array_to_buffer_fmt+0x2a>
 800d494:	dd2c      	ble.n	800d4f0 <ai_array_to_buffer_fmt+0x98>
 800d496:	4b20      	ldr	r3, [pc, #128]	; (800d518 <ai_array_to_buffer_fmt+0xc0>)
 800d498:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d49c:	429a      	cmp	r2, r3
 800d49e:	bf18      	it	ne
 800d4a0:	2340      	movne	r3, #64	; 0x40
 800d4a2:	4318      	orrs	r0, r3
 800d4a4:	4770      	bx	lr
 800d4a6:	4b1d      	ldr	r3, [pc, #116]	; (800d51c <ai_array_to_buffer_fmt+0xc4>)
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d0ea      	beq.n	800d482 <ai_array_to_buffer_fmt+0x2a>
 800d4ac:	dd0e      	ble.n	800d4cc <ai_array_to_buffer_fmt+0x74>
 800d4ae:	4b1c      	ldr	r3, [pc, #112]	; (800d520 <ai_array_to_buffer_fmt+0xc8>)
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d0e6      	beq.n	800d482 <ai_array_to_buffer_fmt+0x2a>
 800d4b4:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d0e2      	beq.n	800d482 <ai_array_to_buffer_fmt+0x2a>
 800d4bc:	4b19      	ldr	r3, [pc, #100]	; (800d524 <ai_array_to_buffer_fmt+0xcc>)
 800d4be:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	bf18      	it	ne
 800d4c6:	2340      	movne	r3, #64	; 0x40
 800d4c8:	4318      	orrs	r0, r3
 800d4ca:	4770      	bx	lr
 800d4cc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d0d6      	beq.n	800d482 <ai_array_to_buffer_fmt+0x2a>
 800d4d4:	3307      	adds	r3, #7
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d0d3      	beq.n	800d482 <ai_array_to_buffer_fmt+0x2a>
 800d4da:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	bf18      	it	ne
 800d4e2:	2340      	movne	r3, #64	; 0x40
 800d4e4:	e7ce      	b.n	800d484 <ai_array_to_buffer_fmt+0x2c>
 800d4e6:	4b10      	ldr	r3, [pc, #64]	; (800d528 <ai_array_to_buffer_fmt+0xd0>)
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	bf18      	it	ne
 800d4ec:	2340      	movne	r3, #64	; 0x40
 800d4ee:	e7c9      	b.n	800d484 <ai_array_to_buffer_fmt+0x2c>
 800d4f0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d0c4      	beq.n	800d482 <ai_array_to_buffer_fmt+0x2a>
 800d4f8:	3380      	adds	r3, #128	; 0x80
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	bf18      	it	ne
 800d4fe:	2340      	movne	r3, #64	; 0x40
 800d500:	e7c0      	b.n	800d484 <ai_array_to_buffer_fmt+0x2c>
 800d502:	4b0a      	ldr	r3, [pc, #40]	; (800d52c <ai_array_to_buffer_fmt+0xd4>)
 800d504:	4003      	ands	r3, r0
 800d506:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d50a:	e7bb      	b.n	800d484 <ai_array_to_buffer_fmt+0x2c>
 800d50c:	00840040 	.word	0x00840040
 800d510:	00040840 	.word	0x00040840
 800d514:	00041040 	.word	0x00041040
 800d518:	00040447 	.word	0x00040447
 800d51c:	00840840 	.word	0x00840840
 800d520:	00841040 	.word	0x00841040
 800d524:	0084084f 	.word	0x0084084f
 800d528:	0004084f 	.word	0x0004084f
 800d52c:	00803fff 	.word	0x00803fff

0800d530 <ai_array_get_byte_size>:
 800d530:	b319      	cbz	r1, 800d57a <ai_array_get_byte_size+0x4a>
 800d532:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d536:	fb03 f101 	mul.w	r1, r3, r1
 800d53a:	3107      	adds	r1, #7
 800d53c:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800d540:	f021 0307 	bic.w	r3, r1, #7
 800d544:	2a04      	cmp	r2, #4
 800d546:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800d54a:	fa23 f101 	lsr.w	r1, r3, r1
 800d54e:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800d552:	d00b      	beq.n	800d56c <ai_array_get_byte_size+0x3c>
 800d554:	2a08      	cmp	r2, #8
 800d556:	d002      	beq.n	800d55e <ai_array_get_byte_size+0x2e>
 800d558:	3107      	adds	r1, #7
 800d55a:	08c8      	lsrs	r0, r1, #3
 800d55c:	4770      	bx	lr
 800d55e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d562:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800d566:	3107      	adds	r1, #7
 800d568:	08c8      	lsrs	r0, r1, #3
 800d56a:	4770      	bx	lr
 800d56c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d570:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800d574:	3107      	adds	r1, #7
 800d576:	08c8      	lsrs	r0, r1, #3
 800d578:	4770      	bx	lr
 800d57a:	4608      	mov	r0, r1
 800d57c:	4770      	bx	lr
 800d57e:	bf00      	nop

0800d580 <ai_array_get_data_byte_size>:
 800d580:	b169      	cbz	r1, 800d59e <ai_array_get_data_byte_size+0x1e>
 800d582:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800d586:	fb02 f101 	mul.w	r1, r2, r1
 800d58a:	1dcb      	adds	r3, r1, #7
 800d58c:	f023 0307 	bic.w	r3, r3, #7
 800d590:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800d594:	fa23 f000 	lsr.w	r0, r3, r0
 800d598:	3007      	adds	r0, #7
 800d59a:	08c0      	lsrs	r0, r0, #3
 800d59c:	4770      	bx	lr
 800d59e:	4608      	mov	r0, r1
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop

0800d5a4 <ai_version_get>:
 800d5a4:	0212      	lsls	r2, r2, #8
 800d5a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d5aa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800d5ae:	4770      	bx	lr

0800d5b0 <get_tensor_byte_size>:
 800d5b0:	b410      	push	{r4}
 800d5b2:	6983      	ldr	r3, [r0, #24]
 800d5b4:	68c4      	ldr	r4, [r0, #12]
 800d5b6:	6941      	ldr	r1, [r0, #20]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	68e0      	ldr	r0, [r4, #12]
 800d5bc:	4a07      	ldr	r2, [pc, #28]	; (800d5dc <get_tensor_byte_size+0x2c>)
 800d5be:	68c9      	ldr	r1, [r1, #12]
 800d5c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5c4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800d5c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d5cc:	fb01 f000 	mul.w	r0, r1, r0
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	bf04      	itt	eq
 800d5d4:	3007      	addeq	r0, #7
 800d5d6:	08c0      	lsreq	r0, r0, #3
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	000400c0 	.word	0x000400c0

0800d5e0 <__errno>:
 800d5e0:	4b01      	ldr	r3, [pc, #4]	; (800d5e8 <__errno+0x8>)
 800d5e2:	6818      	ldr	r0, [r3, #0]
 800d5e4:	4770      	bx	lr
 800d5e6:	bf00      	nop
 800d5e8:	200009bc 	.word	0x200009bc

0800d5ec <__libc_init_array>:
 800d5ec:	b570      	push	{r4, r5, r6, lr}
 800d5ee:	4d0d      	ldr	r5, [pc, #52]	; (800d624 <__libc_init_array+0x38>)
 800d5f0:	4c0d      	ldr	r4, [pc, #52]	; (800d628 <__libc_init_array+0x3c>)
 800d5f2:	1b64      	subs	r4, r4, r5
 800d5f4:	10a4      	asrs	r4, r4, #2
 800d5f6:	2600      	movs	r6, #0
 800d5f8:	42a6      	cmp	r6, r4
 800d5fa:	d109      	bne.n	800d610 <__libc_init_array+0x24>
 800d5fc:	4d0b      	ldr	r5, [pc, #44]	; (800d62c <__libc_init_array+0x40>)
 800d5fe:	4c0c      	ldr	r4, [pc, #48]	; (800d630 <__libc_init_array+0x44>)
 800d600:	f003 f9a4 	bl	801094c <_init>
 800d604:	1b64      	subs	r4, r4, r5
 800d606:	10a4      	asrs	r4, r4, #2
 800d608:	2600      	movs	r6, #0
 800d60a:	42a6      	cmp	r6, r4
 800d60c:	d105      	bne.n	800d61a <__libc_init_array+0x2e>
 800d60e:	bd70      	pop	{r4, r5, r6, pc}
 800d610:	f855 3b04 	ldr.w	r3, [r5], #4
 800d614:	4798      	blx	r3
 800d616:	3601      	adds	r6, #1
 800d618:	e7ee      	b.n	800d5f8 <__libc_init_array+0xc>
 800d61a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d61e:	4798      	blx	r3
 800d620:	3601      	adds	r6, #1
 800d622:	e7f2      	b.n	800d60a <__libc_init_array+0x1e>
 800d624:	0801cd4c 	.word	0x0801cd4c
 800d628:	0801cd4c 	.word	0x0801cd4c
 800d62c:	0801cd4c 	.word	0x0801cd4c
 800d630:	0801cd50 	.word	0x0801cd50

0800d634 <malloc>:
 800d634:	4b02      	ldr	r3, [pc, #8]	; (800d640 <malloc+0xc>)
 800d636:	4601      	mov	r1, r0
 800d638:	6818      	ldr	r0, [r3, #0]
 800d63a:	f000 b88d 	b.w	800d758 <_malloc_r>
 800d63e:	bf00      	nop
 800d640:	200009bc 	.word	0x200009bc

0800d644 <free>:
 800d644:	4b02      	ldr	r3, [pc, #8]	; (800d650 <free+0xc>)
 800d646:	4601      	mov	r1, r0
 800d648:	6818      	ldr	r0, [r3, #0]
 800d64a:	f000 b819 	b.w	800d680 <_free_r>
 800d64e:	bf00      	nop
 800d650:	200009bc 	.word	0x200009bc

0800d654 <memcpy>:
 800d654:	440a      	add	r2, r1
 800d656:	4291      	cmp	r1, r2
 800d658:	f100 33ff 	add.w	r3, r0, #4294967295
 800d65c:	d100      	bne.n	800d660 <memcpy+0xc>
 800d65e:	4770      	bx	lr
 800d660:	b510      	push	{r4, lr}
 800d662:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d66a:	4291      	cmp	r1, r2
 800d66c:	d1f9      	bne.n	800d662 <memcpy+0xe>
 800d66e:	bd10      	pop	{r4, pc}

0800d670 <memset>:
 800d670:	4402      	add	r2, r0
 800d672:	4603      	mov	r3, r0
 800d674:	4293      	cmp	r3, r2
 800d676:	d100      	bne.n	800d67a <memset+0xa>
 800d678:	4770      	bx	lr
 800d67a:	f803 1b01 	strb.w	r1, [r3], #1
 800d67e:	e7f9      	b.n	800d674 <memset+0x4>

0800d680 <_free_r>:
 800d680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d682:	2900      	cmp	r1, #0
 800d684:	d044      	beq.n	800d710 <_free_r+0x90>
 800d686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d68a:	9001      	str	r0, [sp, #4]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f1a1 0404 	sub.w	r4, r1, #4
 800d692:	bfb8      	it	lt
 800d694:	18e4      	addlt	r4, r4, r3
 800d696:	f001 ff75 	bl	800f584 <__malloc_lock>
 800d69a:	4a1e      	ldr	r2, [pc, #120]	; (800d714 <_free_r+0x94>)
 800d69c:	9801      	ldr	r0, [sp, #4]
 800d69e:	6813      	ldr	r3, [r2, #0]
 800d6a0:	b933      	cbnz	r3, 800d6b0 <_free_r+0x30>
 800d6a2:	6063      	str	r3, [r4, #4]
 800d6a4:	6014      	str	r4, [r2, #0]
 800d6a6:	b003      	add	sp, #12
 800d6a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6ac:	f001 bf70 	b.w	800f590 <__malloc_unlock>
 800d6b0:	42a3      	cmp	r3, r4
 800d6b2:	d908      	bls.n	800d6c6 <_free_r+0x46>
 800d6b4:	6825      	ldr	r5, [r4, #0]
 800d6b6:	1961      	adds	r1, r4, r5
 800d6b8:	428b      	cmp	r3, r1
 800d6ba:	bf01      	itttt	eq
 800d6bc:	6819      	ldreq	r1, [r3, #0]
 800d6be:	685b      	ldreq	r3, [r3, #4]
 800d6c0:	1949      	addeq	r1, r1, r5
 800d6c2:	6021      	streq	r1, [r4, #0]
 800d6c4:	e7ed      	b.n	800d6a2 <_free_r+0x22>
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	b10b      	cbz	r3, 800d6d0 <_free_r+0x50>
 800d6cc:	42a3      	cmp	r3, r4
 800d6ce:	d9fa      	bls.n	800d6c6 <_free_r+0x46>
 800d6d0:	6811      	ldr	r1, [r2, #0]
 800d6d2:	1855      	adds	r5, r2, r1
 800d6d4:	42a5      	cmp	r5, r4
 800d6d6:	d10b      	bne.n	800d6f0 <_free_r+0x70>
 800d6d8:	6824      	ldr	r4, [r4, #0]
 800d6da:	4421      	add	r1, r4
 800d6dc:	1854      	adds	r4, r2, r1
 800d6de:	42a3      	cmp	r3, r4
 800d6e0:	6011      	str	r1, [r2, #0]
 800d6e2:	d1e0      	bne.n	800d6a6 <_free_r+0x26>
 800d6e4:	681c      	ldr	r4, [r3, #0]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	6053      	str	r3, [r2, #4]
 800d6ea:	4421      	add	r1, r4
 800d6ec:	6011      	str	r1, [r2, #0]
 800d6ee:	e7da      	b.n	800d6a6 <_free_r+0x26>
 800d6f0:	d902      	bls.n	800d6f8 <_free_r+0x78>
 800d6f2:	230c      	movs	r3, #12
 800d6f4:	6003      	str	r3, [r0, #0]
 800d6f6:	e7d6      	b.n	800d6a6 <_free_r+0x26>
 800d6f8:	6825      	ldr	r5, [r4, #0]
 800d6fa:	1961      	adds	r1, r4, r5
 800d6fc:	428b      	cmp	r3, r1
 800d6fe:	bf04      	itt	eq
 800d700:	6819      	ldreq	r1, [r3, #0]
 800d702:	685b      	ldreq	r3, [r3, #4]
 800d704:	6063      	str	r3, [r4, #4]
 800d706:	bf04      	itt	eq
 800d708:	1949      	addeq	r1, r1, r5
 800d70a:	6021      	streq	r1, [r4, #0]
 800d70c:	6054      	str	r4, [r2, #4]
 800d70e:	e7ca      	b.n	800d6a6 <_free_r+0x26>
 800d710:	b003      	add	sp, #12
 800d712:	bd30      	pop	{r4, r5, pc}
 800d714:	2000238c 	.word	0x2000238c

0800d718 <sbrk_aligned>:
 800d718:	b570      	push	{r4, r5, r6, lr}
 800d71a:	4e0e      	ldr	r6, [pc, #56]	; (800d754 <sbrk_aligned+0x3c>)
 800d71c:	460c      	mov	r4, r1
 800d71e:	6831      	ldr	r1, [r6, #0]
 800d720:	4605      	mov	r5, r0
 800d722:	b911      	cbnz	r1, 800d72a <sbrk_aligned+0x12>
 800d724:	f000 fd8c 	bl	800e240 <_sbrk_r>
 800d728:	6030      	str	r0, [r6, #0]
 800d72a:	4621      	mov	r1, r4
 800d72c:	4628      	mov	r0, r5
 800d72e:	f000 fd87 	bl	800e240 <_sbrk_r>
 800d732:	1c43      	adds	r3, r0, #1
 800d734:	d00a      	beq.n	800d74c <sbrk_aligned+0x34>
 800d736:	1cc4      	adds	r4, r0, #3
 800d738:	f024 0403 	bic.w	r4, r4, #3
 800d73c:	42a0      	cmp	r0, r4
 800d73e:	d007      	beq.n	800d750 <sbrk_aligned+0x38>
 800d740:	1a21      	subs	r1, r4, r0
 800d742:	4628      	mov	r0, r5
 800d744:	f000 fd7c 	bl	800e240 <_sbrk_r>
 800d748:	3001      	adds	r0, #1
 800d74a:	d101      	bne.n	800d750 <sbrk_aligned+0x38>
 800d74c:	f04f 34ff 	mov.w	r4, #4294967295
 800d750:	4620      	mov	r0, r4
 800d752:	bd70      	pop	{r4, r5, r6, pc}
 800d754:	20002390 	.word	0x20002390

0800d758 <_malloc_r>:
 800d758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d75c:	1ccd      	adds	r5, r1, #3
 800d75e:	f025 0503 	bic.w	r5, r5, #3
 800d762:	3508      	adds	r5, #8
 800d764:	2d0c      	cmp	r5, #12
 800d766:	bf38      	it	cc
 800d768:	250c      	movcc	r5, #12
 800d76a:	2d00      	cmp	r5, #0
 800d76c:	4607      	mov	r7, r0
 800d76e:	db01      	blt.n	800d774 <_malloc_r+0x1c>
 800d770:	42a9      	cmp	r1, r5
 800d772:	d905      	bls.n	800d780 <_malloc_r+0x28>
 800d774:	230c      	movs	r3, #12
 800d776:	603b      	str	r3, [r7, #0]
 800d778:	2600      	movs	r6, #0
 800d77a:	4630      	mov	r0, r6
 800d77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d780:	4e2e      	ldr	r6, [pc, #184]	; (800d83c <_malloc_r+0xe4>)
 800d782:	f001 feff 	bl	800f584 <__malloc_lock>
 800d786:	6833      	ldr	r3, [r6, #0]
 800d788:	461c      	mov	r4, r3
 800d78a:	bb34      	cbnz	r4, 800d7da <_malloc_r+0x82>
 800d78c:	4629      	mov	r1, r5
 800d78e:	4638      	mov	r0, r7
 800d790:	f7ff ffc2 	bl	800d718 <sbrk_aligned>
 800d794:	1c43      	adds	r3, r0, #1
 800d796:	4604      	mov	r4, r0
 800d798:	d14d      	bne.n	800d836 <_malloc_r+0xde>
 800d79a:	6834      	ldr	r4, [r6, #0]
 800d79c:	4626      	mov	r6, r4
 800d79e:	2e00      	cmp	r6, #0
 800d7a0:	d140      	bne.n	800d824 <_malloc_r+0xcc>
 800d7a2:	6823      	ldr	r3, [r4, #0]
 800d7a4:	4631      	mov	r1, r6
 800d7a6:	4638      	mov	r0, r7
 800d7a8:	eb04 0803 	add.w	r8, r4, r3
 800d7ac:	f000 fd48 	bl	800e240 <_sbrk_r>
 800d7b0:	4580      	cmp	r8, r0
 800d7b2:	d13a      	bne.n	800d82a <_malloc_r+0xd2>
 800d7b4:	6821      	ldr	r1, [r4, #0]
 800d7b6:	3503      	adds	r5, #3
 800d7b8:	1a6d      	subs	r5, r5, r1
 800d7ba:	f025 0503 	bic.w	r5, r5, #3
 800d7be:	3508      	adds	r5, #8
 800d7c0:	2d0c      	cmp	r5, #12
 800d7c2:	bf38      	it	cc
 800d7c4:	250c      	movcc	r5, #12
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	f7ff ffa5 	bl	800d718 <sbrk_aligned>
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	d02b      	beq.n	800d82a <_malloc_r+0xd2>
 800d7d2:	6823      	ldr	r3, [r4, #0]
 800d7d4:	442b      	add	r3, r5
 800d7d6:	6023      	str	r3, [r4, #0]
 800d7d8:	e00e      	b.n	800d7f8 <_malloc_r+0xa0>
 800d7da:	6822      	ldr	r2, [r4, #0]
 800d7dc:	1b52      	subs	r2, r2, r5
 800d7de:	d41e      	bmi.n	800d81e <_malloc_r+0xc6>
 800d7e0:	2a0b      	cmp	r2, #11
 800d7e2:	d916      	bls.n	800d812 <_malloc_r+0xba>
 800d7e4:	1961      	adds	r1, r4, r5
 800d7e6:	42a3      	cmp	r3, r4
 800d7e8:	6025      	str	r5, [r4, #0]
 800d7ea:	bf18      	it	ne
 800d7ec:	6059      	strne	r1, [r3, #4]
 800d7ee:	6863      	ldr	r3, [r4, #4]
 800d7f0:	bf08      	it	eq
 800d7f2:	6031      	streq	r1, [r6, #0]
 800d7f4:	5162      	str	r2, [r4, r5]
 800d7f6:	604b      	str	r3, [r1, #4]
 800d7f8:	4638      	mov	r0, r7
 800d7fa:	f104 060b 	add.w	r6, r4, #11
 800d7fe:	f001 fec7 	bl	800f590 <__malloc_unlock>
 800d802:	f026 0607 	bic.w	r6, r6, #7
 800d806:	1d23      	adds	r3, r4, #4
 800d808:	1af2      	subs	r2, r6, r3
 800d80a:	d0b6      	beq.n	800d77a <_malloc_r+0x22>
 800d80c:	1b9b      	subs	r3, r3, r6
 800d80e:	50a3      	str	r3, [r4, r2]
 800d810:	e7b3      	b.n	800d77a <_malloc_r+0x22>
 800d812:	6862      	ldr	r2, [r4, #4]
 800d814:	42a3      	cmp	r3, r4
 800d816:	bf0c      	ite	eq
 800d818:	6032      	streq	r2, [r6, #0]
 800d81a:	605a      	strne	r2, [r3, #4]
 800d81c:	e7ec      	b.n	800d7f8 <_malloc_r+0xa0>
 800d81e:	4623      	mov	r3, r4
 800d820:	6864      	ldr	r4, [r4, #4]
 800d822:	e7b2      	b.n	800d78a <_malloc_r+0x32>
 800d824:	4634      	mov	r4, r6
 800d826:	6876      	ldr	r6, [r6, #4]
 800d828:	e7b9      	b.n	800d79e <_malloc_r+0x46>
 800d82a:	230c      	movs	r3, #12
 800d82c:	603b      	str	r3, [r7, #0]
 800d82e:	4638      	mov	r0, r7
 800d830:	f001 feae 	bl	800f590 <__malloc_unlock>
 800d834:	e7a1      	b.n	800d77a <_malloc_r+0x22>
 800d836:	6025      	str	r5, [r4, #0]
 800d838:	e7de      	b.n	800d7f8 <_malloc_r+0xa0>
 800d83a:	bf00      	nop
 800d83c:	2000238c 	.word	0x2000238c

0800d840 <__cvt>:
 800d840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d844:	ec55 4b10 	vmov	r4, r5, d0
 800d848:	2d00      	cmp	r5, #0
 800d84a:	460e      	mov	r6, r1
 800d84c:	4619      	mov	r1, r3
 800d84e:	462b      	mov	r3, r5
 800d850:	bfbb      	ittet	lt
 800d852:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d856:	461d      	movlt	r5, r3
 800d858:	2300      	movge	r3, #0
 800d85a:	232d      	movlt	r3, #45	; 0x2d
 800d85c:	700b      	strb	r3, [r1, #0]
 800d85e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d860:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d864:	4691      	mov	r9, r2
 800d866:	f023 0820 	bic.w	r8, r3, #32
 800d86a:	bfbc      	itt	lt
 800d86c:	4622      	movlt	r2, r4
 800d86e:	4614      	movlt	r4, r2
 800d870:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d874:	d005      	beq.n	800d882 <__cvt+0x42>
 800d876:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d87a:	d100      	bne.n	800d87e <__cvt+0x3e>
 800d87c:	3601      	adds	r6, #1
 800d87e:	2102      	movs	r1, #2
 800d880:	e000      	b.n	800d884 <__cvt+0x44>
 800d882:	2103      	movs	r1, #3
 800d884:	ab03      	add	r3, sp, #12
 800d886:	9301      	str	r3, [sp, #4]
 800d888:	ab02      	add	r3, sp, #8
 800d88a:	9300      	str	r3, [sp, #0]
 800d88c:	ec45 4b10 	vmov	d0, r4, r5
 800d890:	4653      	mov	r3, sl
 800d892:	4632      	mov	r2, r6
 800d894:	f000 fe64 	bl	800e560 <_dtoa_r>
 800d898:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d89c:	4607      	mov	r7, r0
 800d89e:	d102      	bne.n	800d8a6 <__cvt+0x66>
 800d8a0:	f019 0f01 	tst.w	r9, #1
 800d8a4:	d022      	beq.n	800d8ec <__cvt+0xac>
 800d8a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d8aa:	eb07 0906 	add.w	r9, r7, r6
 800d8ae:	d110      	bne.n	800d8d2 <__cvt+0x92>
 800d8b0:	783b      	ldrb	r3, [r7, #0]
 800d8b2:	2b30      	cmp	r3, #48	; 0x30
 800d8b4:	d10a      	bne.n	800d8cc <__cvt+0x8c>
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	4629      	mov	r1, r5
 800d8be:	f7f3 f903 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8c2:	b918      	cbnz	r0, 800d8cc <__cvt+0x8c>
 800d8c4:	f1c6 0601 	rsb	r6, r6, #1
 800d8c8:	f8ca 6000 	str.w	r6, [sl]
 800d8cc:	f8da 3000 	ldr.w	r3, [sl]
 800d8d0:	4499      	add	r9, r3
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	4629      	mov	r1, r5
 800d8da:	f7f3 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8de:	b108      	cbz	r0, 800d8e4 <__cvt+0xa4>
 800d8e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d8e4:	2230      	movs	r2, #48	; 0x30
 800d8e6:	9b03      	ldr	r3, [sp, #12]
 800d8e8:	454b      	cmp	r3, r9
 800d8ea:	d307      	bcc.n	800d8fc <__cvt+0xbc>
 800d8ec:	9b03      	ldr	r3, [sp, #12]
 800d8ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8f0:	1bdb      	subs	r3, r3, r7
 800d8f2:	4638      	mov	r0, r7
 800d8f4:	6013      	str	r3, [r2, #0]
 800d8f6:	b004      	add	sp, #16
 800d8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8fc:	1c59      	adds	r1, r3, #1
 800d8fe:	9103      	str	r1, [sp, #12]
 800d900:	701a      	strb	r2, [r3, #0]
 800d902:	e7f0      	b.n	800d8e6 <__cvt+0xa6>

0800d904 <__exponent>:
 800d904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d906:	4603      	mov	r3, r0
 800d908:	2900      	cmp	r1, #0
 800d90a:	bfb8      	it	lt
 800d90c:	4249      	neglt	r1, r1
 800d90e:	f803 2b02 	strb.w	r2, [r3], #2
 800d912:	bfb4      	ite	lt
 800d914:	222d      	movlt	r2, #45	; 0x2d
 800d916:	222b      	movge	r2, #43	; 0x2b
 800d918:	2909      	cmp	r1, #9
 800d91a:	7042      	strb	r2, [r0, #1]
 800d91c:	dd2a      	ble.n	800d974 <__exponent+0x70>
 800d91e:	f10d 0407 	add.w	r4, sp, #7
 800d922:	46a4      	mov	ip, r4
 800d924:	270a      	movs	r7, #10
 800d926:	46a6      	mov	lr, r4
 800d928:	460a      	mov	r2, r1
 800d92a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d92e:	fb07 1516 	mls	r5, r7, r6, r1
 800d932:	3530      	adds	r5, #48	; 0x30
 800d934:	2a63      	cmp	r2, #99	; 0x63
 800d936:	f104 34ff 	add.w	r4, r4, #4294967295
 800d93a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d93e:	4631      	mov	r1, r6
 800d940:	dcf1      	bgt.n	800d926 <__exponent+0x22>
 800d942:	3130      	adds	r1, #48	; 0x30
 800d944:	f1ae 0502 	sub.w	r5, lr, #2
 800d948:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d94c:	1c44      	adds	r4, r0, #1
 800d94e:	4629      	mov	r1, r5
 800d950:	4561      	cmp	r1, ip
 800d952:	d30a      	bcc.n	800d96a <__exponent+0x66>
 800d954:	f10d 0209 	add.w	r2, sp, #9
 800d958:	eba2 020e 	sub.w	r2, r2, lr
 800d95c:	4565      	cmp	r5, ip
 800d95e:	bf88      	it	hi
 800d960:	2200      	movhi	r2, #0
 800d962:	4413      	add	r3, r2
 800d964:	1a18      	subs	r0, r3, r0
 800d966:	b003      	add	sp, #12
 800d968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d96a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d96e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d972:	e7ed      	b.n	800d950 <__exponent+0x4c>
 800d974:	2330      	movs	r3, #48	; 0x30
 800d976:	3130      	adds	r1, #48	; 0x30
 800d978:	7083      	strb	r3, [r0, #2]
 800d97a:	70c1      	strb	r1, [r0, #3]
 800d97c:	1d03      	adds	r3, r0, #4
 800d97e:	e7f1      	b.n	800d964 <__exponent+0x60>

0800d980 <_printf_float>:
 800d980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d984:	ed2d 8b02 	vpush	{d8}
 800d988:	b08d      	sub	sp, #52	; 0x34
 800d98a:	460c      	mov	r4, r1
 800d98c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d990:	4616      	mov	r6, r2
 800d992:	461f      	mov	r7, r3
 800d994:	4605      	mov	r5, r0
 800d996:	f001 fd89 	bl	800f4ac <_localeconv_r>
 800d99a:	f8d0 a000 	ldr.w	sl, [r0]
 800d99e:	4650      	mov	r0, sl
 800d9a0:	f7f2 fc16 	bl	80001d0 <strlen>
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d9a8:	6823      	ldr	r3, [r4, #0]
 800d9aa:	9305      	str	r3, [sp, #20]
 800d9ac:	f8d8 3000 	ldr.w	r3, [r8]
 800d9b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d9b4:	3307      	adds	r3, #7
 800d9b6:	f023 0307 	bic.w	r3, r3, #7
 800d9ba:	f103 0208 	add.w	r2, r3, #8
 800d9be:	f8c8 2000 	str.w	r2, [r8]
 800d9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d9ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d9ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d9d2:	9307      	str	r3, [sp, #28]
 800d9d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d9d8:	ee08 0a10 	vmov	s16, r0
 800d9dc:	4b9f      	ldr	r3, [pc, #636]	; (800dc5c <_printf_float+0x2dc>)
 800d9de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d9e6:	f7f3 f8a1 	bl	8000b2c <__aeabi_dcmpun>
 800d9ea:	bb88      	cbnz	r0, 800da50 <_printf_float+0xd0>
 800d9ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9f0:	4b9a      	ldr	r3, [pc, #616]	; (800dc5c <_printf_float+0x2dc>)
 800d9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d9f6:	f7f3 f87b 	bl	8000af0 <__aeabi_dcmple>
 800d9fa:	bb48      	cbnz	r0, 800da50 <_printf_float+0xd0>
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	2300      	movs	r3, #0
 800da00:	4640      	mov	r0, r8
 800da02:	4649      	mov	r1, r9
 800da04:	f7f3 f86a 	bl	8000adc <__aeabi_dcmplt>
 800da08:	b110      	cbz	r0, 800da10 <_printf_float+0x90>
 800da0a:	232d      	movs	r3, #45	; 0x2d
 800da0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da10:	4b93      	ldr	r3, [pc, #588]	; (800dc60 <_printf_float+0x2e0>)
 800da12:	4894      	ldr	r0, [pc, #592]	; (800dc64 <_printf_float+0x2e4>)
 800da14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800da18:	bf94      	ite	ls
 800da1a:	4698      	movls	r8, r3
 800da1c:	4680      	movhi	r8, r0
 800da1e:	2303      	movs	r3, #3
 800da20:	6123      	str	r3, [r4, #16]
 800da22:	9b05      	ldr	r3, [sp, #20]
 800da24:	f023 0204 	bic.w	r2, r3, #4
 800da28:	6022      	str	r2, [r4, #0]
 800da2a:	f04f 0900 	mov.w	r9, #0
 800da2e:	9700      	str	r7, [sp, #0]
 800da30:	4633      	mov	r3, r6
 800da32:	aa0b      	add	r2, sp, #44	; 0x2c
 800da34:	4621      	mov	r1, r4
 800da36:	4628      	mov	r0, r5
 800da38:	f000 f9d8 	bl	800ddec <_printf_common>
 800da3c:	3001      	adds	r0, #1
 800da3e:	f040 8090 	bne.w	800db62 <_printf_float+0x1e2>
 800da42:	f04f 30ff 	mov.w	r0, #4294967295
 800da46:	b00d      	add	sp, #52	; 0x34
 800da48:	ecbd 8b02 	vpop	{d8}
 800da4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da50:	4642      	mov	r2, r8
 800da52:	464b      	mov	r3, r9
 800da54:	4640      	mov	r0, r8
 800da56:	4649      	mov	r1, r9
 800da58:	f7f3 f868 	bl	8000b2c <__aeabi_dcmpun>
 800da5c:	b140      	cbz	r0, 800da70 <_printf_float+0xf0>
 800da5e:	464b      	mov	r3, r9
 800da60:	2b00      	cmp	r3, #0
 800da62:	bfbc      	itt	lt
 800da64:	232d      	movlt	r3, #45	; 0x2d
 800da66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800da6a:	487f      	ldr	r0, [pc, #508]	; (800dc68 <_printf_float+0x2e8>)
 800da6c:	4b7f      	ldr	r3, [pc, #508]	; (800dc6c <_printf_float+0x2ec>)
 800da6e:	e7d1      	b.n	800da14 <_printf_float+0x94>
 800da70:	6863      	ldr	r3, [r4, #4]
 800da72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800da76:	9206      	str	r2, [sp, #24]
 800da78:	1c5a      	adds	r2, r3, #1
 800da7a:	d13f      	bne.n	800dafc <_printf_float+0x17c>
 800da7c:	2306      	movs	r3, #6
 800da7e:	6063      	str	r3, [r4, #4]
 800da80:	9b05      	ldr	r3, [sp, #20]
 800da82:	6861      	ldr	r1, [r4, #4]
 800da84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800da88:	2300      	movs	r3, #0
 800da8a:	9303      	str	r3, [sp, #12]
 800da8c:	ab0a      	add	r3, sp, #40	; 0x28
 800da8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800da92:	ab09      	add	r3, sp, #36	; 0x24
 800da94:	ec49 8b10 	vmov	d0, r8, r9
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	6022      	str	r2, [r4, #0]
 800da9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800daa0:	4628      	mov	r0, r5
 800daa2:	f7ff fecd 	bl	800d840 <__cvt>
 800daa6:	9b06      	ldr	r3, [sp, #24]
 800daa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800daaa:	2b47      	cmp	r3, #71	; 0x47
 800daac:	4680      	mov	r8, r0
 800daae:	d108      	bne.n	800dac2 <_printf_float+0x142>
 800dab0:	1cc8      	adds	r0, r1, #3
 800dab2:	db02      	blt.n	800daba <_printf_float+0x13a>
 800dab4:	6863      	ldr	r3, [r4, #4]
 800dab6:	4299      	cmp	r1, r3
 800dab8:	dd41      	ble.n	800db3e <_printf_float+0x1be>
 800daba:	f1ab 0b02 	sub.w	fp, fp, #2
 800dabe:	fa5f fb8b 	uxtb.w	fp, fp
 800dac2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dac6:	d820      	bhi.n	800db0a <_printf_float+0x18a>
 800dac8:	3901      	subs	r1, #1
 800daca:	465a      	mov	r2, fp
 800dacc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dad0:	9109      	str	r1, [sp, #36]	; 0x24
 800dad2:	f7ff ff17 	bl	800d904 <__exponent>
 800dad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dad8:	1813      	adds	r3, r2, r0
 800dada:	2a01      	cmp	r2, #1
 800dadc:	4681      	mov	r9, r0
 800dade:	6123      	str	r3, [r4, #16]
 800dae0:	dc02      	bgt.n	800dae8 <_printf_float+0x168>
 800dae2:	6822      	ldr	r2, [r4, #0]
 800dae4:	07d2      	lsls	r2, r2, #31
 800dae6:	d501      	bpl.n	800daec <_printf_float+0x16c>
 800dae8:	3301      	adds	r3, #1
 800daea:	6123      	str	r3, [r4, #16]
 800daec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d09c      	beq.n	800da2e <_printf_float+0xae>
 800daf4:	232d      	movs	r3, #45	; 0x2d
 800daf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dafa:	e798      	b.n	800da2e <_printf_float+0xae>
 800dafc:	9a06      	ldr	r2, [sp, #24]
 800dafe:	2a47      	cmp	r2, #71	; 0x47
 800db00:	d1be      	bne.n	800da80 <_printf_float+0x100>
 800db02:	2b00      	cmp	r3, #0
 800db04:	d1bc      	bne.n	800da80 <_printf_float+0x100>
 800db06:	2301      	movs	r3, #1
 800db08:	e7b9      	b.n	800da7e <_printf_float+0xfe>
 800db0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800db0e:	d118      	bne.n	800db42 <_printf_float+0x1c2>
 800db10:	2900      	cmp	r1, #0
 800db12:	6863      	ldr	r3, [r4, #4]
 800db14:	dd0b      	ble.n	800db2e <_printf_float+0x1ae>
 800db16:	6121      	str	r1, [r4, #16]
 800db18:	b913      	cbnz	r3, 800db20 <_printf_float+0x1a0>
 800db1a:	6822      	ldr	r2, [r4, #0]
 800db1c:	07d0      	lsls	r0, r2, #31
 800db1e:	d502      	bpl.n	800db26 <_printf_float+0x1a6>
 800db20:	3301      	adds	r3, #1
 800db22:	440b      	add	r3, r1
 800db24:	6123      	str	r3, [r4, #16]
 800db26:	65a1      	str	r1, [r4, #88]	; 0x58
 800db28:	f04f 0900 	mov.w	r9, #0
 800db2c:	e7de      	b.n	800daec <_printf_float+0x16c>
 800db2e:	b913      	cbnz	r3, 800db36 <_printf_float+0x1b6>
 800db30:	6822      	ldr	r2, [r4, #0]
 800db32:	07d2      	lsls	r2, r2, #31
 800db34:	d501      	bpl.n	800db3a <_printf_float+0x1ba>
 800db36:	3302      	adds	r3, #2
 800db38:	e7f4      	b.n	800db24 <_printf_float+0x1a4>
 800db3a:	2301      	movs	r3, #1
 800db3c:	e7f2      	b.n	800db24 <_printf_float+0x1a4>
 800db3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800db42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db44:	4299      	cmp	r1, r3
 800db46:	db05      	blt.n	800db54 <_printf_float+0x1d4>
 800db48:	6823      	ldr	r3, [r4, #0]
 800db4a:	6121      	str	r1, [r4, #16]
 800db4c:	07d8      	lsls	r0, r3, #31
 800db4e:	d5ea      	bpl.n	800db26 <_printf_float+0x1a6>
 800db50:	1c4b      	adds	r3, r1, #1
 800db52:	e7e7      	b.n	800db24 <_printf_float+0x1a4>
 800db54:	2900      	cmp	r1, #0
 800db56:	bfd4      	ite	le
 800db58:	f1c1 0202 	rsble	r2, r1, #2
 800db5c:	2201      	movgt	r2, #1
 800db5e:	4413      	add	r3, r2
 800db60:	e7e0      	b.n	800db24 <_printf_float+0x1a4>
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	055a      	lsls	r2, r3, #21
 800db66:	d407      	bmi.n	800db78 <_printf_float+0x1f8>
 800db68:	6923      	ldr	r3, [r4, #16]
 800db6a:	4642      	mov	r2, r8
 800db6c:	4631      	mov	r1, r6
 800db6e:	4628      	mov	r0, r5
 800db70:	47b8      	blx	r7
 800db72:	3001      	adds	r0, #1
 800db74:	d12c      	bne.n	800dbd0 <_printf_float+0x250>
 800db76:	e764      	b.n	800da42 <_printf_float+0xc2>
 800db78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800db7c:	f240 80e0 	bls.w	800dd40 <_printf_float+0x3c0>
 800db80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db84:	2200      	movs	r2, #0
 800db86:	2300      	movs	r3, #0
 800db88:	f7f2 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800db8c:	2800      	cmp	r0, #0
 800db8e:	d034      	beq.n	800dbfa <_printf_float+0x27a>
 800db90:	4a37      	ldr	r2, [pc, #220]	; (800dc70 <_printf_float+0x2f0>)
 800db92:	2301      	movs	r3, #1
 800db94:	4631      	mov	r1, r6
 800db96:	4628      	mov	r0, r5
 800db98:	47b8      	blx	r7
 800db9a:	3001      	adds	r0, #1
 800db9c:	f43f af51 	beq.w	800da42 <_printf_float+0xc2>
 800dba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dba4:	429a      	cmp	r2, r3
 800dba6:	db02      	blt.n	800dbae <_printf_float+0x22e>
 800dba8:	6823      	ldr	r3, [r4, #0]
 800dbaa:	07d8      	lsls	r0, r3, #31
 800dbac:	d510      	bpl.n	800dbd0 <_printf_float+0x250>
 800dbae:	ee18 3a10 	vmov	r3, s16
 800dbb2:	4652      	mov	r2, sl
 800dbb4:	4631      	mov	r1, r6
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	47b8      	blx	r7
 800dbba:	3001      	adds	r0, #1
 800dbbc:	f43f af41 	beq.w	800da42 <_printf_float+0xc2>
 800dbc0:	f04f 0800 	mov.w	r8, #0
 800dbc4:	f104 091a 	add.w	r9, r4, #26
 800dbc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	4543      	cmp	r3, r8
 800dbce:	dc09      	bgt.n	800dbe4 <_printf_float+0x264>
 800dbd0:	6823      	ldr	r3, [r4, #0]
 800dbd2:	079b      	lsls	r3, r3, #30
 800dbd4:	f100 8105 	bmi.w	800dde2 <_printf_float+0x462>
 800dbd8:	68e0      	ldr	r0, [r4, #12]
 800dbda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbdc:	4298      	cmp	r0, r3
 800dbde:	bfb8      	it	lt
 800dbe0:	4618      	movlt	r0, r3
 800dbe2:	e730      	b.n	800da46 <_printf_float+0xc6>
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	464a      	mov	r2, r9
 800dbe8:	4631      	mov	r1, r6
 800dbea:	4628      	mov	r0, r5
 800dbec:	47b8      	blx	r7
 800dbee:	3001      	adds	r0, #1
 800dbf0:	f43f af27 	beq.w	800da42 <_printf_float+0xc2>
 800dbf4:	f108 0801 	add.w	r8, r8, #1
 800dbf8:	e7e6      	b.n	800dbc8 <_printf_float+0x248>
 800dbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	dc39      	bgt.n	800dc74 <_printf_float+0x2f4>
 800dc00:	4a1b      	ldr	r2, [pc, #108]	; (800dc70 <_printf_float+0x2f0>)
 800dc02:	2301      	movs	r3, #1
 800dc04:	4631      	mov	r1, r6
 800dc06:	4628      	mov	r0, r5
 800dc08:	47b8      	blx	r7
 800dc0a:	3001      	adds	r0, #1
 800dc0c:	f43f af19 	beq.w	800da42 <_printf_float+0xc2>
 800dc10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc14:	4313      	orrs	r3, r2
 800dc16:	d102      	bne.n	800dc1e <_printf_float+0x29e>
 800dc18:	6823      	ldr	r3, [r4, #0]
 800dc1a:	07d9      	lsls	r1, r3, #31
 800dc1c:	d5d8      	bpl.n	800dbd0 <_printf_float+0x250>
 800dc1e:	ee18 3a10 	vmov	r3, s16
 800dc22:	4652      	mov	r2, sl
 800dc24:	4631      	mov	r1, r6
 800dc26:	4628      	mov	r0, r5
 800dc28:	47b8      	blx	r7
 800dc2a:	3001      	adds	r0, #1
 800dc2c:	f43f af09 	beq.w	800da42 <_printf_float+0xc2>
 800dc30:	f04f 0900 	mov.w	r9, #0
 800dc34:	f104 0a1a 	add.w	sl, r4, #26
 800dc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc3a:	425b      	negs	r3, r3
 800dc3c:	454b      	cmp	r3, r9
 800dc3e:	dc01      	bgt.n	800dc44 <_printf_float+0x2c4>
 800dc40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc42:	e792      	b.n	800db6a <_printf_float+0x1ea>
 800dc44:	2301      	movs	r3, #1
 800dc46:	4652      	mov	r2, sl
 800dc48:	4631      	mov	r1, r6
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	47b8      	blx	r7
 800dc4e:	3001      	adds	r0, #1
 800dc50:	f43f aef7 	beq.w	800da42 <_printf_float+0xc2>
 800dc54:	f109 0901 	add.w	r9, r9, #1
 800dc58:	e7ee      	b.n	800dc38 <_printf_float+0x2b8>
 800dc5a:	bf00      	nop
 800dc5c:	7fefffff 	.word	0x7fefffff
 800dc60:	0801c954 	.word	0x0801c954
 800dc64:	0801c958 	.word	0x0801c958
 800dc68:	0801c960 	.word	0x0801c960
 800dc6c:	0801c95c 	.word	0x0801c95c
 800dc70:	0801c964 	.word	0x0801c964
 800dc74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	bfa8      	it	ge
 800dc7c:	461a      	movge	r2, r3
 800dc7e:	2a00      	cmp	r2, #0
 800dc80:	4691      	mov	r9, r2
 800dc82:	dc37      	bgt.n	800dcf4 <_printf_float+0x374>
 800dc84:	f04f 0b00 	mov.w	fp, #0
 800dc88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc8c:	f104 021a 	add.w	r2, r4, #26
 800dc90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc92:	9305      	str	r3, [sp, #20]
 800dc94:	eba3 0309 	sub.w	r3, r3, r9
 800dc98:	455b      	cmp	r3, fp
 800dc9a:	dc33      	bgt.n	800dd04 <_printf_float+0x384>
 800dc9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dca0:	429a      	cmp	r2, r3
 800dca2:	db3b      	blt.n	800dd1c <_printf_float+0x39c>
 800dca4:	6823      	ldr	r3, [r4, #0]
 800dca6:	07da      	lsls	r2, r3, #31
 800dca8:	d438      	bmi.n	800dd1c <_printf_float+0x39c>
 800dcaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcac:	9a05      	ldr	r2, [sp, #20]
 800dcae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcb0:	1a9a      	subs	r2, r3, r2
 800dcb2:	eba3 0901 	sub.w	r9, r3, r1
 800dcb6:	4591      	cmp	r9, r2
 800dcb8:	bfa8      	it	ge
 800dcba:	4691      	movge	r9, r2
 800dcbc:	f1b9 0f00 	cmp.w	r9, #0
 800dcc0:	dc35      	bgt.n	800dd2e <_printf_float+0x3ae>
 800dcc2:	f04f 0800 	mov.w	r8, #0
 800dcc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcca:	f104 0a1a 	add.w	sl, r4, #26
 800dcce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dcd2:	1a9b      	subs	r3, r3, r2
 800dcd4:	eba3 0309 	sub.w	r3, r3, r9
 800dcd8:	4543      	cmp	r3, r8
 800dcda:	f77f af79 	ble.w	800dbd0 <_printf_float+0x250>
 800dcde:	2301      	movs	r3, #1
 800dce0:	4652      	mov	r2, sl
 800dce2:	4631      	mov	r1, r6
 800dce4:	4628      	mov	r0, r5
 800dce6:	47b8      	blx	r7
 800dce8:	3001      	adds	r0, #1
 800dcea:	f43f aeaa 	beq.w	800da42 <_printf_float+0xc2>
 800dcee:	f108 0801 	add.w	r8, r8, #1
 800dcf2:	e7ec      	b.n	800dcce <_printf_float+0x34e>
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	4631      	mov	r1, r6
 800dcf8:	4642      	mov	r2, r8
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	47b8      	blx	r7
 800dcfe:	3001      	adds	r0, #1
 800dd00:	d1c0      	bne.n	800dc84 <_printf_float+0x304>
 800dd02:	e69e      	b.n	800da42 <_printf_float+0xc2>
 800dd04:	2301      	movs	r3, #1
 800dd06:	4631      	mov	r1, r6
 800dd08:	4628      	mov	r0, r5
 800dd0a:	9205      	str	r2, [sp, #20]
 800dd0c:	47b8      	blx	r7
 800dd0e:	3001      	adds	r0, #1
 800dd10:	f43f ae97 	beq.w	800da42 <_printf_float+0xc2>
 800dd14:	9a05      	ldr	r2, [sp, #20]
 800dd16:	f10b 0b01 	add.w	fp, fp, #1
 800dd1a:	e7b9      	b.n	800dc90 <_printf_float+0x310>
 800dd1c:	ee18 3a10 	vmov	r3, s16
 800dd20:	4652      	mov	r2, sl
 800dd22:	4631      	mov	r1, r6
 800dd24:	4628      	mov	r0, r5
 800dd26:	47b8      	blx	r7
 800dd28:	3001      	adds	r0, #1
 800dd2a:	d1be      	bne.n	800dcaa <_printf_float+0x32a>
 800dd2c:	e689      	b.n	800da42 <_printf_float+0xc2>
 800dd2e:	9a05      	ldr	r2, [sp, #20]
 800dd30:	464b      	mov	r3, r9
 800dd32:	4442      	add	r2, r8
 800dd34:	4631      	mov	r1, r6
 800dd36:	4628      	mov	r0, r5
 800dd38:	47b8      	blx	r7
 800dd3a:	3001      	adds	r0, #1
 800dd3c:	d1c1      	bne.n	800dcc2 <_printf_float+0x342>
 800dd3e:	e680      	b.n	800da42 <_printf_float+0xc2>
 800dd40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd42:	2a01      	cmp	r2, #1
 800dd44:	dc01      	bgt.n	800dd4a <_printf_float+0x3ca>
 800dd46:	07db      	lsls	r3, r3, #31
 800dd48:	d538      	bpl.n	800ddbc <_printf_float+0x43c>
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	4642      	mov	r2, r8
 800dd4e:	4631      	mov	r1, r6
 800dd50:	4628      	mov	r0, r5
 800dd52:	47b8      	blx	r7
 800dd54:	3001      	adds	r0, #1
 800dd56:	f43f ae74 	beq.w	800da42 <_printf_float+0xc2>
 800dd5a:	ee18 3a10 	vmov	r3, s16
 800dd5e:	4652      	mov	r2, sl
 800dd60:	4631      	mov	r1, r6
 800dd62:	4628      	mov	r0, r5
 800dd64:	47b8      	blx	r7
 800dd66:	3001      	adds	r0, #1
 800dd68:	f43f ae6b 	beq.w	800da42 <_printf_float+0xc2>
 800dd6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd70:	2200      	movs	r2, #0
 800dd72:	2300      	movs	r3, #0
 800dd74:	f7f2 fea8 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd78:	b9d8      	cbnz	r0, 800ddb2 <_printf_float+0x432>
 800dd7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd7c:	f108 0201 	add.w	r2, r8, #1
 800dd80:	3b01      	subs	r3, #1
 800dd82:	4631      	mov	r1, r6
 800dd84:	4628      	mov	r0, r5
 800dd86:	47b8      	blx	r7
 800dd88:	3001      	adds	r0, #1
 800dd8a:	d10e      	bne.n	800ddaa <_printf_float+0x42a>
 800dd8c:	e659      	b.n	800da42 <_printf_float+0xc2>
 800dd8e:	2301      	movs	r3, #1
 800dd90:	4652      	mov	r2, sl
 800dd92:	4631      	mov	r1, r6
 800dd94:	4628      	mov	r0, r5
 800dd96:	47b8      	blx	r7
 800dd98:	3001      	adds	r0, #1
 800dd9a:	f43f ae52 	beq.w	800da42 <_printf_float+0xc2>
 800dd9e:	f108 0801 	add.w	r8, r8, #1
 800dda2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dda4:	3b01      	subs	r3, #1
 800dda6:	4543      	cmp	r3, r8
 800dda8:	dcf1      	bgt.n	800dd8e <_printf_float+0x40e>
 800ddaa:	464b      	mov	r3, r9
 800ddac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ddb0:	e6dc      	b.n	800db6c <_printf_float+0x1ec>
 800ddb2:	f04f 0800 	mov.w	r8, #0
 800ddb6:	f104 0a1a 	add.w	sl, r4, #26
 800ddba:	e7f2      	b.n	800dda2 <_printf_float+0x422>
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	4642      	mov	r2, r8
 800ddc0:	e7df      	b.n	800dd82 <_printf_float+0x402>
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	464a      	mov	r2, r9
 800ddc6:	4631      	mov	r1, r6
 800ddc8:	4628      	mov	r0, r5
 800ddca:	47b8      	blx	r7
 800ddcc:	3001      	adds	r0, #1
 800ddce:	f43f ae38 	beq.w	800da42 <_printf_float+0xc2>
 800ddd2:	f108 0801 	add.w	r8, r8, #1
 800ddd6:	68e3      	ldr	r3, [r4, #12]
 800ddd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddda:	1a5b      	subs	r3, r3, r1
 800dddc:	4543      	cmp	r3, r8
 800ddde:	dcf0      	bgt.n	800ddc2 <_printf_float+0x442>
 800dde0:	e6fa      	b.n	800dbd8 <_printf_float+0x258>
 800dde2:	f04f 0800 	mov.w	r8, #0
 800dde6:	f104 0919 	add.w	r9, r4, #25
 800ddea:	e7f4      	b.n	800ddd6 <_printf_float+0x456>

0800ddec <_printf_common>:
 800ddec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddf0:	4616      	mov	r6, r2
 800ddf2:	4699      	mov	r9, r3
 800ddf4:	688a      	ldr	r2, [r1, #8]
 800ddf6:	690b      	ldr	r3, [r1, #16]
 800ddf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	bfb8      	it	lt
 800de00:	4613      	movlt	r3, r2
 800de02:	6033      	str	r3, [r6, #0]
 800de04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de08:	4607      	mov	r7, r0
 800de0a:	460c      	mov	r4, r1
 800de0c:	b10a      	cbz	r2, 800de12 <_printf_common+0x26>
 800de0e:	3301      	adds	r3, #1
 800de10:	6033      	str	r3, [r6, #0]
 800de12:	6823      	ldr	r3, [r4, #0]
 800de14:	0699      	lsls	r1, r3, #26
 800de16:	bf42      	ittt	mi
 800de18:	6833      	ldrmi	r3, [r6, #0]
 800de1a:	3302      	addmi	r3, #2
 800de1c:	6033      	strmi	r3, [r6, #0]
 800de1e:	6825      	ldr	r5, [r4, #0]
 800de20:	f015 0506 	ands.w	r5, r5, #6
 800de24:	d106      	bne.n	800de34 <_printf_common+0x48>
 800de26:	f104 0a19 	add.w	sl, r4, #25
 800de2a:	68e3      	ldr	r3, [r4, #12]
 800de2c:	6832      	ldr	r2, [r6, #0]
 800de2e:	1a9b      	subs	r3, r3, r2
 800de30:	42ab      	cmp	r3, r5
 800de32:	dc26      	bgt.n	800de82 <_printf_common+0x96>
 800de34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de38:	1e13      	subs	r3, r2, #0
 800de3a:	6822      	ldr	r2, [r4, #0]
 800de3c:	bf18      	it	ne
 800de3e:	2301      	movne	r3, #1
 800de40:	0692      	lsls	r2, r2, #26
 800de42:	d42b      	bmi.n	800de9c <_printf_common+0xb0>
 800de44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de48:	4649      	mov	r1, r9
 800de4a:	4638      	mov	r0, r7
 800de4c:	47c0      	blx	r8
 800de4e:	3001      	adds	r0, #1
 800de50:	d01e      	beq.n	800de90 <_printf_common+0xa4>
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	68e5      	ldr	r5, [r4, #12]
 800de56:	6832      	ldr	r2, [r6, #0]
 800de58:	f003 0306 	and.w	r3, r3, #6
 800de5c:	2b04      	cmp	r3, #4
 800de5e:	bf08      	it	eq
 800de60:	1aad      	subeq	r5, r5, r2
 800de62:	68a3      	ldr	r3, [r4, #8]
 800de64:	6922      	ldr	r2, [r4, #16]
 800de66:	bf0c      	ite	eq
 800de68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de6c:	2500      	movne	r5, #0
 800de6e:	4293      	cmp	r3, r2
 800de70:	bfc4      	itt	gt
 800de72:	1a9b      	subgt	r3, r3, r2
 800de74:	18ed      	addgt	r5, r5, r3
 800de76:	2600      	movs	r6, #0
 800de78:	341a      	adds	r4, #26
 800de7a:	42b5      	cmp	r5, r6
 800de7c:	d11a      	bne.n	800deb4 <_printf_common+0xc8>
 800de7e:	2000      	movs	r0, #0
 800de80:	e008      	b.n	800de94 <_printf_common+0xa8>
 800de82:	2301      	movs	r3, #1
 800de84:	4652      	mov	r2, sl
 800de86:	4649      	mov	r1, r9
 800de88:	4638      	mov	r0, r7
 800de8a:	47c0      	blx	r8
 800de8c:	3001      	adds	r0, #1
 800de8e:	d103      	bne.n	800de98 <_printf_common+0xac>
 800de90:	f04f 30ff 	mov.w	r0, #4294967295
 800de94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de98:	3501      	adds	r5, #1
 800de9a:	e7c6      	b.n	800de2a <_printf_common+0x3e>
 800de9c:	18e1      	adds	r1, r4, r3
 800de9e:	1c5a      	adds	r2, r3, #1
 800dea0:	2030      	movs	r0, #48	; 0x30
 800dea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dea6:	4422      	add	r2, r4
 800dea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800deac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800deb0:	3302      	adds	r3, #2
 800deb2:	e7c7      	b.n	800de44 <_printf_common+0x58>
 800deb4:	2301      	movs	r3, #1
 800deb6:	4622      	mov	r2, r4
 800deb8:	4649      	mov	r1, r9
 800deba:	4638      	mov	r0, r7
 800debc:	47c0      	blx	r8
 800debe:	3001      	adds	r0, #1
 800dec0:	d0e6      	beq.n	800de90 <_printf_common+0xa4>
 800dec2:	3601      	adds	r6, #1
 800dec4:	e7d9      	b.n	800de7a <_printf_common+0x8e>
	...

0800dec8 <_printf_i>:
 800dec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800decc:	7e0f      	ldrb	r7, [r1, #24]
 800dece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ded0:	2f78      	cmp	r7, #120	; 0x78
 800ded2:	4691      	mov	r9, r2
 800ded4:	4680      	mov	r8, r0
 800ded6:	460c      	mov	r4, r1
 800ded8:	469a      	mov	sl, r3
 800deda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dede:	d807      	bhi.n	800def0 <_printf_i+0x28>
 800dee0:	2f62      	cmp	r7, #98	; 0x62
 800dee2:	d80a      	bhi.n	800defa <_printf_i+0x32>
 800dee4:	2f00      	cmp	r7, #0
 800dee6:	f000 80d8 	beq.w	800e09a <_printf_i+0x1d2>
 800deea:	2f58      	cmp	r7, #88	; 0x58
 800deec:	f000 80a3 	beq.w	800e036 <_printf_i+0x16e>
 800def0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800def4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800def8:	e03a      	b.n	800df70 <_printf_i+0xa8>
 800defa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800defe:	2b15      	cmp	r3, #21
 800df00:	d8f6      	bhi.n	800def0 <_printf_i+0x28>
 800df02:	a101      	add	r1, pc, #4	; (adr r1, 800df08 <_printf_i+0x40>)
 800df04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df08:	0800df61 	.word	0x0800df61
 800df0c:	0800df75 	.word	0x0800df75
 800df10:	0800def1 	.word	0x0800def1
 800df14:	0800def1 	.word	0x0800def1
 800df18:	0800def1 	.word	0x0800def1
 800df1c:	0800def1 	.word	0x0800def1
 800df20:	0800df75 	.word	0x0800df75
 800df24:	0800def1 	.word	0x0800def1
 800df28:	0800def1 	.word	0x0800def1
 800df2c:	0800def1 	.word	0x0800def1
 800df30:	0800def1 	.word	0x0800def1
 800df34:	0800e081 	.word	0x0800e081
 800df38:	0800dfa5 	.word	0x0800dfa5
 800df3c:	0800e063 	.word	0x0800e063
 800df40:	0800def1 	.word	0x0800def1
 800df44:	0800def1 	.word	0x0800def1
 800df48:	0800e0a3 	.word	0x0800e0a3
 800df4c:	0800def1 	.word	0x0800def1
 800df50:	0800dfa5 	.word	0x0800dfa5
 800df54:	0800def1 	.word	0x0800def1
 800df58:	0800def1 	.word	0x0800def1
 800df5c:	0800e06b 	.word	0x0800e06b
 800df60:	682b      	ldr	r3, [r5, #0]
 800df62:	1d1a      	adds	r2, r3, #4
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	602a      	str	r2, [r5, #0]
 800df68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df70:	2301      	movs	r3, #1
 800df72:	e0a3      	b.n	800e0bc <_printf_i+0x1f4>
 800df74:	6820      	ldr	r0, [r4, #0]
 800df76:	6829      	ldr	r1, [r5, #0]
 800df78:	0606      	lsls	r6, r0, #24
 800df7a:	f101 0304 	add.w	r3, r1, #4
 800df7e:	d50a      	bpl.n	800df96 <_printf_i+0xce>
 800df80:	680e      	ldr	r6, [r1, #0]
 800df82:	602b      	str	r3, [r5, #0]
 800df84:	2e00      	cmp	r6, #0
 800df86:	da03      	bge.n	800df90 <_printf_i+0xc8>
 800df88:	232d      	movs	r3, #45	; 0x2d
 800df8a:	4276      	negs	r6, r6
 800df8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df90:	485e      	ldr	r0, [pc, #376]	; (800e10c <_printf_i+0x244>)
 800df92:	230a      	movs	r3, #10
 800df94:	e019      	b.n	800dfca <_printf_i+0x102>
 800df96:	680e      	ldr	r6, [r1, #0]
 800df98:	602b      	str	r3, [r5, #0]
 800df9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800df9e:	bf18      	it	ne
 800dfa0:	b236      	sxthne	r6, r6
 800dfa2:	e7ef      	b.n	800df84 <_printf_i+0xbc>
 800dfa4:	682b      	ldr	r3, [r5, #0]
 800dfa6:	6820      	ldr	r0, [r4, #0]
 800dfa8:	1d19      	adds	r1, r3, #4
 800dfaa:	6029      	str	r1, [r5, #0]
 800dfac:	0601      	lsls	r1, r0, #24
 800dfae:	d501      	bpl.n	800dfb4 <_printf_i+0xec>
 800dfb0:	681e      	ldr	r6, [r3, #0]
 800dfb2:	e002      	b.n	800dfba <_printf_i+0xf2>
 800dfb4:	0646      	lsls	r6, r0, #25
 800dfb6:	d5fb      	bpl.n	800dfb0 <_printf_i+0xe8>
 800dfb8:	881e      	ldrh	r6, [r3, #0]
 800dfba:	4854      	ldr	r0, [pc, #336]	; (800e10c <_printf_i+0x244>)
 800dfbc:	2f6f      	cmp	r7, #111	; 0x6f
 800dfbe:	bf0c      	ite	eq
 800dfc0:	2308      	moveq	r3, #8
 800dfc2:	230a      	movne	r3, #10
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dfca:	6865      	ldr	r5, [r4, #4]
 800dfcc:	60a5      	str	r5, [r4, #8]
 800dfce:	2d00      	cmp	r5, #0
 800dfd0:	bfa2      	ittt	ge
 800dfd2:	6821      	ldrge	r1, [r4, #0]
 800dfd4:	f021 0104 	bicge.w	r1, r1, #4
 800dfd8:	6021      	strge	r1, [r4, #0]
 800dfda:	b90e      	cbnz	r6, 800dfe0 <_printf_i+0x118>
 800dfdc:	2d00      	cmp	r5, #0
 800dfde:	d04d      	beq.n	800e07c <_printf_i+0x1b4>
 800dfe0:	4615      	mov	r5, r2
 800dfe2:	fbb6 f1f3 	udiv	r1, r6, r3
 800dfe6:	fb03 6711 	mls	r7, r3, r1, r6
 800dfea:	5dc7      	ldrb	r7, [r0, r7]
 800dfec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dff0:	4637      	mov	r7, r6
 800dff2:	42bb      	cmp	r3, r7
 800dff4:	460e      	mov	r6, r1
 800dff6:	d9f4      	bls.n	800dfe2 <_printf_i+0x11a>
 800dff8:	2b08      	cmp	r3, #8
 800dffa:	d10b      	bne.n	800e014 <_printf_i+0x14c>
 800dffc:	6823      	ldr	r3, [r4, #0]
 800dffe:	07de      	lsls	r6, r3, #31
 800e000:	d508      	bpl.n	800e014 <_printf_i+0x14c>
 800e002:	6923      	ldr	r3, [r4, #16]
 800e004:	6861      	ldr	r1, [r4, #4]
 800e006:	4299      	cmp	r1, r3
 800e008:	bfde      	ittt	le
 800e00a:	2330      	movle	r3, #48	; 0x30
 800e00c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e010:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e014:	1b52      	subs	r2, r2, r5
 800e016:	6122      	str	r2, [r4, #16]
 800e018:	f8cd a000 	str.w	sl, [sp]
 800e01c:	464b      	mov	r3, r9
 800e01e:	aa03      	add	r2, sp, #12
 800e020:	4621      	mov	r1, r4
 800e022:	4640      	mov	r0, r8
 800e024:	f7ff fee2 	bl	800ddec <_printf_common>
 800e028:	3001      	adds	r0, #1
 800e02a:	d14c      	bne.n	800e0c6 <_printf_i+0x1fe>
 800e02c:	f04f 30ff 	mov.w	r0, #4294967295
 800e030:	b004      	add	sp, #16
 800e032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e036:	4835      	ldr	r0, [pc, #212]	; (800e10c <_printf_i+0x244>)
 800e038:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e03c:	6829      	ldr	r1, [r5, #0]
 800e03e:	6823      	ldr	r3, [r4, #0]
 800e040:	f851 6b04 	ldr.w	r6, [r1], #4
 800e044:	6029      	str	r1, [r5, #0]
 800e046:	061d      	lsls	r5, r3, #24
 800e048:	d514      	bpl.n	800e074 <_printf_i+0x1ac>
 800e04a:	07df      	lsls	r7, r3, #31
 800e04c:	bf44      	itt	mi
 800e04e:	f043 0320 	orrmi.w	r3, r3, #32
 800e052:	6023      	strmi	r3, [r4, #0]
 800e054:	b91e      	cbnz	r6, 800e05e <_printf_i+0x196>
 800e056:	6823      	ldr	r3, [r4, #0]
 800e058:	f023 0320 	bic.w	r3, r3, #32
 800e05c:	6023      	str	r3, [r4, #0]
 800e05e:	2310      	movs	r3, #16
 800e060:	e7b0      	b.n	800dfc4 <_printf_i+0xfc>
 800e062:	6823      	ldr	r3, [r4, #0]
 800e064:	f043 0320 	orr.w	r3, r3, #32
 800e068:	6023      	str	r3, [r4, #0]
 800e06a:	2378      	movs	r3, #120	; 0x78
 800e06c:	4828      	ldr	r0, [pc, #160]	; (800e110 <_printf_i+0x248>)
 800e06e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e072:	e7e3      	b.n	800e03c <_printf_i+0x174>
 800e074:	0659      	lsls	r1, r3, #25
 800e076:	bf48      	it	mi
 800e078:	b2b6      	uxthmi	r6, r6
 800e07a:	e7e6      	b.n	800e04a <_printf_i+0x182>
 800e07c:	4615      	mov	r5, r2
 800e07e:	e7bb      	b.n	800dff8 <_printf_i+0x130>
 800e080:	682b      	ldr	r3, [r5, #0]
 800e082:	6826      	ldr	r6, [r4, #0]
 800e084:	6961      	ldr	r1, [r4, #20]
 800e086:	1d18      	adds	r0, r3, #4
 800e088:	6028      	str	r0, [r5, #0]
 800e08a:	0635      	lsls	r5, r6, #24
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	d501      	bpl.n	800e094 <_printf_i+0x1cc>
 800e090:	6019      	str	r1, [r3, #0]
 800e092:	e002      	b.n	800e09a <_printf_i+0x1d2>
 800e094:	0670      	lsls	r0, r6, #25
 800e096:	d5fb      	bpl.n	800e090 <_printf_i+0x1c8>
 800e098:	8019      	strh	r1, [r3, #0]
 800e09a:	2300      	movs	r3, #0
 800e09c:	6123      	str	r3, [r4, #16]
 800e09e:	4615      	mov	r5, r2
 800e0a0:	e7ba      	b.n	800e018 <_printf_i+0x150>
 800e0a2:	682b      	ldr	r3, [r5, #0]
 800e0a4:	1d1a      	adds	r2, r3, #4
 800e0a6:	602a      	str	r2, [r5, #0]
 800e0a8:	681d      	ldr	r5, [r3, #0]
 800e0aa:	6862      	ldr	r2, [r4, #4]
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	f7f2 f896 	bl	80001e0 <memchr>
 800e0b4:	b108      	cbz	r0, 800e0ba <_printf_i+0x1f2>
 800e0b6:	1b40      	subs	r0, r0, r5
 800e0b8:	6060      	str	r0, [r4, #4]
 800e0ba:	6863      	ldr	r3, [r4, #4]
 800e0bc:	6123      	str	r3, [r4, #16]
 800e0be:	2300      	movs	r3, #0
 800e0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0c4:	e7a8      	b.n	800e018 <_printf_i+0x150>
 800e0c6:	6923      	ldr	r3, [r4, #16]
 800e0c8:	462a      	mov	r2, r5
 800e0ca:	4649      	mov	r1, r9
 800e0cc:	4640      	mov	r0, r8
 800e0ce:	47d0      	blx	sl
 800e0d0:	3001      	adds	r0, #1
 800e0d2:	d0ab      	beq.n	800e02c <_printf_i+0x164>
 800e0d4:	6823      	ldr	r3, [r4, #0]
 800e0d6:	079b      	lsls	r3, r3, #30
 800e0d8:	d413      	bmi.n	800e102 <_printf_i+0x23a>
 800e0da:	68e0      	ldr	r0, [r4, #12]
 800e0dc:	9b03      	ldr	r3, [sp, #12]
 800e0de:	4298      	cmp	r0, r3
 800e0e0:	bfb8      	it	lt
 800e0e2:	4618      	movlt	r0, r3
 800e0e4:	e7a4      	b.n	800e030 <_printf_i+0x168>
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	4632      	mov	r2, r6
 800e0ea:	4649      	mov	r1, r9
 800e0ec:	4640      	mov	r0, r8
 800e0ee:	47d0      	blx	sl
 800e0f0:	3001      	adds	r0, #1
 800e0f2:	d09b      	beq.n	800e02c <_printf_i+0x164>
 800e0f4:	3501      	adds	r5, #1
 800e0f6:	68e3      	ldr	r3, [r4, #12]
 800e0f8:	9903      	ldr	r1, [sp, #12]
 800e0fa:	1a5b      	subs	r3, r3, r1
 800e0fc:	42ab      	cmp	r3, r5
 800e0fe:	dcf2      	bgt.n	800e0e6 <_printf_i+0x21e>
 800e100:	e7eb      	b.n	800e0da <_printf_i+0x212>
 800e102:	2500      	movs	r5, #0
 800e104:	f104 0619 	add.w	r6, r4, #25
 800e108:	e7f5      	b.n	800e0f6 <_printf_i+0x22e>
 800e10a:	bf00      	nop
 800e10c:	0801c966 	.word	0x0801c966
 800e110:	0801c977 	.word	0x0801c977

0800e114 <iprintf>:
 800e114:	b40f      	push	{r0, r1, r2, r3}
 800e116:	4b0a      	ldr	r3, [pc, #40]	; (800e140 <iprintf+0x2c>)
 800e118:	b513      	push	{r0, r1, r4, lr}
 800e11a:	681c      	ldr	r4, [r3, #0]
 800e11c:	b124      	cbz	r4, 800e128 <iprintf+0x14>
 800e11e:	69a3      	ldr	r3, [r4, #24]
 800e120:	b913      	cbnz	r3, 800e128 <iprintf+0x14>
 800e122:	4620      	mov	r0, r4
 800e124:	f001 f924 	bl	800f370 <__sinit>
 800e128:	ab05      	add	r3, sp, #20
 800e12a:	9a04      	ldr	r2, [sp, #16]
 800e12c:	68a1      	ldr	r1, [r4, #8]
 800e12e:	9301      	str	r3, [sp, #4]
 800e130:	4620      	mov	r0, r4
 800e132:	f001 ff81 	bl	8010038 <_vfiprintf_r>
 800e136:	b002      	add	sp, #8
 800e138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e13c:	b004      	add	sp, #16
 800e13e:	4770      	bx	lr
 800e140:	200009bc 	.word	0x200009bc

0800e144 <_puts_r>:
 800e144:	b570      	push	{r4, r5, r6, lr}
 800e146:	460e      	mov	r6, r1
 800e148:	4605      	mov	r5, r0
 800e14a:	b118      	cbz	r0, 800e154 <_puts_r+0x10>
 800e14c:	6983      	ldr	r3, [r0, #24]
 800e14e:	b90b      	cbnz	r3, 800e154 <_puts_r+0x10>
 800e150:	f001 f90e 	bl	800f370 <__sinit>
 800e154:	69ab      	ldr	r3, [r5, #24]
 800e156:	68ac      	ldr	r4, [r5, #8]
 800e158:	b913      	cbnz	r3, 800e160 <_puts_r+0x1c>
 800e15a:	4628      	mov	r0, r5
 800e15c:	f001 f908 	bl	800f370 <__sinit>
 800e160:	4b2c      	ldr	r3, [pc, #176]	; (800e214 <_puts_r+0xd0>)
 800e162:	429c      	cmp	r4, r3
 800e164:	d120      	bne.n	800e1a8 <_puts_r+0x64>
 800e166:	686c      	ldr	r4, [r5, #4]
 800e168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e16a:	07db      	lsls	r3, r3, #31
 800e16c:	d405      	bmi.n	800e17a <_puts_r+0x36>
 800e16e:	89a3      	ldrh	r3, [r4, #12]
 800e170:	0598      	lsls	r0, r3, #22
 800e172:	d402      	bmi.n	800e17a <_puts_r+0x36>
 800e174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e176:	f001 f99e 	bl	800f4b6 <__retarget_lock_acquire_recursive>
 800e17a:	89a3      	ldrh	r3, [r4, #12]
 800e17c:	0719      	lsls	r1, r3, #28
 800e17e:	d51d      	bpl.n	800e1bc <_puts_r+0x78>
 800e180:	6923      	ldr	r3, [r4, #16]
 800e182:	b1db      	cbz	r3, 800e1bc <_puts_r+0x78>
 800e184:	3e01      	subs	r6, #1
 800e186:	68a3      	ldr	r3, [r4, #8]
 800e188:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e18c:	3b01      	subs	r3, #1
 800e18e:	60a3      	str	r3, [r4, #8]
 800e190:	bb39      	cbnz	r1, 800e1e2 <_puts_r+0x9e>
 800e192:	2b00      	cmp	r3, #0
 800e194:	da38      	bge.n	800e208 <_puts_r+0xc4>
 800e196:	4622      	mov	r2, r4
 800e198:	210a      	movs	r1, #10
 800e19a:	4628      	mov	r0, r5
 800e19c:	f000 f894 	bl	800e2c8 <__swbuf_r>
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	d011      	beq.n	800e1c8 <_puts_r+0x84>
 800e1a4:	250a      	movs	r5, #10
 800e1a6:	e011      	b.n	800e1cc <_puts_r+0x88>
 800e1a8:	4b1b      	ldr	r3, [pc, #108]	; (800e218 <_puts_r+0xd4>)
 800e1aa:	429c      	cmp	r4, r3
 800e1ac:	d101      	bne.n	800e1b2 <_puts_r+0x6e>
 800e1ae:	68ac      	ldr	r4, [r5, #8]
 800e1b0:	e7da      	b.n	800e168 <_puts_r+0x24>
 800e1b2:	4b1a      	ldr	r3, [pc, #104]	; (800e21c <_puts_r+0xd8>)
 800e1b4:	429c      	cmp	r4, r3
 800e1b6:	bf08      	it	eq
 800e1b8:	68ec      	ldreq	r4, [r5, #12]
 800e1ba:	e7d5      	b.n	800e168 <_puts_r+0x24>
 800e1bc:	4621      	mov	r1, r4
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f000 f8d4 	bl	800e36c <__swsetup_r>
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	d0dd      	beq.n	800e184 <_puts_r+0x40>
 800e1c8:	f04f 35ff 	mov.w	r5, #4294967295
 800e1cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1ce:	07da      	lsls	r2, r3, #31
 800e1d0:	d405      	bmi.n	800e1de <_puts_r+0x9a>
 800e1d2:	89a3      	ldrh	r3, [r4, #12]
 800e1d4:	059b      	lsls	r3, r3, #22
 800e1d6:	d402      	bmi.n	800e1de <_puts_r+0x9a>
 800e1d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1da:	f001 f96d 	bl	800f4b8 <__retarget_lock_release_recursive>
 800e1de:	4628      	mov	r0, r5
 800e1e0:	bd70      	pop	{r4, r5, r6, pc}
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	da04      	bge.n	800e1f0 <_puts_r+0xac>
 800e1e6:	69a2      	ldr	r2, [r4, #24]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	dc06      	bgt.n	800e1fa <_puts_r+0xb6>
 800e1ec:	290a      	cmp	r1, #10
 800e1ee:	d004      	beq.n	800e1fa <_puts_r+0xb6>
 800e1f0:	6823      	ldr	r3, [r4, #0]
 800e1f2:	1c5a      	adds	r2, r3, #1
 800e1f4:	6022      	str	r2, [r4, #0]
 800e1f6:	7019      	strb	r1, [r3, #0]
 800e1f8:	e7c5      	b.n	800e186 <_puts_r+0x42>
 800e1fa:	4622      	mov	r2, r4
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	f000 f863 	bl	800e2c8 <__swbuf_r>
 800e202:	3001      	adds	r0, #1
 800e204:	d1bf      	bne.n	800e186 <_puts_r+0x42>
 800e206:	e7df      	b.n	800e1c8 <_puts_r+0x84>
 800e208:	6823      	ldr	r3, [r4, #0]
 800e20a:	250a      	movs	r5, #10
 800e20c:	1c5a      	adds	r2, r3, #1
 800e20e:	6022      	str	r2, [r4, #0]
 800e210:	701d      	strb	r5, [r3, #0]
 800e212:	e7db      	b.n	800e1cc <_puts_r+0x88>
 800e214:	0801ca38 	.word	0x0801ca38
 800e218:	0801ca58 	.word	0x0801ca58
 800e21c:	0801ca18 	.word	0x0801ca18

0800e220 <puts>:
 800e220:	4b02      	ldr	r3, [pc, #8]	; (800e22c <puts+0xc>)
 800e222:	4601      	mov	r1, r0
 800e224:	6818      	ldr	r0, [r3, #0]
 800e226:	f7ff bf8d 	b.w	800e144 <_puts_r>
 800e22a:	bf00      	nop
 800e22c:	200009bc 	.word	0x200009bc

0800e230 <realloc>:
 800e230:	4b02      	ldr	r3, [pc, #8]	; (800e23c <realloc+0xc>)
 800e232:	460a      	mov	r2, r1
 800e234:	4601      	mov	r1, r0
 800e236:	6818      	ldr	r0, [r3, #0]
 800e238:	f001 bd4a 	b.w	800fcd0 <_realloc_r>
 800e23c:	200009bc 	.word	0x200009bc

0800e240 <_sbrk_r>:
 800e240:	b538      	push	{r3, r4, r5, lr}
 800e242:	4d06      	ldr	r5, [pc, #24]	; (800e25c <_sbrk_r+0x1c>)
 800e244:	2300      	movs	r3, #0
 800e246:	4604      	mov	r4, r0
 800e248:	4608      	mov	r0, r1
 800e24a:	602b      	str	r3, [r5, #0]
 800e24c:	f7f4 fb92 	bl	8002974 <_sbrk>
 800e250:	1c43      	adds	r3, r0, #1
 800e252:	d102      	bne.n	800e25a <_sbrk_r+0x1a>
 800e254:	682b      	ldr	r3, [r5, #0]
 800e256:	b103      	cbz	r3, 800e25a <_sbrk_r+0x1a>
 800e258:	6023      	str	r3, [r4, #0]
 800e25a:	bd38      	pop	{r3, r4, r5, pc}
 800e25c:	20002398 	.word	0x20002398

0800e260 <sniprintf>:
 800e260:	b40c      	push	{r2, r3}
 800e262:	b530      	push	{r4, r5, lr}
 800e264:	4b17      	ldr	r3, [pc, #92]	; (800e2c4 <sniprintf+0x64>)
 800e266:	1e0c      	subs	r4, r1, #0
 800e268:	681d      	ldr	r5, [r3, #0]
 800e26a:	b09d      	sub	sp, #116	; 0x74
 800e26c:	da08      	bge.n	800e280 <sniprintf+0x20>
 800e26e:	238b      	movs	r3, #139	; 0x8b
 800e270:	602b      	str	r3, [r5, #0]
 800e272:	f04f 30ff 	mov.w	r0, #4294967295
 800e276:	b01d      	add	sp, #116	; 0x74
 800e278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e27c:	b002      	add	sp, #8
 800e27e:	4770      	bx	lr
 800e280:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e284:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e288:	bf14      	ite	ne
 800e28a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e28e:	4623      	moveq	r3, r4
 800e290:	9304      	str	r3, [sp, #16]
 800e292:	9307      	str	r3, [sp, #28]
 800e294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e298:	9002      	str	r0, [sp, #8]
 800e29a:	9006      	str	r0, [sp, #24]
 800e29c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e2a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e2a2:	ab21      	add	r3, sp, #132	; 0x84
 800e2a4:	a902      	add	r1, sp, #8
 800e2a6:	4628      	mov	r0, r5
 800e2a8:	9301      	str	r3, [sp, #4]
 800e2aa:	f001 fd9b 	bl	800fde4 <_svfiprintf_r>
 800e2ae:	1c43      	adds	r3, r0, #1
 800e2b0:	bfbc      	itt	lt
 800e2b2:	238b      	movlt	r3, #139	; 0x8b
 800e2b4:	602b      	strlt	r3, [r5, #0]
 800e2b6:	2c00      	cmp	r4, #0
 800e2b8:	d0dd      	beq.n	800e276 <sniprintf+0x16>
 800e2ba:	9b02      	ldr	r3, [sp, #8]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	701a      	strb	r2, [r3, #0]
 800e2c0:	e7d9      	b.n	800e276 <sniprintf+0x16>
 800e2c2:	bf00      	nop
 800e2c4:	200009bc 	.word	0x200009bc

0800e2c8 <__swbuf_r>:
 800e2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ca:	460e      	mov	r6, r1
 800e2cc:	4614      	mov	r4, r2
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	b118      	cbz	r0, 800e2da <__swbuf_r+0x12>
 800e2d2:	6983      	ldr	r3, [r0, #24]
 800e2d4:	b90b      	cbnz	r3, 800e2da <__swbuf_r+0x12>
 800e2d6:	f001 f84b 	bl	800f370 <__sinit>
 800e2da:	4b21      	ldr	r3, [pc, #132]	; (800e360 <__swbuf_r+0x98>)
 800e2dc:	429c      	cmp	r4, r3
 800e2de:	d12b      	bne.n	800e338 <__swbuf_r+0x70>
 800e2e0:	686c      	ldr	r4, [r5, #4]
 800e2e2:	69a3      	ldr	r3, [r4, #24]
 800e2e4:	60a3      	str	r3, [r4, #8]
 800e2e6:	89a3      	ldrh	r3, [r4, #12]
 800e2e8:	071a      	lsls	r2, r3, #28
 800e2ea:	d52f      	bpl.n	800e34c <__swbuf_r+0x84>
 800e2ec:	6923      	ldr	r3, [r4, #16]
 800e2ee:	b36b      	cbz	r3, 800e34c <__swbuf_r+0x84>
 800e2f0:	6923      	ldr	r3, [r4, #16]
 800e2f2:	6820      	ldr	r0, [r4, #0]
 800e2f4:	1ac0      	subs	r0, r0, r3
 800e2f6:	6963      	ldr	r3, [r4, #20]
 800e2f8:	b2f6      	uxtb	r6, r6
 800e2fa:	4283      	cmp	r3, r0
 800e2fc:	4637      	mov	r7, r6
 800e2fe:	dc04      	bgt.n	800e30a <__swbuf_r+0x42>
 800e300:	4621      	mov	r1, r4
 800e302:	4628      	mov	r0, r5
 800e304:	f000 ffa0 	bl	800f248 <_fflush_r>
 800e308:	bb30      	cbnz	r0, 800e358 <__swbuf_r+0x90>
 800e30a:	68a3      	ldr	r3, [r4, #8]
 800e30c:	3b01      	subs	r3, #1
 800e30e:	60a3      	str	r3, [r4, #8]
 800e310:	6823      	ldr	r3, [r4, #0]
 800e312:	1c5a      	adds	r2, r3, #1
 800e314:	6022      	str	r2, [r4, #0]
 800e316:	701e      	strb	r6, [r3, #0]
 800e318:	6963      	ldr	r3, [r4, #20]
 800e31a:	3001      	adds	r0, #1
 800e31c:	4283      	cmp	r3, r0
 800e31e:	d004      	beq.n	800e32a <__swbuf_r+0x62>
 800e320:	89a3      	ldrh	r3, [r4, #12]
 800e322:	07db      	lsls	r3, r3, #31
 800e324:	d506      	bpl.n	800e334 <__swbuf_r+0x6c>
 800e326:	2e0a      	cmp	r6, #10
 800e328:	d104      	bne.n	800e334 <__swbuf_r+0x6c>
 800e32a:	4621      	mov	r1, r4
 800e32c:	4628      	mov	r0, r5
 800e32e:	f000 ff8b 	bl	800f248 <_fflush_r>
 800e332:	b988      	cbnz	r0, 800e358 <__swbuf_r+0x90>
 800e334:	4638      	mov	r0, r7
 800e336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e338:	4b0a      	ldr	r3, [pc, #40]	; (800e364 <__swbuf_r+0x9c>)
 800e33a:	429c      	cmp	r4, r3
 800e33c:	d101      	bne.n	800e342 <__swbuf_r+0x7a>
 800e33e:	68ac      	ldr	r4, [r5, #8]
 800e340:	e7cf      	b.n	800e2e2 <__swbuf_r+0x1a>
 800e342:	4b09      	ldr	r3, [pc, #36]	; (800e368 <__swbuf_r+0xa0>)
 800e344:	429c      	cmp	r4, r3
 800e346:	bf08      	it	eq
 800e348:	68ec      	ldreq	r4, [r5, #12]
 800e34a:	e7ca      	b.n	800e2e2 <__swbuf_r+0x1a>
 800e34c:	4621      	mov	r1, r4
 800e34e:	4628      	mov	r0, r5
 800e350:	f000 f80c 	bl	800e36c <__swsetup_r>
 800e354:	2800      	cmp	r0, #0
 800e356:	d0cb      	beq.n	800e2f0 <__swbuf_r+0x28>
 800e358:	f04f 37ff 	mov.w	r7, #4294967295
 800e35c:	e7ea      	b.n	800e334 <__swbuf_r+0x6c>
 800e35e:	bf00      	nop
 800e360:	0801ca38 	.word	0x0801ca38
 800e364:	0801ca58 	.word	0x0801ca58
 800e368:	0801ca18 	.word	0x0801ca18

0800e36c <__swsetup_r>:
 800e36c:	4b32      	ldr	r3, [pc, #200]	; (800e438 <__swsetup_r+0xcc>)
 800e36e:	b570      	push	{r4, r5, r6, lr}
 800e370:	681d      	ldr	r5, [r3, #0]
 800e372:	4606      	mov	r6, r0
 800e374:	460c      	mov	r4, r1
 800e376:	b125      	cbz	r5, 800e382 <__swsetup_r+0x16>
 800e378:	69ab      	ldr	r3, [r5, #24]
 800e37a:	b913      	cbnz	r3, 800e382 <__swsetup_r+0x16>
 800e37c:	4628      	mov	r0, r5
 800e37e:	f000 fff7 	bl	800f370 <__sinit>
 800e382:	4b2e      	ldr	r3, [pc, #184]	; (800e43c <__swsetup_r+0xd0>)
 800e384:	429c      	cmp	r4, r3
 800e386:	d10f      	bne.n	800e3a8 <__swsetup_r+0x3c>
 800e388:	686c      	ldr	r4, [r5, #4]
 800e38a:	89a3      	ldrh	r3, [r4, #12]
 800e38c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e390:	0719      	lsls	r1, r3, #28
 800e392:	d42c      	bmi.n	800e3ee <__swsetup_r+0x82>
 800e394:	06dd      	lsls	r5, r3, #27
 800e396:	d411      	bmi.n	800e3bc <__swsetup_r+0x50>
 800e398:	2309      	movs	r3, #9
 800e39a:	6033      	str	r3, [r6, #0]
 800e39c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3a0:	81a3      	strh	r3, [r4, #12]
 800e3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a6:	e03e      	b.n	800e426 <__swsetup_r+0xba>
 800e3a8:	4b25      	ldr	r3, [pc, #148]	; (800e440 <__swsetup_r+0xd4>)
 800e3aa:	429c      	cmp	r4, r3
 800e3ac:	d101      	bne.n	800e3b2 <__swsetup_r+0x46>
 800e3ae:	68ac      	ldr	r4, [r5, #8]
 800e3b0:	e7eb      	b.n	800e38a <__swsetup_r+0x1e>
 800e3b2:	4b24      	ldr	r3, [pc, #144]	; (800e444 <__swsetup_r+0xd8>)
 800e3b4:	429c      	cmp	r4, r3
 800e3b6:	bf08      	it	eq
 800e3b8:	68ec      	ldreq	r4, [r5, #12]
 800e3ba:	e7e6      	b.n	800e38a <__swsetup_r+0x1e>
 800e3bc:	0758      	lsls	r0, r3, #29
 800e3be:	d512      	bpl.n	800e3e6 <__swsetup_r+0x7a>
 800e3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3c2:	b141      	cbz	r1, 800e3d6 <__swsetup_r+0x6a>
 800e3c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3c8:	4299      	cmp	r1, r3
 800e3ca:	d002      	beq.n	800e3d2 <__swsetup_r+0x66>
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	f7ff f957 	bl	800d680 <_free_r>
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	6363      	str	r3, [r4, #52]	; 0x34
 800e3d6:	89a3      	ldrh	r3, [r4, #12]
 800e3d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3dc:	81a3      	strh	r3, [r4, #12]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	6063      	str	r3, [r4, #4]
 800e3e2:	6923      	ldr	r3, [r4, #16]
 800e3e4:	6023      	str	r3, [r4, #0]
 800e3e6:	89a3      	ldrh	r3, [r4, #12]
 800e3e8:	f043 0308 	orr.w	r3, r3, #8
 800e3ec:	81a3      	strh	r3, [r4, #12]
 800e3ee:	6923      	ldr	r3, [r4, #16]
 800e3f0:	b94b      	cbnz	r3, 800e406 <__swsetup_r+0x9a>
 800e3f2:	89a3      	ldrh	r3, [r4, #12]
 800e3f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3fc:	d003      	beq.n	800e406 <__swsetup_r+0x9a>
 800e3fe:	4621      	mov	r1, r4
 800e400:	4630      	mov	r0, r6
 800e402:	f001 f87f 	bl	800f504 <__smakebuf_r>
 800e406:	89a0      	ldrh	r0, [r4, #12]
 800e408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e40c:	f010 0301 	ands.w	r3, r0, #1
 800e410:	d00a      	beq.n	800e428 <__swsetup_r+0xbc>
 800e412:	2300      	movs	r3, #0
 800e414:	60a3      	str	r3, [r4, #8]
 800e416:	6963      	ldr	r3, [r4, #20]
 800e418:	425b      	negs	r3, r3
 800e41a:	61a3      	str	r3, [r4, #24]
 800e41c:	6923      	ldr	r3, [r4, #16]
 800e41e:	b943      	cbnz	r3, 800e432 <__swsetup_r+0xc6>
 800e420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e424:	d1ba      	bne.n	800e39c <__swsetup_r+0x30>
 800e426:	bd70      	pop	{r4, r5, r6, pc}
 800e428:	0781      	lsls	r1, r0, #30
 800e42a:	bf58      	it	pl
 800e42c:	6963      	ldrpl	r3, [r4, #20]
 800e42e:	60a3      	str	r3, [r4, #8]
 800e430:	e7f4      	b.n	800e41c <__swsetup_r+0xb0>
 800e432:	2000      	movs	r0, #0
 800e434:	e7f7      	b.n	800e426 <__swsetup_r+0xba>
 800e436:	bf00      	nop
 800e438:	200009bc 	.word	0x200009bc
 800e43c:	0801ca38 	.word	0x0801ca38
 800e440:	0801ca58 	.word	0x0801ca58
 800e444:	0801ca18 	.word	0x0801ca18

0800e448 <quorem>:
 800e448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44c:	6903      	ldr	r3, [r0, #16]
 800e44e:	690c      	ldr	r4, [r1, #16]
 800e450:	42a3      	cmp	r3, r4
 800e452:	4607      	mov	r7, r0
 800e454:	f2c0 8081 	blt.w	800e55a <quorem+0x112>
 800e458:	3c01      	subs	r4, #1
 800e45a:	f101 0814 	add.w	r8, r1, #20
 800e45e:	f100 0514 	add.w	r5, r0, #20
 800e462:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e466:	9301      	str	r3, [sp, #4]
 800e468:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e46c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e470:	3301      	adds	r3, #1
 800e472:	429a      	cmp	r2, r3
 800e474:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e478:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e47c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e480:	d331      	bcc.n	800e4e6 <quorem+0x9e>
 800e482:	f04f 0e00 	mov.w	lr, #0
 800e486:	4640      	mov	r0, r8
 800e488:	46ac      	mov	ip, r5
 800e48a:	46f2      	mov	sl, lr
 800e48c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e490:	b293      	uxth	r3, r2
 800e492:	fb06 e303 	mla	r3, r6, r3, lr
 800e496:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	ebaa 0303 	sub.w	r3, sl, r3
 800e4a0:	f8dc a000 	ldr.w	sl, [ip]
 800e4a4:	0c12      	lsrs	r2, r2, #16
 800e4a6:	fa13 f38a 	uxtah	r3, r3, sl
 800e4aa:	fb06 e202 	mla	r2, r6, r2, lr
 800e4ae:	9300      	str	r3, [sp, #0]
 800e4b0:	9b00      	ldr	r3, [sp, #0]
 800e4b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e4b6:	b292      	uxth	r2, r2
 800e4b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e4bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e4c0:	f8bd 3000 	ldrh.w	r3, [sp]
 800e4c4:	4581      	cmp	r9, r0
 800e4c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4ca:	f84c 3b04 	str.w	r3, [ip], #4
 800e4ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e4d2:	d2db      	bcs.n	800e48c <quorem+0x44>
 800e4d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800e4d8:	b92b      	cbnz	r3, 800e4e6 <quorem+0x9e>
 800e4da:	9b01      	ldr	r3, [sp, #4]
 800e4dc:	3b04      	subs	r3, #4
 800e4de:	429d      	cmp	r5, r3
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	d32e      	bcc.n	800e542 <quorem+0xfa>
 800e4e4:	613c      	str	r4, [r7, #16]
 800e4e6:	4638      	mov	r0, r7
 800e4e8:	f001 fada 	bl	800faa0 <__mcmp>
 800e4ec:	2800      	cmp	r0, #0
 800e4ee:	db24      	blt.n	800e53a <quorem+0xf2>
 800e4f0:	3601      	adds	r6, #1
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	f04f 0c00 	mov.w	ip, #0
 800e4f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800e4fc:	f8d0 e000 	ldr.w	lr, [r0]
 800e500:	b293      	uxth	r3, r2
 800e502:	ebac 0303 	sub.w	r3, ip, r3
 800e506:	0c12      	lsrs	r2, r2, #16
 800e508:	fa13 f38e 	uxtah	r3, r3, lr
 800e50c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e514:	b29b      	uxth	r3, r3
 800e516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e51a:	45c1      	cmp	r9, r8
 800e51c:	f840 3b04 	str.w	r3, [r0], #4
 800e520:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e524:	d2e8      	bcs.n	800e4f8 <quorem+0xb0>
 800e526:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e52a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e52e:	b922      	cbnz	r2, 800e53a <quorem+0xf2>
 800e530:	3b04      	subs	r3, #4
 800e532:	429d      	cmp	r5, r3
 800e534:	461a      	mov	r2, r3
 800e536:	d30a      	bcc.n	800e54e <quorem+0x106>
 800e538:	613c      	str	r4, [r7, #16]
 800e53a:	4630      	mov	r0, r6
 800e53c:	b003      	add	sp, #12
 800e53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e542:	6812      	ldr	r2, [r2, #0]
 800e544:	3b04      	subs	r3, #4
 800e546:	2a00      	cmp	r2, #0
 800e548:	d1cc      	bne.n	800e4e4 <quorem+0x9c>
 800e54a:	3c01      	subs	r4, #1
 800e54c:	e7c7      	b.n	800e4de <quorem+0x96>
 800e54e:	6812      	ldr	r2, [r2, #0]
 800e550:	3b04      	subs	r3, #4
 800e552:	2a00      	cmp	r2, #0
 800e554:	d1f0      	bne.n	800e538 <quorem+0xf0>
 800e556:	3c01      	subs	r4, #1
 800e558:	e7eb      	b.n	800e532 <quorem+0xea>
 800e55a:	2000      	movs	r0, #0
 800e55c:	e7ee      	b.n	800e53c <quorem+0xf4>
	...

0800e560 <_dtoa_r>:
 800e560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e564:	ed2d 8b04 	vpush	{d8-d9}
 800e568:	ec57 6b10 	vmov	r6, r7, d0
 800e56c:	b093      	sub	sp, #76	; 0x4c
 800e56e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e570:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e574:	9106      	str	r1, [sp, #24]
 800e576:	ee10 aa10 	vmov	sl, s0
 800e57a:	4604      	mov	r4, r0
 800e57c:	9209      	str	r2, [sp, #36]	; 0x24
 800e57e:	930c      	str	r3, [sp, #48]	; 0x30
 800e580:	46bb      	mov	fp, r7
 800e582:	b975      	cbnz	r5, 800e5a2 <_dtoa_r+0x42>
 800e584:	2010      	movs	r0, #16
 800e586:	f7ff f855 	bl	800d634 <malloc>
 800e58a:	4602      	mov	r2, r0
 800e58c:	6260      	str	r0, [r4, #36]	; 0x24
 800e58e:	b920      	cbnz	r0, 800e59a <_dtoa_r+0x3a>
 800e590:	4ba7      	ldr	r3, [pc, #668]	; (800e830 <_dtoa_r+0x2d0>)
 800e592:	21ea      	movs	r1, #234	; 0xea
 800e594:	48a7      	ldr	r0, [pc, #668]	; (800e834 <_dtoa_r+0x2d4>)
 800e596:	f001 fed5 	bl	8010344 <__assert_func>
 800e59a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e59e:	6005      	str	r5, [r0, #0]
 800e5a0:	60c5      	str	r5, [r0, #12]
 800e5a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5a4:	6819      	ldr	r1, [r3, #0]
 800e5a6:	b151      	cbz	r1, 800e5be <_dtoa_r+0x5e>
 800e5a8:	685a      	ldr	r2, [r3, #4]
 800e5aa:	604a      	str	r2, [r1, #4]
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	4093      	lsls	r3, r2
 800e5b0:	608b      	str	r3, [r1, #8]
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	f001 f832 	bl	800f61c <_Bfree>
 800e5b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	601a      	str	r2, [r3, #0]
 800e5be:	1e3b      	subs	r3, r7, #0
 800e5c0:	bfaa      	itet	ge
 800e5c2:	2300      	movge	r3, #0
 800e5c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e5c8:	f8c8 3000 	strge.w	r3, [r8]
 800e5cc:	4b9a      	ldr	r3, [pc, #616]	; (800e838 <_dtoa_r+0x2d8>)
 800e5ce:	bfbc      	itt	lt
 800e5d0:	2201      	movlt	r2, #1
 800e5d2:	f8c8 2000 	strlt.w	r2, [r8]
 800e5d6:	ea33 030b 	bics.w	r3, r3, fp
 800e5da:	d11b      	bne.n	800e614 <_dtoa_r+0xb4>
 800e5dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e5de:	f242 730f 	movw	r3, #9999	; 0x270f
 800e5e2:	6013      	str	r3, [r2, #0]
 800e5e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e5e8:	4333      	orrs	r3, r6
 800e5ea:	f000 8592 	beq.w	800f112 <_dtoa_r+0xbb2>
 800e5ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5f0:	b963      	cbnz	r3, 800e60c <_dtoa_r+0xac>
 800e5f2:	4b92      	ldr	r3, [pc, #584]	; (800e83c <_dtoa_r+0x2dc>)
 800e5f4:	e022      	b.n	800e63c <_dtoa_r+0xdc>
 800e5f6:	4b92      	ldr	r3, [pc, #584]	; (800e840 <_dtoa_r+0x2e0>)
 800e5f8:	9301      	str	r3, [sp, #4]
 800e5fa:	3308      	adds	r3, #8
 800e5fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e5fe:	6013      	str	r3, [r2, #0]
 800e600:	9801      	ldr	r0, [sp, #4]
 800e602:	b013      	add	sp, #76	; 0x4c
 800e604:	ecbd 8b04 	vpop	{d8-d9}
 800e608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e60c:	4b8b      	ldr	r3, [pc, #556]	; (800e83c <_dtoa_r+0x2dc>)
 800e60e:	9301      	str	r3, [sp, #4]
 800e610:	3303      	adds	r3, #3
 800e612:	e7f3      	b.n	800e5fc <_dtoa_r+0x9c>
 800e614:	2200      	movs	r2, #0
 800e616:	2300      	movs	r3, #0
 800e618:	4650      	mov	r0, sl
 800e61a:	4659      	mov	r1, fp
 800e61c:	f7f2 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 800e620:	ec4b ab19 	vmov	d9, sl, fp
 800e624:	4680      	mov	r8, r0
 800e626:	b158      	cbz	r0, 800e640 <_dtoa_r+0xe0>
 800e628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e62a:	2301      	movs	r3, #1
 800e62c:	6013      	str	r3, [r2, #0]
 800e62e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e630:	2b00      	cmp	r3, #0
 800e632:	f000 856b 	beq.w	800f10c <_dtoa_r+0xbac>
 800e636:	4883      	ldr	r0, [pc, #524]	; (800e844 <_dtoa_r+0x2e4>)
 800e638:	6018      	str	r0, [r3, #0]
 800e63a:	1e43      	subs	r3, r0, #1
 800e63c:	9301      	str	r3, [sp, #4]
 800e63e:	e7df      	b.n	800e600 <_dtoa_r+0xa0>
 800e640:	ec4b ab10 	vmov	d0, sl, fp
 800e644:	aa10      	add	r2, sp, #64	; 0x40
 800e646:	a911      	add	r1, sp, #68	; 0x44
 800e648:	4620      	mov	r0, r4
 800e64a:	f001 facf 	bl	800fbec <__d2b>
 800e64e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e652:	ee08 0a10 	vmov	s16, r0
 800e656:	2d00      	cmp	r5, #0
 800e658:	f000 8084 	beq.w	800e764 <_dtoa_r+0x204>
 800e65c:	ee19 3a90 	vmov	r3, s19
 800e660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e664:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e668:	4656      	mov	r6, sl
 800e66a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e66e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e672:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e676:	4b74      	ldr	r3, [pc, #464]	; (800e848 <_dtoa_r+0x2e8>)
 800e678:	2200      	movs	r2, #0
 800e67a:	4630      	mov	r0, r6
 800e67c:	4639      	mov	r1, r7
 800e67e:	f7f1 fe03 	bl	8000288 <__aeabi_dsub>
 800e682:	a365      	add	r3, pc, #404	; (adr r3, 800e818 <_dtoa_r+0x2b8>)
 800e684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e688:	f7f1 ffb6 	bl	80005f8 <__aeabi_dmul>
 800e68c:	a364      	add	r3, pc, #400	; (adr r3, 800e820 <_dtoa_r+0x2c0>)
 800e68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e692:	f7f1 fdfb 	bl	800028c <__adddf3>
 800e696:	4606      	mov	r6, r0
 800e698:	4628      	mov	r0, r5
 800e69a:	460f      	mov	r7, r1
 800e69c:	f7f1 ff42 	bl	8000524 <__aeabi_i2d>
 800e6a0:	a361      	add	r3, pc, #388	; (adr r3, 800e828 <_dtoa_r+0x2c8>)
 800e6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a6:	f7f1 ffa7 	bl	80005f8 <__aeabi_dmul>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	4639      	mov	r1, r7
 800e6b2:	f7f1 fdeb 	bl	800028c <__adddf3>
 800e6b6:	4606      	mov	r6, r0
 800e6b8:	460f      	mov	r7, r1
 800e6ba:	f7f2 fa4d 	bl	8000b58 <__aeabi_d2iz>
 800e6be:	2200      	movs	r2, #0
 800e6c0:	9000      	str	r0, [sp, #0]
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	4639      	mov	r1, r7
 800e6c8:	f7f2 fa08 	bl	8000adc <__aeabi_dcmplt>
 800e6cc:	b150      	cbz	r0, 800e6e4 <_dtoa_r+0x184>
 800e6ce:	9800      	ldr	r0, [sp, #0]
 800e6d0:	f7f1 ff28 	bl	8000524 <__aeabi_i2d>
 800e6d4:	4632      	mov	r2, r6
 800e6d6:	463b      	mov	r3, r7
 800e6d8:	f7f2 f9f6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6dc:	b910      	cbnz	r0, 800e6e4 <_dtoa_r+0x184>
 800e6de:	9b00      	ldr	r3, [sp, #0]
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	9b00      	ldr	r3, [sp, #0]
 800e6e6:	2b16      	cmp	r3, #22
 800e6e8:	d85a      	bhi.n	800e7a0 <_dtoa_r+0x240>
 800e6ea:	9a00      	ldr	r2, [sp, #0]
 800e6ec:	4b57      	ldr	r3, [pc, #348]	; (800e84c <_dtoa_r+0x2ec>)
 800e6ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f6:	ec51 0b19 	vmov	r0, r1, d9
 800e6fa:	f7f2 f9ef 	bl	8000adc <__aeabi_dcmplt>
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d050      	beq.n	800e7a4 <_dtoa_r+0x244>
 800e702:	9b00      	ldr	r3, [sp, #0]
 800e704:	3b01      	subs	r3, #1
 800e706:	9300      	str	r3, [sp, #0]
 800e708:	2300      	movs	r3, #0
 800e70a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e70c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e70e:	1b5d      	subs	r5, r3, r5
 800e710:	1e6b      	subs	r3, r5, #1
 800e712:	9305      	str	r3, [sp, #20]
 800e714:	bf45      	ittet	mi
 800e716:	f1c5 0301 	rsbmi	r3, r5, #1
 800e71a:	9304      	strmi	r3, [sp, #16]
 800e71c:	2300      	movpl	r3, #0
 800e71e:	2300      	movmi	r3, #0
 800e720:	bf4c      	ite	mi
 800e722:	9305      	strmi	r3, [sp, #20]
 800e724:	9304      	strpl	r3, [sp, #16]
 800e726:	9b00      	ldr	r3, [sp, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	db3d      	blt.n	800e7a8 <_dtoa_r+0x248>
 800e72c:	9b05      	ldr	r3, [sp, #20]
 800e72e:	9a00      	ldr	r2, [sp, #0]
 800e730:	920a      	str	r2, [sp, #40]	; 0x28
 800e732:	4413      	add	r3, r2
 800e734:	9305      	str	r3, [sp, #20]
 800e736:	2300      	movs	r3, #0
 800e738:	9307      	str	r3, [sp, #28]
 800e73a:	9b06      	ldr	r3, [sp, #24]
 800e73c:	2b09      	cmp	r3, #9
 800e73e:	f200 8089 	bhi.w	800e854 <_dtoa_r+0x2f4>
 800e742:	2b05      	cmp	r3, #5
 800e744:	bfc4      	itt	gt
 800e746:	3b04      	subgt	r3, #4
 800e748:	9306      	strgt	r3, [sp, #24]
 800e74a:	9b06      	ldr	r3, [sp, #24]
 800e74c:	f1a3 0302 	sub.w	r3, r3, #2
 800e750:	bfcc      	ite	gt
 800e752:	2500      	movgt	r5, #0
 800e754:	2501      	movle	r5, #1
 800e756:	2b03      	cmp	r3, #3
 800e758:	f200 8087 	bhi.w	800e86a <_dtoa_r+0x30a>
 800e75c:	e8df f003 	tbb	[pc, r3]
 800e760:	59383a2d 	.word	0x59383a2d
 800e764:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e768:	441d      	add	r5, r3
 800e76a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e76e:	2b20      	cmp	r3, #32
 800e770:	bfc1      	itttt	gt
 800e772:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e776:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e77a:	fa0b f303 	lslgt.w	r3, fp, r3
 800e77e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e782:	bfda      	itte	le
 800e784:	f1c3 0320 	rsble	r3, r3, #32
 800e788:	fa06 f003 	lslle.w	r0, r6, r3
 800e78c:	4318      	orrgt	r0, r3
 800e78e:	f7f1 feb9 	bl	8000504 <__aeabi_ui2d>
 800e792:	2301      	movs	r3, #1
 800e794:	4606      	mov	r6, r0
 800e796:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e79a:	3d01      	subs	r5, #1
 800e79c:	930e      	str	r3, [sp, #56]	; 0x38
 800e79e:	e76a      	b.n	800e676 <_dtoa_r+0x116>
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	e7b2      	b.n	800e70a <_dtoa_r+0x1aa>
 800e7a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800e7a6:	e7b1      	b.n	800e70c <_dtoa_r+0x1ac>
 800e7a8:	9b04      	ldr	r3, [sp, #16]
 800e7aa:	9a00      	ldr	r2, [sp, #0]
 800e7ac:	1a9b      	subs	r3, r3, r2
 800e7ae:	9304      	str	r3, [sp, #16]
 800e7b0:	4253      	negs	r3, r2
 800e7b2:	9307      	str	r3, [sp, #28]
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	930a      	str	r3, [sp, #40]	; 0x28
 800e7b8:	e7bf      	b.n	800e73a <_dtoa_r+0x1da>
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	9308      	str	r3, [sp, #32]
 800e7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	dc55      	bgt.n	800e870 <_dtoa_r+0x310>
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	9209      	str	r2, [sp, #36]	; 0x24
 800e7ce:	e00c      	b.n	800e7ea <_dtoa_r+0x28a>
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	e7f3      	b.n	800e7bc <_dtoa_r+0x25c>
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7d8:	9308      	str	r3, [sp, #32]
 800e7da:	9b00      	ldr	r3, [sp, #0]
 800e7dc:	4413      	add	r3, r2
 800e7de:	9302      	str	r3, [sp, #8]
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	9303      	str	r3, [sp, #12]
 800e7e6:	bfb8      	it	lt
 800e7e8:	2301      	movlt	r3, #1
 800e7ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	6042      	str	r2, [r0, #4]
 800e7f0:	2204      	movs	r2, #4
 800e7f2:	f102 0614 	add.w	r6, r2, #20
 800e7f6:	429e      	cmp	r6, r3
 800e7f8:	6841      	ldr	r1, [r0, #4]
 800e7fa:	d93d      	bls.n	800e878 <_dtoa_r+0x318>
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f000 fecd 	bl	800f59c <_Balloc>
 800e802:	9001      	str	r0, [sp, #4]
 800e804:	2800      	cmp	r0, #0
 800e806:	d13b      	bne.n	800e880 <_dtoa_r+0x320>
 800e808:	4b11      	ldr	r3, [pc, #68]	; (800e850 <_dtoa_r+0x2f0>)
 800e80a:	4602      	mov	r2, r0
 800e80c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e810:	e6c0      	b.n	800e594 <_dtoa_r+0x34>
 800e812:	2301      	movs	r3, #1
 800e814:	e7df      	b.n	800e7d6 <_dtoa_r+0x276>
 800e816:	bf00      	nop
 800e818:	636f4361 	.word	0x636f4361
 800e81c:	3fd287a7 	.word	0x3fd287a7
 800e820:	8b60c8b3 	.word	0x8b60c8b3
 800e824:	3fc68a28 	.word	0x3fc68a28
 800e828:	509f79fb 	.word	0x509f79fb
 800e82c:	3fd34413 	.word	0x3fd34413
 800e830:	0801c995 	.word	0x0801c995
 800e834:	0801c9ac 	.word	0x0801c9ac
 800e838:	7ff00000 	.word	0x7ff00000
 800e83c:	0801c991 	.word	0x0801c991
 800e840:	0801c988 	.word	0x0801c988
 800e844:	0801c965 	.word	0x0801c965
 800e848:	3ff80000 	.word	0x3ff80000
 800e84c:	0801cb00 	.word	0x0801cb00
 800e850:	0801ca07 	.word	0x0801ca07
 800e854:	2501      	movs	r5, #1
 800e856:	2300      	movs	r3, #0
 800e858:	9306      	str	r3, [sp, #24]
 800e85a:	9508      	str	r5, [sp, #32]
 800e85c:	f04f 33ff 	mov.w	r3, #4294967295
 800e860:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e864:	2200      	movs	r2, #0
 800e866:	2312      	movs	r3, #18
 800e868:	e7b0      	b.n	800e7cc <_dtoa_r+0x26c>
 800e86a:	2301      	movs	r3, #1
 800e86c:	9308      	str	r3, [sp, #32]
 800e86e:	e7f5      	b.n	800e85c <_dtoa_r+0x2fc>
 800e870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e872:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e876:	e7b8      	b.n	800e7ea <_dtoa_r+0x28a>
 800e878:	3101      	adds	r1, #1
 800e87a:	6041      	str	r1, [r0, #4]
 800e87c:	0052      	lsls	r2, r2, #1
 800e87e:	e7b8      	b.n	800e7f2 <_dtoa_r+0x292>
 800e880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e882:	9a01      	ldr	r2, [sp, #4]
 800e884:	601a      	str	r2, [r3, #0]
 800e886:	9b03      	ldr	r3, [sp, #12]
 800e888:	2b0e      	cmp	r3, #14
 800e88a:	f200 809d 	bhi.w	800e9c8 <_dtoa_r+0x468>
 800e88e:	2d00      	cmp	r5, #0
 800e890:	f000 809a 	beq.w	800e9c8 <_dtoa_r+0x468>
 800e894:	9b00      	ldr	r3, [sp, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	dd32      	ble.n	800e900 <_dtoa_r+0x3a0>
 800e89a:	4ab7      	ldr	r2, [pc, #732]	; (800eb78 <_dtoa_r+0x618>)
 800e89c:	f003 030f 	and.w	r3, r3, #15
 800e8a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e8a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8a8:	9b00      	ldr	r3, [sp, #0]
 800e8aa:	05d8      	lsls	r0, r3, #23
 800e8ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e8b0:	d516      	bpl.n	800e8e0 <_dtoa_r+0x380>
 800e8b2:	4bb2      	ldr	r3, [pc, #712]	; (800eb7c <_dtoa_r+0x61c>)
 800e8b4:	ec51 0b19 	vmov	r0, r1, d9
 800e8b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8bc:	f7f1 ffc6 	bl	800084c <__aeabi_ddiv>
 800e8c0:	f007 070f 	and.w	r7, r7, #15
 800e8c4:	4682      	mov	sl, r0
 800e8c6:	468b      	mov	fp, r1
 800e8c8:	2503      	movs	r5, #3
 800e8ca:	4eac      	ldr	r6, [pc, #688]	; (800eb7c <_dtoa_r+0x61c>)
 800e8cc:	b957      	cbnz	r7, 800e8e4 <_dtoa_r+0x384>
 800e8ce:	4642      	mov	r2, r8
 800e8d0:	464b      	mov	r3, r9
 800e8d2:	4650      	mov	r0, sl
 800e8d4:	4659      	mov	r1, fp
 800e8d6:	f7f1 ffb9 	bl	800084c <__aeabi_ddiv>
 800e8da:	4682      	mov	sl, r0
 800e8dc:	468b      	mov	fp, r1
 800e8de:	e028      	b.n	800e932 <_dtoa_r+0x3d2>
 800e8e0:	2502      	movs	r5, #2
 800e8e2:	e7f2      	b.n	800e8ca <_dtoa_r+0x36a>
 800e8e4:	07f9      	lsls	r1, r7, #31
 800e8e6:	d508      	bpl.n	800e8fa <_dtoa_r+0x39a>
 800e8e8:	4640      	mov	r0, r8
 800e8ea:	4649      	mov	r1, r9
 800e8ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e8f0:	f7f1 fe82 	bl	80005f8 <__aeabi_dmul>
 800e8f4:	3501      	adds	r5, #1
 800e8f6:	4680      	mov	r8, r0
 800e8f8:	4689      	mov	r9, r1
 800e8fa:	107f      	asrs	r7, r7, #1
 800e8fc:	3608      	adds	r6, #8
 800e8fe:	e7e5      	b.n	800e8cc <_dtoa_r+0x36c>
 800e900:	f000 809b 	beq.w	800ea3a <_dtoa_r+0x4da>
 800e904:	9b00      	ldr	r3, [sp, #0]
 800e906:	4f9d      	ldr	r7, [pc, #628]	; (800eb7c <_dtoa_r+0x61c>)
 800e908:	425e      	negs	r6, r3
 800e90a:	4b9b      	ldr	r3, [pc, #620]	; (800eb78 <_dtoa_r+0x618>)
 800e90c:	f006 020f 	and.w	r2, r6, #15
 800e910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e918:	ec51 0b19 	vmov	r0, r1, d9
 800e91c:	f7f1 fe6c 	bl	80005f8 <__aeabi_dmul>
 800e920:	1136      	asrs	r6, r6, #4
 800e922:	4682      	mov	sl, r0
 800e924:	468b      	mov	fp, r1
 800e926:	2300      	movs	r3, #0
 800e928:	2502      	movs	r5, #2
 800e92a:	2e00      	cmp	r6, #0
 800e92c:	d17a      	bne.n	800ea24 <_dtoa_r+0x4c4>
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d1d3      	bne.n	800e8da <_dtoa_r+0x37a>
 800e932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e934:	2b00      	cmp	r3, #0
 800e936:	f000 8082 	beq.w	800ea3e <_dtoa_r+0x4de>
 800e93a:	4b91      	ldr	r3, [pc, #580]	; (800eb80 <_dtoa_r+0x620>)
 800e93c:	2200      	movs	r2, #0
 800e93e:	4650      	mov	r0, sl
 800e940:	4659      	mov	r1, fp
 800e942:	f7f2 f8cb 	bl	8000adc <__aeabi_dcmplt>
 800e946:	2800      	cmp	r0, #0
 800e948:	d079      	beq.n	800ea3e <_dtoa_r+0x4de>
 800e94a:	9b03      	ldr	r3, [sp, #12]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d076      	beq.n	800ea3e <_dtoa_r+0x4de>
 800e950:	9b02      	ldr	r3, [sp, #8]
 800e952:	2b00      	cmp	r3, #0
 800e954:	dd36      	ble.n	800e9c4 <_dtoa_r+0x464>
 800e956:	9b00      	ldr	r3, [sp, #0]
 800e958:	4650      	mov	r0, sl
 800e95a:	4659      	mov	r1, fp
 800e95c:	1e5f      	subs	r7, r3, #1
 800e95e:	2200      	movs	r2, #0
 800e960:	4b88      	ldr	r3, [pc, #544]	; (800eb84 <_dtoa_r+0x624>)
 800e962:	f7f1 fe49 	bl	80005f8 <__aeabi_dmul>
 800e966:	9e02      	ldr	r6, [sp, #8]
 800e968:	4682      	mov	sl, r0
 800e96a:	468b      	mov	fp, r1
 800e96c:	3501      	adds	r5, #1
 800e96e:	4628      	mov	r0, r5
 800e970:	f7f1 fdd8 	bl	8000524 <__aeabi_i2d>
 800e974:	4652      	mov	r2, sl
 800e976:	465b      	mov	r3, fp
 800e978:	f7f1 fe3e 	bl	80005f8 <__aeabi_dmul>
 800e97c:	4b82      	ldr	r3, [pc, #520]	; (800eb88 <_dtoa_r+0x628>)
 800e97e:	2200      	movs	r2, #0
 800e980:	f7f1 fc84 	bl	800028c <__adddf3>
 800e984:	46d0      	mov	r8, sl
 800e986:	46d9      	mov	r9, fp
 800e988:	4682      	mov	sl, r0
 800e98a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e98e:	2e00      	cmp	r6, #0
 800e990:	d158      	bne.n	800ea44 <_dtoa_r+0x4e4>
 800e992:	4b7e      	ldr	r3, [pc, #504]	; (800eb8c <_dtoa_r+0x62c>)
 800e994:	2200      	movs	r2, #0
 800e996:	4640      	mov	r0, r8
 800e998:	4649      	mov	r1, r9
 800e99a:	f7f1 fc75 	bl	8000288 <__aeabi_dsub>
 800e99e:	4652      	mov	r2, sl
 800e9a0:	465b      	mov	r3, fp
 800e9a2:	4680      	mov	r8, r0
 800e9a4:	4689      	mov	r9, r1
 800e9a6:	f7f2 f8b7 	bl	8000b18 <__aeabi_dcmpgt>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	f040 8295 	bne.w	800eeda <_dtoa_r+0x97a>
 800e9b0:	4652      	mov	r2, sl
 800e9b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e9b6:	4640      	mov	r0, r8
 800e9b8:	4649      	mov	r1, r9
 800e9ba:	f7f2 f88f 	bl	8000adc <__aeabi_dcmplt>
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	f040 8289 	bne.w	800eed6 <_dtoa_r+0x976>
 800e9c4:	ec5b ab19 	vmov	sl, fp, d9
 800e9c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	f2c0 8148 	blt.w	800ec60 <_dtoa_r+0x700>
 800e9d0:	9a00      	ldr	r2, [sp, #0]
 800e9d2:	2a0e      	cmp	r2, #14
 800e9d4:	f300 8144 	bgt.w	800ec60 <_dtoa_r+0x700>
 800e9d8:	4b67      	ldr	r3, [pc, #412]	; (800eb78 <_dtoa_r+0x618>)
 800e9da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f280 80d5 	bge.w	800eb94 <_dtoa_r+0x634>
 800e9ea:	9b03      	ldr	r3, [sp, #12]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	f300 80d1 	bgt.w	800eb94 <_dtoa_r+0x634>
 800e9f2:	f040 826f 	bne.w	800eed4 <_dtoa_r+0x974>
 800e9f6:	4b65      	ldr	r3, [pc, #404]	; (800eb8c <_dtoa_r+0x62c>)
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	4640      	mov	r0, r8
 800e9fc:	4649      	mov	r1, r9
 800e9fe:	f7f1 fdfb 	bl	80005f8 <__aeabi_dmul>
 800ea02:	4652      	mov	r2, sl
 800ea04:	465b      	mov	r3, fp
 800ea06:	f7f2 f87d 	bl	8000b04 <__aeabi_dcmpge>
 800ea0a:	9e03      	ldr	r6, [sp, #12]
 800ea0c:	4637      	mov	r7, r6
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	f040 8245 	bne.w	800ee9e <_dtoa_r+0x93e>
 800ea14:	9d01      	ldr	r5, [sp, #4]
 800ea16:	2331      	movs	r3, #49	; 0x31
 800ea18:	f805 3b01 	strb.w	r3, [r5], #1
 800ea1c:	9b00      	ldr	r3, [sp, #0]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	9300      	str	r3, [sp, #0]
 800ea22:	e240      	b.n	800eea6 <_dtoa_r+0x946>
 800ea24:	07f2      	lsls	r2, r6, #31
 800ea26:	d505      	bpl.n	800ea34 <_dtoa_r+0x4d4>
 800ea28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea2c:	f7f1 fde4 	bl	80005f8 <__aeabi_dmul>
 800ea30:	3501      	adds	r5, #1
 800ea32:	2301      	movs	r3, #1
 800ea34:	1076      	asrs	r6, r6, #1
 800ea36:	3708      	adds	r7, #8
 800ea38:	e777      	b.n	800e92a <_dtoa_r+0x3ca>
 800ea3a:	2502      	movs	r5, #2
 800ea3c:	e779      	b.n	800e932 <_dtoa_r+0x3d2>
 800ea3e:	9f00      	ldr	r7, [sp, #0]
 800ea40:	9e03      	ldr	r6, [sp, #12]
 800ea42:	e794      	b.n	800e96e <_dtoa_r+0x40e>
 800ea44:	9901      	ldr	r1, [sp, #4]
 800ea46:	4b4c      	ldr	r3, [pc, #304]	; (800eb78 <_dtoa_r+0x618>)
 800ea48:	4431      	add	r1, r6
 800ea4a:	910d      	str	r1, [sp, #52]	; 0x34
 800ea4c:	9908      	ldr	r1, [sp, #32]
 800ea4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ea52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea56:	2900      	cmp	r1, #0
 800ea58:	d043      	beq.n	800eae2 <_dtoa_r+0x582>
 800ea5a:	494d      	ldr	r1, [pc, #308]	; (800eb90 <_dtoa_r+0x630>)
 800ea5c:	2000      	movs	r0, #0
 800ea5e:	f7f1 fef5 	bl	800084c <__aeabi_ddiv>
 800ea62:	4652      	mov	r2, sl
 800ea64:	465b      	mov	r3, fp
 800ea66:	f7f1 fc0f 	bl	8000288 <__aeabi_dsub>
 800ea6a:	9d01      	ldr	r5, [sp, #4]
 800ea6c:	4682      	mov	sl, r0
 800ea6e:	468b      	mov	fp, r1
 800ea70:	4649      	mov	r1, r9
 800ea72:	4640      	mov	r0, r8
 800ea74:	f7f2 f870 	bl	8000b58 <__aeabi_d2iz>
 800ea78:	4606      	mov	r6, r0
 800ea7a:	f7f1 fd53 	bl	8000524 <__aeabi_i2d>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	460b      	mov	r3, r1
 800ea82:	4640      	mov	r0, r8
 800ea84:	4649      	mov	r1, r9
 800ea86:	f7f1 fbff 	bl	8000288 <__aeabi_dsub>
 800ea8a:	3630      	adds	r6, #48	; 0x30
 800ea8c:	f805 6b01 	strb.w	r6, [r5], #1
 800ea90:	4652      	mov	r2, sl
 800ea92:	465b      	mov	r3, fp
 800ea94:	4680      	mov	r8, r0
 800ea96:	4689      	mov	r9, r1
 800ea98:	f7f2 f820 	bl	8000adc <__aeabi_dcmplt>
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	d163      	bne.n	800eb68 <_dtoa_r+0x608>
 800eaa0:	4642      	mov	r2, r8
 800eaa2:	464b      	mov	r3, r9
 800eaa4:	4936      	ldr	r1, [pc, #216]	; (800eb80 <_dtoa_r+0x620>)
 800eaa6:	2000      	movs	r0, #0
 800eaa8:	f7f1 fbee 	bl	8000288 <__aeabi_dsub>
 800eaac:	4652      	mov	r2, sl
 800eaae:	465b      	mov	r3, fp
 800eab0:	f7f2 f814 	bl	8000adc <__aeabi_dcmplt>
 800eab4:	2800      	cmp	r0, #0
 800eab6:	f040 80b5 	bne.w	800ec24 <_dtoa_r+0x6c4>
 800eaba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eabc:	429d      	cmp	r5, r3
 800eabe:	d081      	beq.n	800e9c4 <_dtoa_r+0x464>
 800eac0:	4b30      	ldr	r3, [pc, #192]	; (800eb84 <_dtoa_r+0x624>)
 800eac2:	2200      	movs	r2, #0
 800eac4:	4650      	mov	r0, sl
 800eac6:	4659      	mov	r1, fp
 800eac8:	f7f1 fd96 	bl	80005f8 <__aeabi_dmul>
 800eacc:	4b2d      	ldr	r3, [pc, #180]	; (800eb84 <_dtoa_r+0x624>)
 800eace:	4682      	mov	sl, r0
 800ead0:	468b      	mov	fp, r1
 800ead2:	4640      	mov	r0, r8
 800ead4:	4649      	mov	r1, r9
 800ead6:	2200      	movs	r2, #0
 800ead8:	f7f1 fd8e 	bl	80005f8 <__aeabi_dmul>
 800eadc:	4680      	mov	r8, r0
 800eade:	4689      	mov	r9, r1
 800eae0:	e7c6      	b.n	800ea70 <_dtoa_r+0x510>
 800eae2:	4650      	mov	r0, sl
 800eae4:	4659      	mov	r1, fp
 800eae6:	f7f1 fd87 	bl	80005f8 <__aeabi_dmul>
 800eaea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eaec:	9d01      	ldr	r5, [sp, #4]
 800eaee:	930f      	str	r3, [sp, #60]	; 0x3c
 800eaf0:	4682      	mov	sl, r0
 800eaf2:	468b      	mov	fp, r1
 800eaf4:	4649      	mov	r1, r9
 800eaf6:	4640      	mov	r0, r8
 800eaf8:	f7f2 f82e 	bl	8000b58 <__aeabi_d2iz>
 800eafc:	4606      	mov	r6, r0
 800eafe:	f7f1 fd11 	bl	8000524 <__aeabi_i2d>
 800eb02:	3630      	adds	r6, #48	; 0x30
 800eb04:	4602      	mov	r2, r0
 800eb06:	460b      	mov	r3, r1
 800eb08:	4640      	mov	r0, r8
 800eb0a:	4649      	mov	r1, r9
 800eb0c:	f7f1 fbbc 	bl	8000288 <__aeabi_dsub>
 800eb10:	f805 6b01 	strb.w	r6, [r5], #1
 800eb14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb16:	429d      	cmp	r5, r3
 800eb18:	4680      	mov	r8, r0
 800eb1a:	4689      	mov	r9, r1
 800eb1c:	f04f 0200 	mov.w	r2, #0
 800eb20:	d124      	bne.n	800eb6c <_dtoa_r+0x60c>
 800eb22:	4b1b      	ldr	r3, [pc, #108]	; (800eb90 <_dtoa_r+0x630>)
 800eb24:	4650      	mov	r0, sl
 800eb26:	4659      	mov	r1, fp
 800eb28:	f7f1 fbb0 	bl	800028c <__adddf3>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	460b      	mov	r3, r1
 800eb30:	4640      	mov	r0, r8
 800eb32:	4649      	mov	r1, r9
 800eb34:	f7f1 fff0 	bl	8000b18 <__aeabi_dcmpgt>
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	d173      	bne.n	800ec24 <_dtoa_r+0x6c4>
 800eb3c:	4652      	mov	r2, sl
 800eb3e:	465b      	mov	r3, fp
 800eb40:	4913      	ldr	r1, [pc, #76]	; (800eb90 <_dtoa_r+0x630>)
 800eb42:	2000      	movs	r0, #0
 800eb44:	f7f1 fba0 	bl	8000288 <__aeabi_dsub>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	460b      	mov	r3, r1
 800eb4c:	4640      	mov	r0, r8
 800eb4e:	4649      	mov	r1, r9
 800eb50:	f7f1 ffc4 	bl	8000adc <__aeabi_dcmplt>
 800eb54:	2800      	cmp	r0, #0
 800eb56:	f43f af35 	beq.w	800e9c4 <_dtoa_r+0x464>
 800eb5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800eb5c:	1e6b      	subs	r3, r5, #1
 800eb5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eb64:	2b30      	cmp	r3, #48	; 0x30
 800eb66:	d0f8      	beq.n	800eb5a <_dtoa_r+0x5fa>
 800eb68:	9700      	str	r7, [sp, #0]
 800eb6a:	e049      	b.n	800ec00 <_dtoa_r+0x6a0>
 800eb6c:	4b05      	ldr	r3, [pc, #20]	; (800eb84 <_dtoa_r+0x624>)
 800eb6e:	f7f1 fd43 	bl	80005f8 <__aeabi_dmul>
 800eb72:	4680      	mov	r8, r0
 800eb74:	4689      	mov	r9, r1
 800eb76:	e7bd      	b.n	800eaf4 <_dtoa_r+0x594>
 800eb78:	0801cb00 	.word	0x0801cb00
 800eb7c:	0801cad8 	.word	0x0801cad8
 800eb80:	3ff00000 	.word	0x3ff00000
 800eb84:	40240000 	.word	0x40240000
 800eb88:	401c0000 	.word	0x401c0000
 800eb8c:	40140000 	.word	0x40140000
 800eb90:	3fe00000 	.word	0x3fe00000
 800eb94:	9d01      	ldr	r5, [sp, #4]
 800eb96:	4656      	mov	r6, sl
 800eb98:	465f      	mov	r7, fp
 800eb9a:	4642      	mov	r2, r8
 800eb9c:	464b      	mov	r3, r9
 800eb9e:	4630      	mov	r0, r6
 800eba0:	4639      	mov	r1, r7
 800eba2:	f7f1 fe53 	bl	800084c <__aeabi_ddiv>
 800eba6:	f7f1 ffd7 	bl	8000b58 <__aeabi_d2iz>
 800ebaa:	4682      	mov	sl, r0
 800ebac:	f7f1 fcba 	bl	8000524 <__aeabi_i2d>
 800ebb0:	4642      	mov	r2, r8
 800ebb2:	464b      	mov	r3, r9
 800ebb4:	f7f1 fd20 	bl	80005f8 <__aeabi_dmul>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	460b      	mov	r3, r1
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	4639      	mov	r1, r7
 800ebc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ebc4:	f7f1 fb60 	bl	8000288 <__aeabi_dsub>
 800ebc8:	f805 6b01 	strb.w	r6, [r5], #1
 800ebcc:	9e01      	ldr	r6, [sp, #4]
 800ebce:	9f03      	ldr	r7, [sp, #12]
 800ebd0:	1bae      	subs	r6, r5, r6
 800ebd2:	42b7      	cmp	r7, r6
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	460b      	mov	r3, r1
 800ebd8:	d135      	bne.n	800ec46 <_dtoa_r+0x6e6>
 800ebda:	f7f1 fb57 	bl	800028c <__adddf3>
 800ebde:	4642      	mov	r2, r8
 800ebe0:	464b      	mov	r3, r9
 800ebe2:	4606      	mov	r6, r0
 800ebe4:	460f      	mov	r7, r1
 800ebe6:	f7f1 ff97 	bl	8000b18 <__aeabi_dcmpgt>
 800ebea:	b9d0      	cbnz	r0, 800ec22 <_dtoa_r+0x6c2>
 800ebec:	4642      	mov	r2, r8
 800ebee:	464b      	mov	r3, r9
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	4639      	mov	r1, r7
 800ebf4:	f7f1 ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 800ebf8:	b110      	cbz	r0, 800ec00 <_dtoa_r+0x6a0>
 800ebfa:	f01a 0f01 	tst.w	sl, #1
 800ebfe:	d110      	bne.n	800ec22 <_dtoa_r+0x6c2>
 800ec00:	4620      	mov	r0, r4
 800ec02:	ee18 1a10 	vmov	r1, s16
 800ec06:	f000 fd09 	bl	800f61c <_Bfree>
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	9800      	ldr	r0, [sp, #0]
 800ec0e:	702b      	strb	r3, [r5, #0]
 800ec10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec12:	3001      	adds	r0, #1
 800ec14:	6018      	str	r0, [r3, #0]
 800ec16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	f43f acf1 	beq.w	800e600 <_dtoa_r+0xa0>
 800ec1e:	601d      	str	r5, [r3, #0]
 800ec20:	e4ee      	b.n	800e600 <_dtoa_r+0xa0>
 800ec22:	9f00      	ldr	r7, [sp, #0]
 800ec24:	462b      	mov	r3, r5
 800ec26:	461d      	mov	r5, r3
 800ec28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec2c:	2a39      	cmp	r2, #57	; 0x39
 800ec2e:	d106      	bne.n	800ec3e <_dtoa_r+0x6de>
 800ec30:	9a01      	ldr	r2, [sp, #4]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d1f7      	bne.n	800ec26 <_dtoa_r+0x6c6>
 800ec36:	9901      	ldr	r1, [sp, #4]
 800ec38:	2230      	movs	r2, #48	; 0x30
 800ec3a:	3701      	adds	r7, #1
 800ec3c:	700a      	strb	r2, [r1, #0]
 800ec3e:	781a      	ldrb	r2, [r3, #0]
 800ec40:	3201      	adds	r2, #1
 800ec42:	701a      	strb	r2, [r3, #0]
 800ec44:	e790      	b.n	800eb68 <_dtoa_r+0x608>
 800ec46:	4ba6      	ldr	r3, [pc, #664]	; (800eee0 <_dtoa_r+0x980>)
 800ec48:	2200      	movs	r2, #0
 800ec4a:	f7f1 fcd5 	bl	80005f8 <__aeabi_dmul>
 800ec4e:	2200      	movs	r2, #0
 800ec50:	2300      	movs	r3, #0
 800ec52:	4606      	mov	r6, r0
 800ec54:	460f      	mov	r7, r1
 800ec56:	f7f1 ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	d09d      	beq.n	800eb9a <_dtoa_r+0x63a>
 800ec5e:	e7cf      	b.n	800ec00 <_dtoa_r+0x6a0>
 800ec60:	9a08      	ldr	r2, [sp, #32]
 800ec62:	2a00      	cmp	r2, #0
 800ec64:	f000 80d7 	beq.w	800ee16 <_dtoa_r+0x8b6>
 800ec68:	9a06      	ldr	r2, [sp, #24]
 800ec6a:	2a01      	cmp	r2, #1
 800ec6c:	f300 80ba 	bgt.w	800ede4 <_dtoa_r+0x884>
 800ec70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec72:	2a00      	cmp	r2, #0
 800ec74:	f000 80b2 	beq.w	800eddc <_dtoa_r+0x87c>
 800ec78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ec7c:	9e07      	ldr	r6, [sp, #28]
 800ec7e:	9d04      	ldr	r5, [sp, #16]
 800ec80:	9a04      	ldr	r2, [sp, #16]
 800ec82:	441a      	add	r2, r3
 800ec84:	9204      	str	r2, [sp, #16]
 800ec86:	9a05      	ldr	r2, [sp, #20]
 800ec88:	2101      	movs	r1, #1
 800ec8a:	441a      	add	r2, r3
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	9205      	str	r2, [sp, #20]
 800ec90:	f000 fd7c 	bl	800f78c <__i2b>
 800ec94:	4607      	mov	r7, r0
 800ec96:	2d00      	cmp	r5, #0
 800ec98:	dd0c      	ble.n	800ecb4 <_dtoa_r+0x754>
 800ec9a:	9b05      	ldr	r3, [sp, #20]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	dd09      	ble.n	800ecb4 <_dtoa_r+0x754>
 800eca0:	42ab      	cmp	r3, r5
 800eca2:	9a04      	ldr	r2, [sp, #16]
 800eca4:	bfa8      	it	ge
 800eca6:	462b      	movge	r3, r5
 800eca8:	1ad2      	subs	r2, r2, r3
 800ecaa:	9204      	str	r2, [sp, #16]
 800ecac:	9a05      	ldr	r2, [sp, #20]
 800ecae:	1aed      	subs	r5, r5, r3
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	9305      	str	r3, [sp, #20]
 800ecb4:	9b07      	ldr	r3, [sp, #28]
 800ecb6:	b31b      	cbz	r3, 800ed00 <_dtoa_r+0x7a0>
 800ecb8:	9b08      	ldr	r3, [sp, #32]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	f000 80af 	beq.w	800ee1e <_dtoa_r+0x8be>
 800ecc0:	2e00      	cmp	r6, #0
 800ecc2:	dd13      	ble.n	800ecec <_dtoa_r+0x78c>
 800ecc4:	4639      	mov	r1, r7
 800ecc6:	4632      	mov	r2, r6
 800ecc8:	4620      	mov	r0, r4
 800ecca:	f000 fe1f 	bl	800f90c <__pow5mult>
 800ecce:	ee18 2a10 	vmov	r2, s16
 800ecd2:	4601      	mov	r1, r0
 800ecd4:	4607      	mov	r7, r0
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	f000 fd6e 	bl	800f7b8 <__multiply>
 800ecdc:	ee18 1a10 	vmov	r1, s16
 800ece0:	4680      	mov	r8, r0
 800ece2:	4620      	mov	r0, r4
 800ece4:	f000 fc9a 	bl	800f61c <_Bfree>
 800ece8:	ee08 8a10 	vmov	s16, r8
 800ecec:	9b07      	ldr	r3, [sp, #28]
 800ecee:	1b9a      	subs	r2, r3, r6
 800ecf0:	d006      	beq.n	800ed00 <_dtoa_r+0x7a0>
 800ecf2:	ee18 1a10 	vmov	r1, s16
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f000 fe08 	bl	800f90c <__pow5mult>
 800ecfc:	ee08 0a10 	vmov	s16, r0
 800ed00:	2101      	movs	r1, #1
 800ed02:	4620      	mov	r0, r4
 800ed04:	f000 fd42 	bl	800f78c <__i2b>
 800ed08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	4606      	mov	r6, r0
 800ed0e:	f340 8088 	ble.w	800ee22 <_dtoa_r+0x8c2>
 800ed12:	461a      	mov	r2, r3
 800ed14:	4601      	mov	r1, r0
 800ed16:	4620      	mov	r0, r4
 800ed18:	f000 fdf8 	bl	800f90c <__pow5mult>
 800ed1c:	9b06      	ldr	r3, [sp, #24]
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	4606      	mov	r6, r0
 800ed22:	f340 8081 	ble.w	800ee28 <_dtoa_r+0x8c8>
 800ed26:	f04f 0800 	mov.w	r8, #0
 800ed2a:	6933      	ldr	r3, [r6, #16]
 800ed2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ed30:	6918      	ldr	r0, [r3, #16]
 800ed32:	f000 fcdb 	bl	800f6ec <__hi0bits>
 800ed36:	f1c0 0020 	rsb	r0, r0, #32
 800ed3a:	9b05      	ldr	r3, [sp, #20]
 800ed3c:	4418      	add	r0, r3
 800ed3e:	f010 001f 	ands.w	r0, r0, #31
 800ed42:	f000 8092 	beq.w	800ee6a <_dtoa_r+0x90a>
 800ed46:	f1c0 0320 	rsb	r3, r0, #32
 800ed4a:	2b04      	cmp	r3, #4
 800ed4c:	f340 808a 	ble.w	800ee64 <_dtoa_r+0x904>
 800ed50:	f1c0 001c 	rsb	r0, r0, #28
 800ed54:	9b04      	ldr	r3, [sp, #16]
 800ed56:	4403      	add	r3, r0
 800ed58:	9304      	str	r3, [sp, #16]
 800ed5a:	9b05      	ldr	r3, [sp, #20]
 800ed5c:	4403      	add	r3, r0
 800ed5e:	4405      	add	r5, r0
 800ed60:	9305      	str	r3, [sp, #20]
 800ed62:	9b04      	ldr	r3, [sp, #16]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	dd07      	ble.n	800ed78 <_dtoa_r+0x818>
 800ed68:	ee18 1a10 	vmov	r1, s16
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	4620      	mov	r0, r4
 800ed70:	f000 fe26 	bl	800f9c0 <__lshift>
 800ed74:	ee08 0a10 	vmov	s16, r0
 800ed78:	9b05      	ldr	r3, [sp, #20]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	dd05      	ble.n	800ed8a <_dtoa_r+0x82a>
 800ed7e:	4631      	mov	r1, r6
 800ed80:	461a      	mov	r2, r3
 800ed82:	4620      	mov	r0, r4
 800ed84:	f000 fe1c 	bl	800f9c0 <__lshift>
 800ed88:	4606      	mov	r6, r0
 800ed8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d06e      	beq.n	800ee6e <_dtoa_r+0x90e>
 800ed90:	ee18 0a10 	vmov	r0, s16
 800ed94:	4631      	mov	r1, r6
 800ed96:	f000 fe83 	bl	800faa0 <__mcmp>
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	da67      	bge.n	800ee6e <_dtoa_r+0x90e>
 800ed9e:	9b00      	ldr	r3, [sp, #0]
 800eda0:	3b01      	subs	r3, #1
 800eda2:	ee18 1a10 	vmov	r1, s16
 800eda6:	9300      	str	r3, [sp, #0]
 800eda8:	220a      	movs	r2, #10
 800edaa:	2300      	movs	r3, #0
 800edac:	4620      	mov	r0, r4
 800edae:	f000 fc57 	bl	800f660 <__multadd>
 800edb2:	9b08      	ldr	r3, [sp, #32]
 800edb4:	ee08 0a10 	vmov	s16, r0
 800edb8:	2b00      	cmp	r3, #0
 800edba:	f000 81b1 	beq.w	800f120 <_dtoa_r+0xbc0>
 800edbe:	2300      	movs	r3, #0
 800edc0:	4639      	mov	r1, r7
 800edc2:	220a      	movs	r2, #10
 800edc4:	4620      	mov	r0, r4
 800edc6:	f000 fc4b 	bl	800f660 <__multadd>
 800edca:	9b02      	ldr	r3, [sp, #8]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	4607      	mov	r7, r0
 800edd0:	f300 808e 	bgt.w	800eef0 <_dtoa_r+0x990>
 800edd4:	9b06      	ldr	r3, [sp, #24]
 800edd6:	2b02      	cmp	r3, #2
 800edd8:	dc51      	bgt.n	800ee7e <_dtoa_r+0x91e>
 800edda:	e089      	b.n	800eef0 <_dtoa_r+0x990>
 800eddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800edde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ede2:	e74b      	b.n	800ec7c <_dtoa_r+0x71c>
 800ede4:	9b03      	ldr	r3, [sp, #12]
 800ede6:	1e5e      	subs	r6, r3, #1
 800ede8:	9b07      	ldr	r3, [sp, #28]
 800edea:	42b3      	cmp	r3, r6
 800edec:	bfbf      	itttt	lt
 800edee:	9b07      	ldrlt	r3, [sp, #28]
 800edf0:	9607      	strlt	r6, [sp, #28]
 800edf2:	1af2      	sublt	r2, r6, r3
 800edf4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800edf6:	bfb6      	itet	lt
 800edf8:	189b      	addlt	r3, r3, r2
 800edfa:	1b9e      	subge	r6, r3, r6
 800edfc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800edfe:	9b03      	ldr	r3, [sp, #12]
 800ee00:	bfb8      	it	lt
 800ee02:	2600      	movlt	r6, #0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	bfb7      	itett	lt
 800ee08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ee0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ee10:	1a9d      	sublt	r5, r3, r2
 800ee12:	2300      	movlt	r3, #0
 800ee14:	e734      	b.n	800ec80 <_dtoa_r+0x720>
 800ee16:	9e07      	ldr	r6, [sp, #28]
 800ee18:	9d04      	ldr	r5, [sp, #16]
 800ee1a:	9f08      	ldr	r7, [sp, #32]
 800ee1c:	e73b      	b.n	800ec96 <_dtoa_r+0x736>
 800ee1e:	9a07      	ldr	r2, [sp, #28]
 800ee20:	e767      	b.n	800ecf2 <_dtoa_r+0x792>
 800ee22:	9b06      	ldr	r3, [sp, #24]
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	dc18      	bgt.n	800ee5a <_dtoa_r+0x8fa>
 800ee28:	f1ba 0f00 	cmp.w	sl, #0
 800ee2c:	d115      	bne.n	800ee5a <_dtoa_r+0x8fa>
 800ee2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee32:	b993      	cbnz	r3, 800ee5a <_dtoa_r+0x8fa>
 800ee34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ee38:	0d1b      	lsrs	r3, r3, #20
 800ee3a:	051b      	lsls	r3, r3, #20
 800ee3c:	b183      	cbz	r3, 800ee60 <_dtoa_r+0x900>
 800ee3e:	9b04      	ldr	r3, [sp, #16]
 800ee40:	3301      	adds	r3, #1
 800ee42:	9304      	str	r3, [sp, #16]
 800ee44:	9b05      	ldr	r3, [sp, #20]
 800ee46:	3301      	adds	r3, #1
 800ee48:	9305      	str	r3, [sp, #20]
 800ee4a:	f04f 0801 	mov.w	r8, #1
 800ee4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	f47f af6a 	bne.w	800ed2a <_dtoa_r+0x7ca>
 800ee56:	2001      	movs	r0, #1
 800ee58:	e76f      	b.n	800ed3a <_dtoa_r+0x7da>
 800ee5a:	f04f 0800 	mov.w	r8, #0
 800ee5e:	e7f6      	b.n	800ee4e <_dtoa_r+0x8ee>
 800ee60:	4698      	mov	r8, r3
 800ee62:	e7f4      	b.n	800ee4e <_dtoa_r+0x8ee>
 800ee64:	f43f af7d 	beq.w	800ed62 <_dtoa_r+0x802>
 800ee68:	4618      	mov	r0, r3
 800ee6a:	301c      	adds	r0, #28
 800ee6c:	e772      	b.n	800ed54 <_dtoa_r+0x7f4>
 800ee6e:	9b03      	ldr	r3, [sp, #12]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	dc37      	bgt.n	800eee4 <_dtoa_r+0x984>
 800ee74:	9b06      	ldr	r3, [sp, #24]
 800ee76:	2b02      	cmp	r3, #2
 800ee78:	dd34      	ble.n	800eee4 <_dtoa_r+0x984>
 800ee7a:	9b03      	ldr	r3, [sp, #12]
 800ee7c:	9302      	str	r3, [sp, #8]
 800ee7e:	9b02      	ldr	r3, [sp, #8]
 800ee80:	b96b      	cbnz	r3, 800ee9e <_dtoa_r+0x93e>
 800ee82:	4631      	mov	r1, r6
 800ee84:	2205      	movs	r2, #5
 800ee86:	4620      	mov	r0, r4
 800ee88:	f000 fbea 	bl	800f660 <__multadd>
 800ee8c:	4601      	mov	r1, r0
 800ee8e:	4606      	mov	r6, r0
 800ee90:	ee18 0a10 	vmov	r0, s16
 800ee94:	f000 fe04 	bl	800faa0 <__mcmp>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	f73f adbb 	bgt.w	800ea14 <_dtoa_r+0x4b4>
 800ee9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eea0:	9d01      	ldr	r5, [sp, #4]
 800eea2:	43db      	mvns	r3, r3
 800eea4:	9300      	str	r3, [sp, #0]
 800eea6:	f04f 0800 	mov.w	r8, #0
 800eeaa:	4631      	mov	r1, r6
 800eeac:	4620      	mov	r0, r4
 800eeae:	f000 fbb5 	bl	800f61c <_Bfree>
 800eeb2:	2f00      	cmp	r7, #0
 800eeb4:	f43f aea4 	beq.w	800ec00 <_dtoa_r+0x6a0>
 800eeb8:	f1b8 0f00 	cmp.w	r8, #0
 800eebc:	d005      	beq.n	800eeca <_dtoa_r+0x96a>
 800eebe:	45b8      	cmp	r8, r7
 800eec0:	d003      	beq.n	800eeca <_dtoa_r+0x96a>
 800eec2:	4641      	mov	r1, r8
 800eec4:	4620      	mov	r0, r4
 800eec6:	f000 fba9 	bl	800f61c <_Bfree>
 800eeca:	4639      	mov	r1, r7
 800eecc:	4620      	mov	r0, r4
 800eece:	f000 fba5 	bl	800f61c <_Bfree>
 800eed2:	e695      	b.n	800ec00 <_dtoa_r+0x6a0>
 800eed4:	2600      	movs	r6, #0
 800eed6:	4637      	mov	r7, r6
 800eed8:	e7e1      	b.n	800ee9e <_dtoa_r+0x93e>
 800eeda:	9700      	str	r7, [sp, #0]
 800eedc:	4637      	mov	r7, r6
 800eede:	e599      	b.n	800ea14 <_dtoa_r+0x4b4>
 800eee0:	40240000 	.word	0x40240000
 800eee4:	9b08      	ldr	r3, [sp, #32]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f000 80ca 	beq.w	800f080 <_dtoa_r+0xb20>
 800eeec:	9b03      	ldr	r3, [sp, #12]
 800eeee:	9302      	str	r3, [sp, #8]
 800eef0:	2d00      	cmp	r5, #0
 800eef2:	dd05      	ble.n	800ef00 <_dtoa_r+0x9a0>
 800eef4:	4639      	mov	r1, r7
 800eef6:	462a      	mov	r2, r5
 800eef8:	4620      	mov	r0, r4
 800eefa:	f000 fd61 	bl	800f9c0 <__lshift>
 800eefe:	4607      	mov	r7, r0
 800ef00:	f1b8 0f00 	cmp.w	r8, #0
 800ef04:	d05b      	beq.n	800efbe <_dtoa_r+0xa5e>
 800ef06:	6879      	ldr	r1, [r7, #4]
 800ef08:	4620      	mov	r0, r4
 800ef0a:	f000 fb47 	bl	800f59c <_Balloc>
 800ef0e:	4605      	mov	r5, r0
 800ef10:	b928      	cbnz	r0, 800ef1e <_dtoa_r+0x9be>
 800ef12:	4b87      	ldr	r3, [pc, #540]	; (800f130 <_dtoa_r+0xbd0>)
 800ef14:	4602      	mov	r2, r0
 800ef16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ef1a:	f7ff bb3b 	b.w	800e594 <_dtoa_r+0x34>
 800ef1e:	693a      	ldr	r2, [r7, #16]
 800ef20:	3202      	adds	r2, #2
 800ef22:	0092      	lsls	r2, r2, #2
 800ef24:	f107 010c 	add.w	r1, r7, #12
 800ef28:	300c      	adds	r0, #12
 800ef2a:	f7fe fb93 	bl	800d654 <memcpy>
 800ef2e:	2201      	movs	r2, #1
 800ef30:	4629      	mov	r1, r5
 800ef32:	4620      	mov	r0, r4
 800ef34:	f000 fd44 	bl	800f9c0 <__lshift>
 800ef38:	9b01      	ldr	r3, [sp, #4]
 800ef3a:	f103 0901 	add.w	r9, r3, #1
 800ef3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ef42:	4413      	add	r3, r2
 800ef44:	9305      	str	r3, [sp, #20]
 800ef46:	f00a 0301 	and.w	r3, sl, #1
 800ef4a:	46b8      	mov	r8, r7
 800ef4c:	9304      	str	r3, [sp, #16]
 800ef4e:	4607      	mov	r7, r0
 800ef50:	4631      	mov	r1, r6
 800ef52:	ee18 0a10 	vmov	r0, s16
 800ef56:	f7ff fa77 	bl	800e448 <quorem>
 800ef5a:	4641      	mov	r1, r8
 800ef5c:	9002      	str	r0, [sp, #8]
 800ef5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ef62:	ee18 0a10 	vmov	r0, s16
 800ef66:	f000 fd9b 	bl	800faa0 <__mcmp>
 800ef6a:	463a      	mov	r2, r7
 800ef6c:	9003      	str	r0, [sp, #12]
 800ef6e:	4631      	mov	r1, r6
 800ef70:	4620      	mov	r0, r4
 800ef72:	f000 fdb1 	bl	800fad8 <__mdiff>
 800ef76:	68c2      	ldr	r2, [r0, #12]
 800ef78:	f109 3bff 	add.w	fp, r9, #4294967295
 800ef7c:	4605      	mov	r5, r0
 800ef7e:	bb02      	cbnz	r2, 800efc2 <_dtoa_r+0xa62>
 800ef80:	4601      	mov	r1, r0
 800ef82:	ee18 0a10 	vmov	r0, s16
 800ef86:	f000 fd8b 	bl	800faa0 <__mcmp>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	4629      	mov	r1, r5
 800ef8e:	4620      	mov	r0, r4
 800ef90:	9207      	str	r2, [sp, #28]
 800ef92:	f000 fb43 	bl	800f61c <_Bfree>
 800ef96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ef9a:	ea43 0102 	orr.w	r1, r3, r2
 800ef9e:	9b04      	ldr	r3, [sp, #16]
 800efa0:	430b      	orrs	r3, r1
 800efa2:	464d      	mov	r5, r9
 800efa4:	d10f      	bne.n	800efc6 <_dtoa_r+0xa66>
 800efa6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800efaa:	d02a      	beq.n	800f002 <_dtoa_r+0xaa2>
 800efac:	9b03      	ldr	r3, [sp, #12]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	dd02      	ble.n	800efb8 <_dtoa_r+0xa58>
 800efb2:	9b02      	ldr	r3, [sp, #8]
 800efb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800efb8:	f88b a000 	strb.w	sl, [fp]
 800efbc:	e775      	b.n	800eeaa <_dtoa_r+0x94a>
 800efbe:	4638      	mov	r0, r7
 800efc0:	e7ba      	b.n	800ef38 <_dtoa_r+0x9d8>
 800efc2:	2201      	movs	r2, #1
 800efc4:	e7e2      	b.n	800ef8c <_dtoa_r+0xa2c>
 800efc6:	9b03      	ldr	r3, [sp, #12]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	db04      	blt.n	800efd6 <_dtoa_r+0xa76>
 800efcc:	9906      	ldr	r1, [sp, #24]
 800efce:	430b      	orrs	r3, r1
 800efd0:	9904      	ldr	r1, [sp, #16]
 800efd2:	430b      	orrs	r3, r1
 800efd4:	d122      	bne.n	800f01c <_dtoa_r+0xabc>
 800efd6:	2a00      	cmp	r2, #0
 800efd8:	ddee      	ble.n	800efb8 <_dtoa_r+0xa58>
 800efda:	ee18 1a10 	vmov	r1, s16
 800efde:	2201      	movs	r2, #1
 800efe0:	4620      	mov	r0, r4
 800efe2:	f000 fced 	bl	800f9c0 <__lshift>
 800efe6:	4631      	mov	r1, r6
 800efe8:	ee08 0a10 	vmov	s16, r0
 800efec:	f000 fd58 	bl	800faa0 <__mcmp>
 800eff0:	2800      	cmp	r0, #0
 800eff2:	dc03      	bgt.n	800effc <_dtoa_r+0xa9c>
 800eff4:	d1e0      	bne.n	800efb8 <_dtoa_r+0xa58>
 800eff6:	f01a 0f01 	tst.w	sl, #1
 800effa:	d0dd      	beq.n	800efb8 <_dtoa_r+0xa58>
 800effc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f000:	d1d7      	bne.n	800efb2 <_dtoa_r+0xa52>
 800f002:	2339      	movs	r3, #57	; 0x39
 800f004:	f88b 3000 	strb.w	r3, [fp]
 800f008:	462b      	mov	r3, r5
 800f00a:	461d      	mov	r5, r3
 800f00c:	3b01      	subs	r3, #1
 800f00e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f012:	2a39      	cmp	r2, #57	; 0x39
 800f014:	d071      	beq.n	800f0fa <_dtoa_r+0xb9a>
 800f016:	3201      	adds	r2, #1
 800f018:	701a      	strb	r2, [r3, #0]
 800f01a:	e746      	b.n	800eeaa <_dtoa_r+0x94a>
 800f01c:	2a00      	cmp	r2, #0
 800f01e:	dd07      	ble.n	800f030 <_dtoa_r+0xad0>
 800f020:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f024:	d0ed      	beq.n	800f002 <_dtoa_r+0xaa2>
 800f026:	f10a 0301 	add.w	r3, sl, #1
 800f02a:	f88b 3000 	strb.w	r3, [fp]
 800f02e:	e73c      	b.n	800eeaa <_dtoa_r+0x94a>
 800f030:	9b05      	ldr	r3, [sp, #20]
 800f032:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f036:	4599      	cmp	r9, r3
 800f038:	d047      	beq.n	800f0ca <_dtoa_r+0xb6a>
 800f03a:	ee18 1a10 	vmov	r1, s16
 800f03e:	2300      	movs	r3, #0
 800f040:	220a      	movs	r2, #10
 800f042:	4620      	mov	r0, r4
 800f044:	f000 fb0c 	bl	800f660 <__multadd>
 800f048:	45b8      	cmp	r8, r7
 800f04a:	ee08 0a10 	vmov	s16, r0
 800f04e:	f04f 0300 	mov.w	r3, #0
 800f052:	f04f 020a 	mov.w	r2, #10
 800f056:	4641      	mov	r1, r8
 800f058:	4620      	mov	r0, r4
 800f05a:	d106      	bne.n	800f06a <_dtoa_r+0xb0a>
 800f05c:	f000 fb00 	bl	800f660 <__multadd>
 800f060:	4680      	mov	r8, r0
 800f062:	4607      	mov	r7, r0
 800f064:	f109 0901 	add.w	r9, r9, #1
 800f068:	e772      	b.n	800ef50 <_dtoa_r+0x9f0>
 800f06a:	f000 faf9 	bl	800f660 <__multadd>
 800f06e:	4639      	mov	r1, r7
 800f070:	4680      	mov	r8, r0
 800f072:	2300      	movs	r3, #0
 800f074:	220a      	movs	r2, #10
 800f076:	4620      	mov	r0, r4
 800f078:	f000 faf2 	bl	800f660 <__multadd>
 800f07c:	4607      	mov	r7, r0
 800f07e:	e7f1      	b.n	800f064 <_dtoa_r+0xb04>
 800f080:	9b03      	ldr	r3, [sp, #12]
 800f082:	9302      	str	r3, [sp, #8]
 800f084:	9d01      	ldr	r5, [sp, #4]
 800f086:	ee18 0a10 	vmov	r0, s16
 800f08a:	4631      	mov	r1, r6
 800f08c:	f7ff f9dc 	bl	800e448 <quorem>
 800f090:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f094:	9b01      	ldr	r3, [sp, #4]
 800f096:	f805 ab01 	strb.w	sl, [r5], #1
 800f09a:	1aea      	subs	r2, r5, r3
 800f09c:	9b02      	ldr	r3, [sp, #8]
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	dd09      	ble.n	800f0b6 <_dtoa_r+0xb56>
 800f0a2:	ee18 1a10 	vmov	r1, s16
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	220a      	movs	r2, #10
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	f000 fad8 	bl	800f660 <__multadd>
 800f0b0:	ee08 0a10 	vmov	s16, r0
 800f0b4:	e7e7      	b.n	800f086 <_dtoa_r+0xb26>
 800f0b6:	9b02      	ldr	r3, [sp, #8]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	bfc8      	it	gt
 800f0bc:	461d      	movgt	r5, r3
 800f0be:	9b01      	ldr	r3, [sp, #4]
 800f0c0:	bfd8      	it	le
 800f0c2:	2501      	movle	r5, #1
 800f0c4:	441d      	add	r5, r3
 800f0c6:	f04f 0800 	mov.w	r8, #0
 800f0ca:	ee18 1a10 	vmov	r1, s16
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	f000 fc75 	bl	800f9c0 <__lshift>
 800f0d6:	4631      	mov	r1, r6
 800f0d8:	ee08 0a10 	vmov	s16, r0
 800f0dc:	f000 fce0 	bl	800faa0 <__mcmp>
 800f0e0:	2800      	cmp	r0, #0
 800f0e2:	dc91      	bgt.n	800f008 <_dtoa_r+0xaa8>
 800f0e4:	d102      	bne.n	800f0ec <_dtoa_r+0xb8c>
 800f0e6:	f01a 0f01 	tst.w	sl, #1
 800f0ea:	d18d      	bne.n	800f008 <_dtoa_r+0xaa8>
 800f0ec:	462b      	mov	r3, r5
 800f0ee:	461d      	mov	r5, r3
 800f0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0f4:	2a30      	cmp	r2, #48	; 0x30
 800f0f6:	d0fa      	beq.n	800f0ee <_dtoa_r+0xb8e>
 800f0f8:	e6d7      	b.n	800eeaa <_dtoa_r+0x94a>
 800f0fa:	9a01      	ldr	r2, [sp, #4]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d184      	bne.n	800f00a <_dtoa_r+0xaaa>
 800f100:	9b00      	ldr	r3, [sp, #0]
 800f102:	3301      	adds	r3, #1
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	2331      	movs	r3, #49	; 0x31
 800f108:	7013      	strb	r3, [r2, #0]
 800f10a:	e6ce      	b.n	800eeaa <_dtoa_r+0x94a>
 800f10c:	4b09      	ldr	r3, [pc, #36]	; (800f134 <_dtoa_r+0xbd4>)
 800f10e:	f7ff ba95 	b.w	800e63c <_dtoa_r+0xdc>
 800f112:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f114:	2b00      	cmp	r3, #0
 800f116:	f47f aa6e 	bne.w	800e5f6 <_dtoa_r+0x96>
 800f11a:	4b07      	ldr	r3, [pc, #28]	; (800f138 <_dtoa_r+0xbd8>)
 800f11c:	f7ff ba8e 	b.w	800e63c <_dtoa_r+0xdc>
 800f120:	9b02      	ldr	r3, [sp, #8]
 800f122:	2b00      	cmp	r3, #0
 800f124:	dcae      	bgt.n	800f084 <_dtoa_r+0xb24>
 800f126:	9b06      	ldr	r3, [sp, #24]
 800f128:	2b02      	cmp	r3, #2
 800f12a:	f73f aea8 	bgt.w	800ee7e <_dtoa_r+0x91e>
 800f12e:	e7a9      	b.n	800f084 <_dtoa_r+0xb24>
 800f130:	0801ca07 	.word	0x0801ca07
 800f134:	0801c964 	.word	0x0801c964
 800f138:	0801c988 	.word	0x0801c988

0800f13c <__sflush_r>:
 800f13c:	898a      	ldrh	r2, [r1, #12]
 800f13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f142:	4605      	mov	r5, r0
 800f144:	0710      	lsls	r0, r2, #28
 800f146:	460c      	mov	r4, r1
 800f148:	d458      	bmi.n	800f1fc <__sflush_r+0xc0>
 800f14a:	684b      	ldr	r3, [r1, #4]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	dc05      	bgt.n	800f15c <__sflush_r+0x20>
 800f150:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f152:	2b00      	cmp	r3, #0
 800f154:	dc02      	bgt.n	800f15c <__sflush_r+0x20>
 800f156:	2000      	movs	r0, #0
 800f158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f15c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f15e:	2e00      	cmp	r6, #0
 800f160:	d0f9      	beq.n	800f156 <__sflush_r+0x1a>
 800f162:	2300      	movs	r3, #0
 800f164:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f168:	682f      	ldr	r7, [r5, #0]
 800f16a:	602b      	str	r3, [r5, #0]
 800f16c:	d032      	beq.n	800f1d4 <__sflush_r+0x98>
 800f16e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f170:	89a3      	ldrh	r3, [r4, #12]
 800f172:	075a      	lsls	r2, r3, #29
 800f174:	d505      	bpl.n	800f182 <__sflush_r+0x46>
 800f176:	6863      	ldr	r3, [r4, #4]
 800f178:	1ac0      	subs	r0, r0, r3
 800f17a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f17c:	b10b      	cbz	r3, 800f182 <__sflush_r+0x46>
 800f17e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f180:	1ac0      	subs	r0, r0, r3
 800f182:	2300      	movs	r3, #0
 800f184:	4602      	mov	r2, r0
 800f186:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f188:	6a21      	ldr	r1, [r4, #32]
 800f18a:	4628      	mov	r0, r5
 800f18c:	47b0      	blx	r6
 800f18e:	1c43      	adds	r3, r0, #1
 800f190:	89a3      	ldrh	r3, [r4, #12]
 800f192:	d106      	bne.n	800f1a2 <__sflush_r+0x66>
 800f194:	6829      	ldr	r1, [r5, #0]
 800f196:	291d      	cmp	r1, #29
 800f198:	d82c      	bhi.n	800f1f4 <__sflush_r+0xb8>
 800f19a:	4a2a      	ldr	r2, [pc, #168]	; (800f244 <__sflush_r+0x108>)
 800f19c:	40ca      	lsrs	r2, r1
 800f19e:	07d6      	lsls	r6, r2, #31
 800f1a0:	d528      	bpl.n	800f1f4 <__sflush_r+0xb8>
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	6062      	str	r2, [r4, #4]
 800f1a6:	04d9      	lsls	r1, r3, #19
 800f1a8:	6922      	ldr	r2, [r4, #16]
 800f1aa:	6022      	str	r2, [r4, #0]
 800f1ac:	d504      	bpl.n	800f1b8 <__sflush_r+0x7c>
 800f1ae:	1c42      	adds	r2, r0, #1
 800f1b0:	d101      	bne.n	800f1b6 <__sflush_r+0x7a>
 800f1b2:	682b      	ldr	r3, [r5, #0]
 800f1b4:	b903      	cbnz	r3, 800f1b8 <__sflush_r+0x7c>
 800f1b6:	6560      	str	r0, [r4, #84]	; 0x54
 800f1b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1ba:	602f      	str	r7, [r5, #0]
 800f1bc:	2900      	cmp	r1, #0
 800f1be:	d0ca      	beq.n	800f156 <__sflush_r+0x1a>
 800f1c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1c4:	4299      	cmp	r1, r3
 800f1c6:	d002      	beq.n	800f1ce <__sflush_r+0x92>
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	f7fe fa59 	bl	800d680 <_free_r>
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	6360      	str	r0, [r4, #52]	; 0x34
 800f1d2:	e7c1      	b.n	800f158 <__sflush_r+0x1c>
 800f1d4:	6a21      	ldr	r1, [r4, #32]
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	4628      	mov	r0, r5
 800f1da:	47b0      	blx	r6
 800f1dc:	1c41      	adds	r1, r0, #1
 800f1de:	d1c7      	bne.n	800f170 <__sflush_r+0x34>
 800f1e0:	682b      	ldr	r3, [r5, #0]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d0c4      	beq.n	800f170 <__sflush_r+0x34>
 800f1e6:	2b1d      	cmp	r3, #29
 800f1e8:	d001      	beq.n	800f1ee <__sflush_r+0xb2>
 800f1ea:	2b16      	cmp	r3, #22
 800f1ec:	d101      	bne.n	800f1f2 <__sflush_r+0xb6>
 800f1ee:	602f      	str	r7, [r5, #0]
 800f1f0:	e7b1      	b.n	800f156 <__sflush_r+0x1a>
 800f1f2:	89a3      	ldrh	r3, [r4, #12]
 800f1f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1f8:	81a3      	strh	r3, [r4, #12]
 800f1fa:	e7ad      	b.n	800f158 <__sflush_r+0x1c>
 800f1fc:	690f      	ldr	r7, [r1, #16]
 800f1fe:	2f00      	cmp	r7, #0
 800f200:	d0a9      	beq.n	800f156 <__sflush_r+0x1a>
 800f202:	0793      	lsls	r3, r2, #30
 800f204:	680e      	ldr	r6, [r1, #0]
 800f206:	bf08      	it	eq
 800f208:	694b      	ldreq	r3, [r1, #20]
 800f20a:	600f      	str	r7, [r1, #0]
 800f20c:	bf18      	it	ne
 800f20e:	2300      	movne	r3, #0
 800f210:	eba6 0807 	sub.w	r8, r6, r7
 800f214:	608b      	str	r3, [r1, #8]
 800f216:	f1b8 0f00 	cmp.w	r8, #0
 800f21a:	dd9c      	ble.n	800f156 <__sflush_r+0x1a>
 800f21c:	6a21      	ldr	r1, [r4, #32]
 800f21e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f220:	4643      	mov	r3, r8
 800f222:	463a      	mov	r2, r7
 800f224:	4628      	mov	r0, r5
 800f226:	47b0      	blx	r6
 800f228:	2800      	cmp	r0, #0
 800f22a:	dc06      	bgt.n	800f23a <__sflush_r+0xfe>
 800f22c:	89a3      	ldrh	r3, [r4, #12]
 800f22e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f232:	81a3      	strh	r3, [r4, #12]
 800f234:	f04f 30ff 	mov.w	r0, #4294967295
 800f238:	e78e      	b.n	800f158 <__sflush_r+0x1c>
 800f23a:	4407      	add	r7, r0
 800f23c:	eba8 0800 	sub.w	r8, r8, r0
 800f240:	e7e9      	b.n	800f216 <__sflush_r+0xda>
 800f242:	bf00      	nop
 800f244:	20400001 	.word	0x20400001

0800f248 <_fflush_r>:
 800f248:	b538      	push	{r3, r4, r5, lr}
 800f24a:	690b      	ldr	r3, [r1, #16]
 800f24c:	4605      	mov	r5, r0
 800f24e:	460c      	mov	r4, r1
 800f250:	b913      	cbnz	r3, 800f258 <_fflush_r+0x10>
 800f252:	2500      	movs	r5, #0
 800f254:	4628      	mov	r0, r5
 800f256:	bd38      	pop	{r3, r4, r5, pc}
 800f258:	b118      	cbz	r0, 800f262 <_fflush_r+0x1a>
 800f25a:	6983      	ldr	r3, [r0, #24]
 800f25c:	b90b      	cbnz	r3, 800f262 <_fflush_r+0x1a>
 800f25e:	f000 f887 	bl	800f370 <__sinit>
 800f262:	4b14      	ldr	r3, [pc, #80]	; (800f2b4 <_fflush_r+0x6c>)
 800f264:	429c      	cmp	r4, r3
 800f266:	d11b      	bne.n	800f2a0 <_fflush_r+0x58>
 800f268:	686c      	ldr	r4, [r5, #4]
 800f26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d0ef      	beq.n	800f252 <_fflush_r+0xa>
 800f272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f274:	07d0      	lsls	r0, r2, #31
 800f276:	d404      	bmi.n	800f282 <_fflush_r+0x3a>
 800f278:	0599      	lsls	r1, r3, #22
 800f27a:	d402      	bmi.n	800f282 <_fflush_r+0x3a>
 800f27c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f27e:	f000 f91a 	bl	800f4b6 <__retarget_lock_acquire_recursive>
 800f282:	4628      	mov	r0, r5
 800f284:	4621      	mov	r1, r4
 800f286:	f7ff ff59 	bl	800f13c <__sflush_r>
 800f28a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f28c:	07da      	lsls	r2, r3, #31
 800f28e:	4605      	mov	r5, r0
 800f290:	d4e0      	bmi.n	800f254 <_fflush_r+0xc>
 800f292:	89a3      	ldrh	r3, [r4, #12]
 800f294:	059b      	lsls	r3, r3, #22
 800f296:	d4dd      	bmi.n	800f254 <_fflush_r+0xc>
 800f298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f29a:	f000 f90d 	bl	800f4b8 <__retarget_lock_release_recursive>
 800f29e:	e7d9      	b.n	800f254 <_fflush_r+0xc>
 800f2a0:	4b05      	ldr	r3, [pc, #20]	; (800f2b8 <_fflush_r+0x70>)
 800f2a2:	429c      	cmp	r4, r3
 800f2a4:	d101      	bne.n	800f2aa <_fflush_r+0x62>
 800f2a6:	68ac      	ldr	r4, [r5, #8]
 800f2a8:	e7df      	b.n	800f26a <_fflush_r+0x22>
 800f2aa:	4b04      	ldr	r3, [pc, #16]	; (800f2bc <_fflush_r+0x74>)
 800f2ac:	429c      	cmp	r4, r3
 800f2ae:	bf08      	it	eq
 800f2b0:	68ec      	ldreq	r4, [r5, #12]
 800f2b2:	e7da      	b.n	800f26a <_fflush_r+0x22>
 800f2b4:	0801ca38 	.word	0x0801ca38
 800f2b8:	0801ca58 	.word	0x0801ca58
 800f2bc:	0801ca18 	.word	0x0801ca18

0800f2c0 <std>:
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	b510      	push	{r4, lr}
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	e9c0 3300 	strd	r3, r3, [r0]
 800f2ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2ce:	6083      	str	r3, [r0, #8]
 800f2d0:	8181      	strh	r1, [r0, #12]
 800f2d2:	6643      	str	r3, [r0, #100]	; 0x64
 800f2d4:	81c2      	strh	r2, [r0, #14]
 800f2d6:	6183      	str	r3, [r0, #24]
 800f2d8:	4619      	mov	r1, r3
 800f2da:	2208      	movs	r2, #8
 800f2dc:	305c      	adds	r0, #92	; 0x5c
 800f2de:	f7fe f9c7 	bl	800d670 <memset>
 800f2e2:	4b05      	ldr	r3, [pc, #20]	; (800f2f8 <std+0x38>)
 800f2e4:	6263      	str	r3, [r4, #36]	; 0x24
 800f2e6:	4b05      	ldr	r3, [pc, #20]	; (800f2fc <std+0x3c>)
 800f2e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f2ea:	4b05      	ldr	r3, [pc, #20]	; (800f300 <std+0x40>)
 800f2ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f2ee:	4b05      	ldr	r3, [pc, #20]	; (800f304 <std+0x44>)
 800f2f0:	6224      	str	r4, [r4, #32]
 800f2f2:	6323      	str	r3, [r4, #48]	; 0x30
 800f2f4:	bd10      	pop	{r4, pc}
 800f2f6:	bf00      	nop
 800f2f8:	08010299 	.word	0x08010299
 800f2fc:	080102bb 	.word	0x080102bb
 800f300:	080102f3 	.word	0x080102f3
 800f304:	08010317 	.word	0x08010317

0800f308 <_cleanup_r>:
 800f308:	4901      	ldr	r1, [pc, #4]	; (800f310 <_cleanup_r+0x8>)
 800f30a:	f000 b8af 	b.w	800f46c <_fwalk_reent>
 800f30e:	bf00      	nop
 800f310:	0800f249 	.word	0x0800f249

0800f314 <__sfmoreglue>:
 800f314:	b570      	push	{r4, r5, r6, lr}
 800f316:	2268      	movs	r2, #104	; 0x68
 800f318:	1e4d      	subs	r5, r1, #1
 800f31a:	4355      	muls	r5, r2
 800f31c:	460e      	mov	r6, r1
 800f31e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f322:	f7fe fa19 	bl	800d758 <_malloc_r>
 800f326:	4604      	mov	r4, r0
 800f328:	b140      	cbz	r0, 800f33c <__sfmoreglue+0x28>
 800f32a:	2100      	movs	r1, #0
 800f32c:	e9c0 1600 	strd	r1, r6, [r0]
 800f330:	300c      	adds	r0, #12
 800f332:	60a0      	str	r0, [r4, #8]
 800f334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f338:	f7fe f99a 	bl	800d670 <memset>
 800f33c:	4620      	mov	r0, r4
 800f33e:	bd70      	pop	{r4, r5, r6, pc}

0800f340 <__sfp_lock_acquire>:
 800f340:	4801      	ldr	r0, [pc, #4]	; (800f348 <__sfp_lock_acquire+0x8>)
 800f342:	f000 b8b8 	b.w	800f4b6 <__retarget_lock_acquire_recursive>
 800f346:	bf00      	nop
 800f348:	20002395 	.word	0x20002395

0800f34c <__sfp_lock_release>:
 800f34c:	4801      	ldr	r0, [pc, #4]	; (800f354 <__sfp_lock_release+0x8>)
 800f34e:	f000 b8b3 	b.w	800f4b8 <__retarget_lock_release_recursive>
 800f352:	bf00      	nop
 800f354:	20002395 	.word	0x20002395

0800f358 <__sinit_lock_acquire>:
 800f358:	4801      	ldr	r0, [pc, #4]	; (800f360 <__sinit_lock_acquire+0x8>)
 800f35a:	f000 b8ac 	b.w	800f4b6 <__retarget_lock_acquire_recursive>
 800f35e:	bf00      	nop
 800f360:	20002396 	.word	0x20002396

0800f364 <__sinit_lock_release>:
 800f364:	4801      	ldr	r0, [pc, #4]	; (800f36c <__sinit_lock_release+0x8>)
 800f366:	f000 b8a7 	b.w	800f4b8 <__retarget_lock_release_recursive>
 800f36a:	bf00      	nop
 800f36c:	20002396 	.word	0x20002396

0800f370 <__sinit>:
 800f370:	b510      	push	{r4, lr}
 800f372:	4604      	mov	r4, r0
 800f374:	f7ff fff0 	bl	800f358 <__sinit_lock_acquire>
 800f378:	69a3      	ldr	r3, [r4, #24]
 800f37a:	b11b      	cbz	r3, 800f384 <__sinit+0x14>
 800f37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f380:	f7ff bff0 	b.w	800f364 <__sinit_lock_release>
 800f384:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f388:	6523      	str	r3, [r4, #80]	; 0x50
 800f38a:	4b13      	ldr	r3, [pc, #76]	; (800f3d8 <__sinit+0x68>)
 800f38c:	4a13      	ldr	r2, [pc, #76]	; (800f3dc <__sinit+0x6c>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	62a2      	str	r2, [r4, #40]	; 0x28
 800f392:	42a3      	cmp	r3, r4
 800f394:	bf04      	itt	eq
 800f396:	2301      	moveq	r3, #1
 800f398:	61a3      	streq	r3, [r4, #24]
 800f39a:	4620      	mov	r0, r4
 800f39c:	f000 f820 	bl	800f3e0 <__sfp>
 800f3a0:	6060      	str	r0, [r4, #4]
 800f3a2:	4620      	mov	r0, r4
 800f3a4:	f000 f81c 	bl	800f3e0 <__sfp>
 800f3a8:	60a0      	str	r0, [r4, #8]
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	f000 f818 	bl	800f3e0 <__sfp>
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	60e0      	str	r0, [r4, #12]
 800f3b4:	2104      	movs	r1, #4
 800f3b6:	6860      	ldr	r0, [r4, #4]
 800f3b8:	f7ff ff82 	bl	800f2c0 <std>
 800f3bc:	68a0      	ldr	r0, [r4, #8]
 800f3be:	2201      	movs	r2, #1
 800f3c0:	2109      	movs	r1, #9
 800f3c2:	f7ff ff7d 	bl	800f2c0 <std>
 800f3c6:	68e0      	ldr	r0, [r4, #12]
 800f3c8:	2202      	movs	r2, #2
 800f3ca:	2112      	movs	r1, #18
 800f3cc:	f7ff ff78 	bl	800f2c0 <std>
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	61a3      	str	r3, [r4, #24]
 800f3d4:	e7d2      	b.n	800f37c <__sinit+0xc>
 800f3d6:	bf00      	nop
 800f3d8:	0801c950 	.word	0x0801c950
 800f3dc:	0800f309 	.word	0x0800f309

0800f3e0 <__sfp>:
 800f3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3e2:	4607      	mov	r7, r0
 800f3e4:	f7ff ffac 	bl	800f340 <__sfp_lock_acquire>
 800f3e8:	4b1e      	ldr	r3, [pc, #120]	; (800f464 <__sfp+0x84>)
 800f3ea:	681e      	ldr	r6, [r3, #0]
 800f3ec:	69b3      	ldr	r3, [r6, #24]
 800f3ee:	b913      	cbnz	r3, 800f3f6 <__sfp+0x16>
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	f7ff ffbd 	bl	800f370 <__sinit>
 800f3f6:	3648      	adds	r6, #72	; 0x48
 800f3f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f3fc:	3b01      	subs	r3, #1
 800f3fe:	d503      	bpl.n	800f408 <__sfp+0x28>
 800f400:	6833      	ldr	r3, [r6, #0]
 800f402:	b30b      	cbz	r3, 800f448 <__sfp+0x68>
 800f404:	6836      	ldr	r6, [r6, #0]
 800f406:	e7f7      	b.n	800f3f8 <__sfp+0x18>
 800f408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f40c:	b9d5      	cbnz	r5, 800f444 <__sfp+0x64>
 800f40e:	4b16      	ldr	r3, [pc, #88]	; (800f468 <__sfp+0x88>)
 800f410:	60e3      	str	r3, [r4, #12]
 800f412:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f416:	6665      	str	r5, [r4, #100]	; 0x64
 800f418:	f000 f84c 	bl	800f4b4 <__retarget_lock_init_recursive>
 800f41c:	f7ff ff96 	bl	800f34c <__sfp_lock_release>
 800f420:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f424:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f428:	6025      	str	r5, [r4, #0]
 800f42a:	61a5      	str	r5, [r4, #24]
 800f42c:	2208      	movs	r2, #8
 800f42e:	4629      	mov	r1, r5
 800f430:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f434:	f7fe f91c 	bl	800d670 <memset>
 800f438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f43c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f440:	4620      	mov	r0, r4
 800f442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f444:	3468      	adds	r4, #104	; 0x68
 800f446:	e7d9      	b.n	800f3fc <__sfp+0x1c>
 800f448:	2104      	movs	r1, #4
 800f44a:	4638      	mov	r0, r7
 800f44c:	f7ff ff62 	bl	800f314 <__sfmoreglue>
 800f450:	4604      	mov	r4, r0
 800f452:	6030      	str	r0, [r6, #0]
 800f454:	2800      	cmp	r0, #0
 800f456:	d1d5      	bne.n	800f404 <__sfp+0x24>
 800f458:	f7ff ff78 	bl	800f34c <__sfp_lock_release>
 800f45c:	230c      	movs	r3, #12
 800f45e:	603b      	str	r3, [r7, #0]
 800f460:	e7ee      	b.n	800f440 <__sfp+0x60>
 800f462:	bf00      	nop
 800f464:	0801c950 	.word	0x0801c950
 800f468:	ffff0001 	.word	0xffff0001

0800f46c <_fwalk_reent>:
 800f46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f470:	4606      	mov	r6, r0
 800f472:	4688      	mov	r8, r1
 800f474:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f478:	2700      	movs	r7, #0
 800f47a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f47e:	f1b9 0901 	subs.w	r9, r9, #1
 800f482:	d505      	bpl.n	800f490 <_fwalk_reent+0x24>
 800f484:	6824      	ldr	r4, [r4, #0]
 800f486:	2c00      	cmp	r4, #0
 800f488:	d1f7      	bne.n	800f47a <_fwalk_reent+0xe>
 800f48a:	4638      	mov	r0, r7
 800f48c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f490:	89ab      	ldrh	r3, [r5, #12]
 800f492:	2b01      	cmp	r3, #1
 800f494:	d907      	bls.n	800f4a6 <_fwalk_reent+0x3a>
 800f496:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f49a:	3301      	adds	r3, #1
 800f49c:	d003      	beq.n	800f4a6 <_fwalk_reent+0x3a>
 800f49e:	4629      	mov	r1, r5
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	47c0      	blx	r8
 800f4a4:	4307      	orrs	r7, r0
 800f4a6:	3568      	adds	r5, #104	; 0x68
 800f4a8:	e7e9      	b.n	800f47e <_fwalk_reent+0x12>
	...

0800f4ac <_localeconv_r>:
 800f4ac:	4800      	ldr	r0, [pc, #0]	; (800f4b0 <_localeconv_r+0x4>)
 800f4ae:	4770      	bx	lr
 800f4b0:	20000b10 	.word	0x20000b10

0800f4b4 <__retarget_lock_init_recursive>:
 800f4b4:	4770      	bx	lr

0800f4b6 <__retarget_lock_acquire_recursive>:
 800f4b6:	4770      	bx	lr

0800f4b8 <__retarget_lock_release_recursive>:
 800f4b8:	4770      	bx	lr

0800f4ba <__swhatbuf_r>:
 800f4ba:	b570      	push	{r4, r5, r6, lr}
 800f4bc:	460e      	mov	r6, r1
 800f4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4c2:	2900      	cmp	r1, #0
 800f4c4:	b096      	sub	sp, #88	; 0x58
 800f4c6:	4614      	mov	r4, r2
 800f4c8:	461d      	mov	r5, r3
 800f4ca:	da08      	bge.n	800f4de <__swhatbuf_r+0x24>
 800f4cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	602a      	str	r2, [r5, #0]
 800f4d4:	061a      	lsls	r2, r3, #24
 800f4d6:	d410      	bmi.n	800f4fa <__swhatbuf_r+0x40>
 800f4d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4dc:	e00e      	b.n	800f4fc <__swhatbuf_r+0x42>
 800f4de:	466a      	mov	r2, sp
 800f4e0:	f000 ff70 	bl	80103c4 <_fstat_r>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	dbf1      	blt.n	800f4cc <__swhatbuf_r+0x12>
 800f4e8:	9a01      	ldr	r2, [sp, #4]
 800f4ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f4ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f4f2:	425a      	negs	r2, r3
 800f4f4:	415a      	adcs	r2, r3
 800f4f6:	602a      	str	r2, [r5, #0]
 800f4f8:	e7ee      	b.n	800f4d8 <__swhatbuf_r+0x1e>
 800f4fa:	2340      	movs	r3, #64	; 0x40
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	6023      	str	r3, [r4, #0]
 800f500:	b016      	add	sp, #88	; 0x58
 800f502:	bd70      	pop	{r4, r5, r6, pc}

0800f504 <__smakebuf_r>:
 800f504:	898b      	ldrh	r3, [r1, #12]
 800f506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f508:	079d      	lsls	r5, r3, #30
 800f50a:	4606      	mov	r6, r0
 800f50c:	460c      	mov	r4, r1
 800f50e:	d507      	bpl.n	800f520 <__smakebuf_r+0x1c>
 800f510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f514:	6023      	str	r3, [r4, #0]
 800f516:	6123      	str	r3, [r4, #16]
 800f518:	2301      	movs	r3, #1
 800f51a:	6163      	str	r3, [r4, #20]
 800f51c:	b002      	add	sp, #8
 800f51e:	bd70      	pop	{r4, r5, r6, pc}
 800f520:	ab01      	add	r3, sp, #4
 800f522:	466a      	mov	r2, sp
 800f524:	f7ff ffc9 	bl	800f4ba <__swhatbuf_r>
 800f528:	9900      	ldr	r1, [sp, #0]
 800f52a:	4605      	mov	r5, r0
 800f52c:	4630      	mov	r0, r6
 800f52e:	f7fe f913 	bl	800d758 <_malloc_r>
 800f532:	b948      	cbnz	r0, 800f548 <__smakebuf_r+0x44>
 800f534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f538:	059a      	lsls	r2, r3, #22
 800f53a:	d4ef      	bmi.n	800f51c <__smakebuf_r+0x18>
 800f53c:	f023 0303 	bic.w	r3, r3, #3
 800f540:	f043 0302 	orr.w	r3, r3, #2
 800f544:	81a3      	strh	r3, [r4, #12]
 800f546:	e7e3      	b.n	800f510 <__smakebuf_r+0xc>
 800f548:	4b0d      	ldr	r3, [pc, #52]	; (800f580 <__smakebuf_r+0x7c>)
 800f54a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f54c:	89a3      	ldrh	r3, [r4, #12]
 800f54e:	6020      	str	r0, [r4, #0]
 800f550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f554:	81a3      	strh	r3, [r4, #12]
 800f556:	9b00      	ldr	r3, [sp, #0]
 800f558:	6163      	str	r3, [r4, #20]
 800f55a:	9b01      	ldr	r3, [sp, #4]
 800f55c:	6120      	str	r0, [r4, #16]
 800f55e:	b15b      	cbz	r3, 800f578 <__smakebuf_r+0x74>
 800f560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f564:	4630      	mov	r0, r6
 800f566:	f000 ff3f 	bl	80103e8 <_isatty_r>
 800f56a:	b128      	cbz	r0, 800f578 <__smakebuf_r+0x74>
 800f56c:	89a3      	ldrh	r3, [r4, #12]
 800f56e:	f023 0303 	bic.w	r3, r3, #3
 800f572:	f043 0301 	orr.w	r3, r3, #1
 800f576:	81a3      	strh	r3, [r4, #12]
 800f578:	89a0      	ldrh	r0, [r4, #12]
 800f57a:	4305      	orrs	r5, r0
 800f57c:	81a5      	strh	r5, [r4, #12]
 800f57e:	e7cd      	b.n	800f51c <__smakebuf_r+0x18>
 800f580:	0800f309 	.word	0x0800f309

0800f584 <__malloc_lock>:
 800f584:	4801      	ldr	r0, [pc, #4]	; (800f58c <__malloc_lock+0x8>)
 800f586:	f7ff bf96 	b.w	800f4b6 <__retarget_lock_acquire_recursive>
 800f58a:	bf00      	nop
 800f58c:	20002394 	.word	0x20002394

0800f590 <__malloc_unlock>:
 800f590:	4801      	ldr	r0, [pc, #4]	; (800f598 <__malloc_unlock+0x8>)
 800f592:	f7ff bf91 	b.w	800f4b8 <__retarget_lock_release_recursive>
 800f596:	bf00      	nop
 800f598:	20002394 	.word	0x20002394

0800f59c <_Balloc>:
 800f59c:	b570      	push	{r4, r5, r6, lr}
 800f59e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f5a0:	4604      	mov	r4, r0
 800f5a2:	460d      	mov	r5, r1
 800f5a4:	b976      	cbnz	r6, 800f5c4 <_Balloc+0x28>
 800f5a6:	2010      	movs	r0, #16
 800f5a8:	f7fe f844 	bl	800d634 <malloc>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	6260      	str	r0, [r4, #36]	; 0x24
 800f5b0:	b920      	cbnz	r0, 800f5bc <_Balloc+0x20>
 800f5b2:	4b18      	ldr	r3, [pc, #96]	; (800f614 <_Balloc+0x78>)
 800f5b4:	4818      	ldr	r0, [pc, #96]	; (800f618 <_Balloc+0x7c>)
 800f5b6:	2166      	movs	r1, #102	; 0x66
 800f5b8:	f000 fec4 	bl	8010344 <__assert_func>
 800f5bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5c0:	6006      	str	r6, [r0, #0]
 800f5c2:	60c6      	str	r6, [r0, #12]
 800f5c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f5c6:	68f3      	ldr	r3, [r6, #12]
 800f5c8:	b183      	cbz	r3, 800f5ec <_Balloc+0x50>
 800f5ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f5d2:	b9b8      	cbnz	r0, 800f604 <_Balloc+0x68>
 800f5d4:	2101      	movs	r1, #1
 800f5d6:	fa01 f605 	lsl.w	r6, r1, r5
 800f5da:	1d72      	adds	r2, r6, #5
 800f5dc:	0092      	lsls	r2, r2, #2
 800f5de:	4620      	mov	r0, r4
 800f5e0:	f000 fb60 	bl	800fca4 <_calloc_r>
 800f5e4:	b160      	cbz	r0, 800f600 <_Balloc+0x64>
 800f5e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f5ea:	e00e      	b.n	800f60a <_Balloc+0x6e>
 800f5ec:	2221      	movs	r2, #33	; 0x21
 800f5ee:	2104      	movs	r1, #4
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	f000 fb57 	bl	800fca4 <_calloc_r>
 800f5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5f8:	60f0      	str	r0, [r6, #12]
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d1e4      	bne.n	800f5ca <_Balloc+0x2e>
 800f600:	2000      	movs	r0, #0
 800f602:	bd70      	pop	{r4, r5, r6, pc}
 800f604:	6802      	ldr	r2, [r0, #0]
 800f606:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f60a:	2300      	movs	r3, #0
 800f60c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f610:	e7f7      	b.n	800f602 <_Balloc+0x66>
 800f612:	bf00      	nop
 800f614:	0801c995 	.word	0x0801c995
 800f618:	0801ca78 	.word	0x0801ca78

0800f61c <_Bfree>:
 800f61c:	b570      	push	{r4, r5, r6, lr}
 800f61e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f620:	4605      	mov	r5, r0
 800f622:	460c      	mov	r4, r1
 800f624:	b976      	cbnz	r6, 800f644 <_Bfree+0x28>
 800f626:	2010      	movs	r0, #16
 800f628:	f7fe f804 	bl	800d634 <malloc>
 800f62c:	4602      	mov	r2, r0
 800f62e:	6268      	str	r0, [r5, #36]	; 0x24
 800f630:	b920      	cbnz	r0, 800f63c <_Bfree+0x20>
 800f632:	4b09      	ldr	r3, [pc, #36]	; (800f658 <_Bfree+0x3c>)
 800f634:	4809      	ldr	r0, [pc, #36]	; (800f65c <_Bfree+0x40>)
 800f636:	218a      	movs	r1, #138	; 0x8a
 800f638:	f000 fe84 	bl	8010344 <__assert_func>
 800f63c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f640:	6006      	str	r6, [r0, #0]
 800f642:	60c6      	str	r6, [r0, #12]
 800f644:	b13c      	cbz	r4, 800f656 <_Bfree+0x3a>
 800f646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f648:	6862      	ldr	r2, [r4, #4]
 800f64a:	68db      	ldr	r3, [r3, #12]
 800f64c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f650:	6021      	str	r1, [r4, #0]
 800f652:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f656:	bd70      	pop	{r4, r5, r6, pc}
 800f658:	0801c995 	.word	0x0801c995
 800f65c:	0801ca78 	.word	0x0801ca78

0800f660 <__multadd>:
 800f660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f664:	690d      	ldr	r5, [r1, #16]
 800f666:	4607      	mov	r7, r0
 800f668:	460c      	mov	r4, r1
 800f66a:	461e      	mov	r6, r3
 800f66c:	f101 0c14 	add.w	ip, r1, #20
 800f670:	2000      	movs	r0, #0
 800f672:	f8dc 3000 	ldr.w	r3, [ip]
 800f676:	b299      	uxth	r1, r3
 800f678:	fb02 6101 	mla	r1, r2, r1, r6
 800f67c:	0c1e      	lsrs	r6, r3, #16
 800f67e:	0c0b      	lsrs	r3, r1, #16
 800f680:	fb02 3306 	mla	r3, r2, r6, r3
 800f684:	b289      	uxth	r1, r1
 800f686:	3001      	adds	r0, #1
 800f688:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f68c:	4285      	cmp	r5, r0
 800f68e:	f84c 1b04 	str.w	r1, [ip], #4
 800f692:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f696:	dcec      	bgt.n	800f672 <__multadd+0x12>
 800f698:	b30e      	cbz	r6, 800f6de <__multadd+0x7e>
 800f69a:	68a3      	ldr	r3, [r4, #8]
 800f69c:	42ab      	cmp	r3, r5
 800f69e:	dc19      	bgt.n	800f6d4 <__multadd+0x74>
 800f6a0:	6861      	ldr	r1, [r4, #4]
 800f6a2:	4638      	mov	r0, r7
 800f6a4:	3101      	adds	r1, #1
 800f6a6:	f7ff ff79 	bl	800f59c <_Balloc>
 800f6aa:	4680      	mov	r8, r0
 800f6ac:	b928      	cbnz	r0, 800f6ba <__multadd+0x5a>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	4b0c      	ldr	r3, [pc, #48]	; (800f6e4 <__multadd+0x84>)
 800f6b2:	480d      	ldr	r0, [pc, #52]	; (800f6e8 <__multadd+0x88>)
 800f6b4:	21b5      	movs	r1, #181	; 0xb5
 800f6b6:	f000 fe45 	bl	8010344 <__assert_func>
 800f6ba:	6922      	ldr	r2, [r4, #16]
 800f6bc:	3202      	adds	r2, #2
 800f6be:	f104 010c 	add.w	r1, r4, #12
 800f6c2:	0092      	lsls	r2, r2, #2
 800f6c4:	300c      	adds	r0, #12
 800f6c6:	f7fd ffc5 	bl	800d654 <memcpy>
 800f6ca:	4621      	mov	r1, r4
 800f6cc:	4638      	mov	r0, r7
 800f6ce:	f7ff ffa5 	bl	800f61c <_Bfree>
 800f6d2:	4644      	mov	r4, r8
 800f6d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f6d8:	3501      	adds	r5, #1
 800f6da:	615e      	str	r6, [r3, #20]
 800f6dc:	6125      	str	r5, [r4, #16]
 800f6de:	4620      	mov	r0, r4
 800f6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6e4:	0801ca07 	.word	0x0801ca07
 800f6e8:	0801ca78 	.word	0x0801ca78

0800f6ec <__hi0bits>:
 800f6ec:	0c03      	lsrs	r3, r0, #16
 800f6ee:	041b      	lsls	r3, r3, #16
 800f6f0:	b9d3      	cbnz	r3, 800f728 <__hi0bits+0x3c>
 800f6f2:	0400      	lsls	r0, r0, #16
 800f6f4:	2310      	movs	r3, #16
 800f6f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f6fa:	bf04      	itt	eq
 800f6fc:	0200      	lsleq	r0, r0, #8
 800f6fe:	3308      	addeq	r3, #8
 800f700:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f704:	bf04      	itt	eq
 800f706:	0100      	lsleq	r0, r0, #4
 800f708:	3304      	addeq	r3, #4
 800f70a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f70e:	bf04      	itt	eq
 800f710:	0080      	lsleq	r0, r0, #2
 800f712:	3302      	addeq	r3, #2
 800f714:	2800      	cmp	r0, #0
 800f716:	db05      	blt.n	800f724 <__hi0bits+0x38>
 800f718:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f71c:	f103 0301 	add.w	r3, r3, #1
 800f720:	bf08      	it	eq
 800f722:	2320      	moveq	r3, #32
 800f724:	4618      	mov	r0, r3
 800f726:	4770      	bx	lr
 800f728:	2300      	movs	r3, #0
 800f72a:	e7e4      	b.n	800f6f6 <__hi0bits+0xa>

0800f72c <__lo0bits>:
 800f72c:	6803      	ldr	r3, [r0, #0]
 800f72e:	f013 0207 	ands.w	r2, r3, #7
 800f732:	4601      	mov	r1, r0
 800f734:	d00b      	beq.n	800f74e <__lo0bits+0x22>
 800f736:	07da      	lsls	r2, r3, #31
 800f738:	d423      	bmi.n	800f782 <__lo0bits+0x56>
 800f73a:	0798      	lsls	r0, r3, #30
 800f73c:	bf49      	itett	mi
 800f73e:	085b      	lsrmi	r3, r3, #1
 800f740:	089b      	lsrpl	r3, r3, #2
 800f742:	2001      	movmi	r0, #1
 800f744:	600b      	strmi	r3, [r1, #0]
 800f746:	bf5c      	itt	pl
 800f748:	600b      	strpl	r3, [r1, #0]
 800f74a:	2002      	movpl	r0, #2
 800f74c:	4770      	bx	lr
 800f74e:	b298      	uxth	r0, r3
 800f750:	b9a8      	cbnz	r0, 800f77e <__lo0bits+0x52>
 800f752:	0c1b      	lsrs	r3, r3, #16
 800f754:	2010      	movs	r0, #16
 800f756:	b2da      	uxtb	r2, r3
 800f758:	b90a      	cbnz	r2, 800f75e <__lo0bits+0x32>
 800f75a:	3008      	adds	r0, #8
 800f75c:	0a1b      	lsrs	r3, r3, #8
 800f75e:	071a      	lsls	r2, r3, #28
 800f760:	bf04      	itt	eq
 800f762:	091b      	lsreq	r3, r3, #4
 800f764:	3004      	addeq	r0, #4
 800f766:	079a      	lsls	r2, r3, #30
 800f768:	bf04      	itt	eq
 800f76a:	089b      	lsreq	r3, r3, #2
 800f76c:	3002      	addeq	r0, #2
 800f76e:	07da      	lsls	r2, r3, #31
 800f770:	d403      	bmi.n	800f77a <__lo0bits+0x4e>
 800f772:	085b      	lsrs	r3, r3, #1
 800f774:	f100 0001 	add.w	r0, r0, #1
 800f778:	d005      	beq.n	800f786 <__lo0bits+0x5a>
 800f77a:	600b      	str	r3, [r1, #0]
 800f77c:	4770      	bx	lr
 800f77e:	4610      	mov	r0, r2
 800f780:	e7e9      	b.n	800f756 <__lo0bits+0x2a>
 800f782:	2000      	movs	r0, #0
 800f784:	4770      	bx	lr
 800f786:	2020      	movs	r0, #32
 800f788:	4770      	bx	lr
	...

0800f78c <__i2b>:
 800f78c:	b510      	push	{r4, lr}
 800f78e:	460c      	mov	r4, r1
 800f790:	2101      	movs	r1, #1
 800f792:	f7ff ff03 	bl	800f59c <_Balloc>
 800f796:	4602      	mov	r2, r0
 800f798:	b928      	cbnz	r0, 800f7a6 <__i2b+0x1a>
 800f79a:	4b05      	ldr	r3, [pc, #20]	; (800f7b0 <__i2b+0x24>)
 800f79c:	4805      	ldr	r0, [pc, #20]	; (800f7b4 <__i2b+0x28>)
 800f79e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f7a2:	f000 fdcf 	bl	8010344 <__assert_func>
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	6144      	str	r4, [r0, #20]
 800f7aa:	6103      	str	r3, [r0, #16]
 800f7ac:	bd10      	pop	{r4, pc}
 800f7ae:	bf00      	nop
 800f7b0:	0801ca07 	.word	0x0801ca07
 800f7b4:	0801ca78 	.word	0x0801ca78

0800f7b8 <__multiply>:
 800f7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7bc:	4691      	mov	r9, r2
 800f7be:	690a      	ldr	r2, [r1, #16]
 800f7c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	bfb8      	it	lt
 800f7c8:	460b      	movlt	r3, r1
 800f7ca:	460c      	mov	r4, r1
 800f7cc:	bfbc      	itt	lt
 800f7ce:	464c      	movlt	r4, r9
 800f7d0:	4699      	movlt	r9, r3
 800f7d2:	6927      	ldr	r7, [r4, #16]
 800f7d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f7d8:	68a3      	ldr	r3, [r4, #8]
 800f7da:	6861      	ldr	r1, [r4, #4]
 800f7dc:	eb07 060a 	add.w	r6, r7, sl
 800f7e0:	42b3      	cmp	r3, r6
 800f7e2:	b085      	sub	sp, #20
 800f7e4:	bfb8      	it	lt
 800f7e6:	3101      	addlt	r1, #1
 800f7e8:	f7ff fed8 	bl	800f59c <_Balloc>
 800f7ec:	b930      	cbnz	r0, 800f7fc <__multiply+0x44>
 800f7ee:	4602      	mov	r2, r0
 800f7f0:	4b44      	ldr	r3, [pc, #272]	; (800f904 <__multiply+0x14c>)
 800f7f2:	4845      	ldr	r0, [pc, #276]	; (800f908 <__multiply+0x150>)
 800f7f4:	f240 115d 	movw	r1, #349	; 0x15d
 800f7f8:	f000 fda4 	bl	8010344 <__assert_func>
 800f7fc:	f100 0514 	add.w	r5, r0, #20
 800f800:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f804:	462b      	mov	r3, r5
 800f806:	2200      	movs	r2, #0
 800f808:	4543      	cmp	r3, r8
 800f80a:	d321      	bcc.n	800f850 <__multiply+0x98>
 800f80c:	f104 0314 	add.w	r3, r4, #20
 800f810:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f814:	f109 0314 	add.w	r3, r9, #20
 800f818:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f81c:	9202      	str	r2, [sp, #8]
 800f81e:	1b3a      	subs	r2, r7, r4
 800f820:	3a15      	subs	r2, #21
 800f822:	f022 0203 	bic.w	r2, r2, #3
 800f826:	3204      	adds	r2, #4
 800f828:	f104 0115 	add.w	r1, r4, #21
 800f82c:	428f      	cmp	r7, r1
 800f82e:	bf38      	it	cc
 800f830:	2204      	movcc	r2, #4
 800f832:	9201      	str	r2, [sp, #4]
 800f834:	9a02      	ldr	r2, [sp, #8]
 800f836:	9303      	str	r3, [sp, #12]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d80c      	bhi.n	800f856 <__multiply+0x9e>
 800f83c:	2e00      	cmp	r6, #0
 800f83e:	dd03      	ble.n	800f848 <__multiply+0x90>
 800f840:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f844:	2b00      	cmp	r3, #0
 800f846:	d05a      	beq.n	800f8fe <__multiply+0x146>
 800f848:	6106      	str	r6, [r0, #16]
 800f84a:	b005      	add	sp, #20
 800f84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f850:	f843 2b04 	str.w	r2, [r3], #4
 800f854:	e7d8      	b.n	800f808 <__multiply+0x50>
 800f856:	f8b3 a000 	ldrh.w	sl, [r3]
 800f85a:	f1ba 0f00 	cmp.w	sl, #0
 800f85e:	d024      	beq.n	800f8aa <__multiply+0xf2>
 800f860:	f104 0e14 	add.w	lr, r4, #20
 800f864:	46a9      	mov	r9, r5
 800f866:	f04f 0c00 	mov.w	ip, #0
 800f86a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f86e:	f8d9 1000 	ldr.w	r1, [r9]
 800f872:	fa1f fb82 	uxth.w	fp, r2
 800f876:	b289      	uxth	r1, r1
 800f878:	fb0a 110b 	mla	r1, sl, fp, r1
 800f87c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f880:	f8d9 2000 	ldr.w	r2, [r9]
 800f884:	4461      	add	r1, ip
 800f886:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f88a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f88e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f892:	b289      	uxth	r1, r1
 800f894:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f898:	4577      	cmp	r7, lr
 800f89a:	f849 1b04 	str.w	r1, [r9], #4
 800f89e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f8a2:	d8e2      	bhi.n	800f86a <__multiply+0xb2>
 800f8a4:	9a01      	ldr	r2, [sp, #4]
 800f8a6:	f845 c002 	str.w	ip, [r5, r2]
 800f8aa:	9a03      	ldr	r2, [sp, #12]
 800f8ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f8b0:	3304      	adds	r3, #4
 800f8b2:	f1b9 0f00 	cmp.w	r9, #0
 800f8b6:	d020      	beq.n	800f8fa <__multiply+0x142>
 800f8b8:	6829      	ldr	r1, [r5, #0]
 800f8ba:	f104 0c14 	add.w	ip, r4, #20
 800f8be:	46ae      	mov	lr, r5
 800f8c0:	f04f 0a00 	mov.w	sl, #0
 800f8c4:	f8bc b000 	ldrh.w	fp, [ip]
 800f8c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f8cc:	fb09 220b 	mla	r2, r9, fp, r2
 800f8d0:	4492      	add	sl, r2
 800f8d2:	b289      	uxth	r1, r1
 800f8d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f8d8:	f84e 1b04 	str.w	r1, [lr], #4
 800f8dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f8e0:	f8be 1000 	ldrh.w	r1, [lr]
 800f8e4:	0c12      	lsrs	r2, r2, #16
 800f8e6:	fb09 1102 	mla	r1, r9, r2, r1
 800f8ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f8ee:	4567      	cmp	r7, ip
 800f8f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f8f4:	d8e6      	bhi.n	800f8c4 <__multiply+0x10c>
 800f8f6:	9a01      	ldr	r2, [sp, #4]
 800f8f8:	50a9      	str	r1, [r5, r2]
 800f8fa:	3504      	adds	r5, #4
 800f8fc:	e79a      	b.n	800f834 <__multiply+0x7c>
 800f8fe:	3e01      	subs	r6, #1
 800f900:	e79c      	b.n	800f83c <__multiply+0x84>
 800f902:	bf00      	nop
 800f904:	0801ca07 	.word	0x0801ca07
 800f908:	0801ca78 	.word	0x0801ca78

0800f90c <__pow5mult>:
 800f90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f910:	4615      	mov	r5, r2
 800f912:	f012 0203 	ands.w	r2, r2, #3
 800f916:	4606      	mov	r6, r0
 800f918:	460f      	mov	r7, r1
 800f91a:	d007      	beq.n	800f92c <__pow5mult+0x20>
 800f91c:	4c25      	ldr	r4, [pc, #148]	; (800f9b4 <__pow5mult+0xa8>)
 800f91e:	3a01      	subs	r2, #1
 800f920:	2300      	movs	r3, #0
 800f922:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f926:	f7ff fe9b 	bl	800f660 <__multadd>
 800f92a:	4607      	mov	r7, r0
 800f92c:	10ad      	asrs	r5, r5, #2
 800f92e:	d03d      	beq.n	800f9ac <__pow5mult+0xa0>
 800f930:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f932:	b97c      	cbnz	r4, 800f954 <__pow5mult+0x48>
 800f934:	2010      	movs	r0, #16
 800f936:	f7fd fe7d 	bl	800d634 <malloc>
 800f93a:	4602      	mov	r2, r0
 800f93c:	6270      	str	r0, [r6, #36]	; 0x24
 800f93e:	b928      	cbnz	r0, 800f94c <__pow5mult+0x40>
 800f940:	4b1d      	ldr	r3, [pc, #116]	; (800f9b8 <__pow5mult+0xac>)
 800f942:	481e      	ldr	r0, [pc, #120]	; (800f9bc <__pow5mult+0xb0>)
 800f944:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f948:	f000 fcfc 	bl	8010344 <__assert_func>
 800f94c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f950:	6004      	str	r4, [r0, #0]
 800f952:	60c4      	str	r4, [r0, #12]
 800f954:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f958:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f95c:	b94c      	cbnz	r4, 800f972 <__pow5mult+0x66>
 800f95e:	f240 2171 	movw	r1, #625	; 0x271
 800f962:	4630      	mov	r0, r6
 800f964:	f7ff ff12 	bl	800f78c <__i2b>
 800f968:	2300      	movs	r3, #0
 800f96a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f96e:	4604      	mov	r4, r0
 800f970:	6003      	str	r3, [r0, #0]
 800f972:	f04f 0900 	mov.w	r9, #0
 800f976:	07eb      	lsls	r3, r5, #31
 800f978:	d50a      	bpl.n	800f990 <__pow5mult+0x84>
 800f97a:	4639      	mov	r1, r7
 800f97c:	4622      	mov	r2, r4
 800f97e:	4630      	mov	r0, r6
 800f980:	f7ff ff1a 	bl	800f7b8 <__multiply>
 800f984:	4639      	mov	r1, r7
 800f986:	4680      	mov	r8, r0
 800f988:	4630      	mov	r0, r6
 800f98a:	f7ff fe47 	bl	800f61c <_Bfree>
 800f98e:	4647      	mov	r7, r8
 800f990:	106d      	asrs	r5, r5, #1
 800f992:	d00b      	beq.n	800f9ac <__pow5mult+0xa0>
 800f994:	6820      	ldr	r0, [r4, #0]
 800f996:	b938      	cbnz	r0, 800f9a8 <__pow5mult+0x9c>
 800f998:	4622      	mov	r2, r4
 800f99a:	4621      	mov	r1, r4
 800f99c:	4630      	mov	r0, r6
 800f99e:	f7ff ff0b 	bl	800f7b8 <__multiply>
 800f9a2:	6020      	str	r0, [r4, #0]
 800f9a4:	f8c0 9000 	str.w	r9, [r0]
 800f9a8:	4604      	mov	r4, r0
 800f9aa:	e7e4      	b.n	800f976 <__pow5mult+0x6a>
 800f9ac:	4638      	mov	r0, r7
 800f9ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9b2:	bf00      	nop
 800f9b4:	0801cbc8 	.word	0x0801cbc8
 800f9b8:	0801c995 	.word	0x0801c995
 800f9bc:	0801ca78 	.word	0x0801ca78

0800f9c0 <__lshift>:
 800f9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9c4:	460c      	mov	r4, r1
 800f9c6:	6849      	ldr	r1, [r1, #4]
 800f9c8:	6923      	ldr	r3, [r4, #16]
 800f9ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f9ce:	68a3      	ldr	r3, [r4, #8]
 800f9d0:	4607      	mov	r7, r0
 800f9d2:	4691      	mov	r9, r2
 800f9d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f9d8:	f108 0601 	add.w	r6, r8, #1
 800f9dc:	42b3      	cmp	r3, r6
 800f9de:	db0b      	blt.n	800f9f8 <__lshift+0x38>
 800f9e0:	4638      	mov	r0, r7
 800f9e2:	f7ff fddb 	bl	800f59c <_Balloc>
 800f9e6:	4605      	mov	r5, r0
 800f9e8:	b948      	cbnz	r0, 800f9fe <__lshift+0x3e>
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	4b2a      	ldr	r3, [pc, #168]	; (800fa98 <__lshift+0xd8>)
 800f9ee:	482b      	ldr	r0, [pc, #172]	; (800fa9c <__lshift+0xdc>)
 800f9f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f9f4:	f000 fca6 	bl	8010344 <__assert_func>
 800f9f8:	3101      	adds	r1, #1
 800f9fa:	005b      	lsls	r3, r3, #1
 800f9fc:	e7ee      	b.n	800f9dc <__lshift+0x1c>
 800f9fe:	2300      	movs	r3, #0
 800fa00:	f100 0114 	add.w	r1, r0, #20
 800fa04:	f100 0210 	add.w	r2, r0, #16
 800fa08:	4618      	mov	r0, r3
 800fa0a:	4553      	cmp	r3, sl
 800fa0c:	db37      	blt.n	800fa7e <__lshift+0xbe>
 800fa0e:	6920      	ldr	r0, [r4, #16]
 800fa10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa14:	f104 0314 	add.w	r3, r4, #20
 800fa18:	f019 091f 	ands.w	r9, r9, #31
 800fa1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fa24:	d02f      	beq.n	800fa86 <__lshift+0xc6>
 800fa26:	f1c9 0e20 	rsb	lr, r9, #32
 800fa2a:	468a      	mov	sl, r1
 800fa2c:	f04f 0c00 	mov.w	ip, #0
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	fa02 f209 	lsl.w	r2, r2, r9
 800fa36:	ea42 020c 	orr.w	r2, r2, ip
 800fa3a:	f84a 2b04 	str.w	r2, [sl], #4
 800fa3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa42:	4298      	cmp	r0, r3
 800fa44:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fa48:	d8f2      	bhi.n	800fa30 <__lshift+0x70>
 800fa4a:	1b03      	subs	r3, r0, r4
 800fa4c:	3b15      	subs	r3, #21
 800fa4e:	f023 0303 	bic.w	r3, r3, #3
 800fa52:	3304      	adds	r3, #4
 800fa54:	f104 0215 	add.w	r2, r4, #21
 800fa58:	4290      	cmp	r0, r2
 800fa5a:	bf38      	it	cc
 800fa5c:	2304      	movcc	r3, #4
 800fa5e:	f841 c003 	str.w	ip, [r1, r3]
 800fa62:	f1bc 0f00 	cmp.w	ip, #0
 800fa66:	d001      	beq.n	800fa6c <__lshift+0xac>
 800fa68:	f108 0602 	add.w	r6, r8, #2
 800fa6c:	3e01      	subs	r6, #1
 800fa6e:	4638      	mov	r0, r7
 800fa70:	612e      	str	r6, [r5, #16]
 800fa72:	4621      	mov	r1, r4
 800fa74:	f7ff fdd2 	bl	800f61c <_Bfree>
 800fa78:	4628      	mov	r0, r5
 800fa7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa82:	3301      	adds	r3, #1
 800fa84:	e7c1      	b.n	800fa0a <__lshift+0x4a>
 800fa86:	3904      	subs	r1, #4
 800fa88:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa90:	4298      	cmp	r0, r3
 800fa92:	d8f9      	bhi.n	800fa88 <__lshift+0xc8>
 800fa94:	e7ea      	b.n	800fa6c <__lshift+0xac>
 800fa96:	bf00      	nop
 800fa98:	0801ca07 	.word	0x0801ca07
 800fa9c:	0801ca78 	.word	0x0801ca78

0800faa0 <__mcmp>:
 800faa0:	b530      	push	{r4, r5, lr}
 800faa2:	6902      	ldr	r2, [r0, #16]
 800faa4:	690c      	ldr	r4, [r1, #16]
 800faa6:	1b12      	subs	r2, r2, r4
 800faa8:	d10e      	bne.n	800fac8 <__mcmp+0x28>
 800faaa:	f100 0314 	add.w	r3, r0, #20
 800faae:	3114      	adds	r1, #20
 800fab0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fab4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fab8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fabc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fac0:	42a5      	cmp	r5, r4
 800fac2:	d003      	beq.n	800facc <__mcmp+0x2c>
 800fac4:	d305      	bcc.n	800fad2 <__mcmp+0x32>
 800fac6:	2201      	movs	r2, #1
 800fac8:	4610      	mov	r0, r2
 800faca:	bd30      	pop	{r4, r5, pc}
 800facc:	4283      	cmp	r3, r0
 800face:	d3f3      	bcc.n	800fab8 <__mcmp+0x18>
 800fad0:	e7fa      	b.n	800fac8 <__mcmp+0x28>
 800fad2:	f04f 32ff 	mov.w	r2, #4294967295
 800fad6:	e7f7      	b.n	800fac8 <__mcmp+0x28>

0800fad8 <__mdiff>:
 800fad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fadc:	460c      	mov	r4, r1
 800fade:	4606      	mov	r6, r0
 800fae0:	4611      	mov	r1, r2
 800fae2:	4620      	mov	r0, r4
 800fae4:	4690      	mov	r8, r2
 800fae6:	f7ff ffdb 	bl	800faa0 <__mcmp>
 800faea:	1e05      	subs	r5, r0, #0
 800faec:	d110      	bne.n	800fb10 <__mdiff+0x38>
 800faee:	4629      	mov	r1, r5
 800faf0:	4630      	mov	r0, r6
 800faf2:	f7ff fd53 	bl	800f59c <_Balloc>
 800faf6:	b930      	cbnz	r0, 800fb06 <__mdiff+0x2e>
 800faf8:	4b3a      	ldr	r3, [pc, #232]	; (800fbe4 <__mdiff+0x10c>)
 800fafa:	4602      	mov	r2, r0
 800fafc:	f240 2132 	movw	r1, #562	; 0x232
 800fb00:	4839      	ldr	r0, [pc, #228]	; (800fbe8 <__mdiff+0x110>)
 800fb02:	f000 fc1f 	bl	8010344 <__assert_func>
 800fb06:	2301      	movs	r3, #1
 800fb08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fb0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb10:	bfa4      	itt	ge
 800fb12:	4643      	movge	r3, r8
 800fb14:	46a0      	movge	r8, r4
 800fb16:	4630      	mov	r0, r6
 800fb18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fb1c:	bfa6      	itte	ge
 800fb1e:	461c      	movge	r4, r3
 800fb20:	2500      	movge	r5, #0
 800fb22:	2501      	movlt	r5, #1
 800fb24:	f7ff fd3a 	bl	800f59c <_Balloc>
 800fb28:	b920      	cbnz	r0, 800fb34 <__mdiff+0x5c>
 800fb2a:	4b2e      	ldr	r3, [pc, #184]	; (800fbe4 <__mdiff+0x10c>)
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fb32:	e7e5      	b.n	800fb00 <__mdiff+0x28>
 800fb34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fb38:	6926      	ldr	r6, [r4, #16]
 800fb3a:	60c5      	str	r5, [r0, #12]
 800fb3c:	f104 0914 	add.w	r9, r4, #20
 800fb40:	f108 0514 	add.w	r5, r8, #20
 800fb44:	f100 0e14 	add.w	lr, r0, #20
 800fb48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fb4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fb50:	f108 0210 	add.w	r2, r8, #16
 800fb54:	46f2      	mov	sl, lr
 800fb56:	2100      	movs	r1, #0
 800fb58:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fb60:	fa1f f883 	uxth.w	r8, r3
 800fb64:	fa11 f18b 	uxtah	r1, r1, fp
 800fb68:	0c1b      	lsrs	r3, r3, #16
 800fb6a:	eba1 0808 	sub.w	r8, r1, r8
 800fb6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb76:	fa1f f888 	uxth.w	r8, r8
 800fb7a:	1419      	asrs	r1, r3, #16
 800fb7c:	454e      	cmp	r6, r9
 800fb7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb82:	f84a 3b04 	str.w	r3, [sl], #4
 800fb86:	d8e7      	bhi.n	800fb58 <__mdiff+0x80>
 800fb88:	1b33      	subs	r3, r6, r4
 800fb8a:	3b15      	subs	r3, #21
 800fb8c:	f023 0303 	bic.w	r3, r3, #3
 800fb90:	3304      	adds	r3, #4
 800fb92:	3415      	adds	r4, #21
 800fb94:	42a6      	cmp	r6, r4
 800fb96:	bf38      	it	cc
 800fb98:	2304      	movcc	r3, #4
 800fb9a:	441d      	add	r5, r3
 800fb9c:	4473      	add	r3, lr
 800fb9e:	469e      	mov	lr, r3
 800fba0:	462e      	mov	r6, r5
 800fba2:	4566      	cmp	r6, ip
 800fba4:	d30e      	bcc.n	800fbc4 <__mdiff+0xec>
 800fba6:	f10c 0203 	add.w	r2, ip, #3
 800fbaa:	1b52      	subs	r2, r2, r5
 800fbac:	f022 0203 	bic.w	r2, r2, #3
 800fbb0:	3d03      	subs	r5, #3
 800fbb2:	45ac      	cmp	ip, r5
 800fbb4:	bf38      	it	cc
 800fbb6:	2200      	movcc	r2, #0
 800fbb8:	441a      	add	r2, r3
 800fbba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fbbe:	b17b      	cbz	r3, 800fbe0 <__mdiff+0x108>
 800fbc0:	6107      	str	r7, [r0, #16]
 800fbc2:	e7a3      	b.n	800fb0c <__mdiff+0x34>
 800fbc4:	f856 8b04 	ldr.w	r8, [r6], #4
 800fbc8:	fa11 f288 	uxtah	r2, r1, r8
 800fbcc:	1414      	asrs	r4, r2, #16
 800fbce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fbd2:	b292      	uxth	r2, r2
 800fbd4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fbd8:	f84e 2b04 	str.w	r2, [lr], #4
 800fbdc:	1421      	asrs	r1, r4, #16
 800fbde:	e7e0      	b.n	800fba2 <__mdiff+0xca>
 800fbe0:	3f01      	subs	r7, #1
 800fbe2:	e7ea      	b.n	800fbba <__mdiff+0xe2>
 800fbe4:	0801ca07 	.word	0x0801ca07
 800fbe8:	0801ca78 	.word	0x0801ca78

0800fbec <__d2b>:
 800fbec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fbf0:	4689      	mov	r9, r1
 800fbf2:	2101      	movs	r1, #1
 800fbf4:	ec57 6b10 	vmov	r6, r7, d0
 800fbf8:	4690      	mov	r8, r2
 800fbfa:	f7ff fccf 	bl	800f59c <_Balloc>
 800fbfe:	4604      	mov	r4, r0
 800fc00:	b930      	cbnz	r0, 800fc10 <__d2b+0x24>
 800fc02:	4602      	mov	r2, r0
 800fc04:	4b25      	ldr	r3, [pc, #148]	; (800fc9c <__d2b+0xb0>)
 800fc06:	4826      	ldr	r0, [pc, #152]	; (800fca0 <__d2b+0xb4>)
 800fc08:	f240 310a 	movw	r1, #778	; 0x30a
 800fc0c:	f000 fb9a 	bl	8010344 <__assert_func>
 800fc10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fc14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fc18:	bb35      	cbnz	r5, 800fc68 <__d2b+0x7c>
 800fc1a:	2e00      	cmp	r6, #0
 800fc1c:	9301      	str	r3, [sp, #4]
 800fc1e:	d028      	beq.n	800fc72 <__d2b+0x86>
 800fc20:	4668      	mov	r0, sp
 800fc22:	9600      	str	r6, [sp, #0]
 800fc24:	f7ff fd82 	bl	800f72c <__lo0bits>
 800fc28:	9900      	ldr	r1, [sp, #0]
 800fc2a:	b300      	cbz	r0, 800fc6e <__d2b+0x82>
 800fc2c:	9a01      	ldr	r2, [sp, #4]
 800fc2e:	f1c0 0320 	rsb	r3, r0, #32
 800fc32:	fa02 f303 	lsl.w	r3, r2, r3
 800fc36:	430b      	orrs	r3, r1
 800fc38:	40c2      	lsrs	r2, r0
 800fc3a:	6163      	str	r3, [r4, #20]
 800fc3c:	9201      	str	r2, [sp, #4]
 800fc3e:	9b01      	ldr	r3, [sp, #4]
 800fc40:	61a3      	str	r3, [r4, #24]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	bf14      	ite	ne
 800fc46:	2202      	movne	r2, #2
 800fc48:	2201      	moveq	r2, #1
 800fc4a:	6122      	str	r2, [r4, #16]
 800fc4c:	b1d5      	cbz	r5, 800fc84 <__d2b+0x98>
 800fc4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fc52:	4405      	add	r5, r0
 800fc54:	f8c9 5000 	str.w	r5, [r9]
 800fc58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc5c:	f8c8 0000 	str.w	r0, [r8]
 800fc60:	4620      	mov	r0, r4
 800fc62:	b003      	add	sp, #12
 800fc64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc6c:	e7d5      	b.n	800fc1a <__d2b+0x2e>
 800fc6e:	6161      	str	r1, [r4, #20]
 800fc70:	e7e5      	b.n	800fc3e <__d2b+0x52>
 800fc72:	a801      	add	r0, sp, #4
 800fc74:	f7ff fd5a 	bl	800f72c <__lo0bits>
 800fc78:	9b01      	ldr	r3, [sp, #4]
 800fc7a:	6163      	str	r3, [r4, #20]
 800fc7c:	2201      	movs	r2, #1
 800fc7e:	6122      	str	r2, [r4, #16]
 800fc80:	3020      	adds	r0, #32
 800fc82:	e7e3      	b.n	800fc4c <__d2b+0x60>
 800fc84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc8c:	f8c9 0000 	str.w	r0, [r9]
 800fc90:	6918      	ldr	r0, [r3, #16]
 800fc92:	f7ff fd2b 	bl	800f6ec <__hi0bits>
 800fc96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fc9a:	e7df      	b.n	800fc5c <__d2b+0x70>
 800fc9c:	0801ca07 	.word	0x0801ca07
 800fca0:	0801ca78 	.word	0x0801ca78

0800fca4 <_calloc_r>:
 800fca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fca6:	fba1 2402 	umull	r2, r4, r1, r2
 800fcaa:	b94c      	cbnz	r4, 800fcc0 <_calloc_r+0x1c>
 800fcac:	4611      	mov	r1, r2
 800fcae:	9201      	str	r2, [sp, #4]
 800fcb0:	f7fd fd52 	bl	800d758 <_malloc_r>
 800fcb4:	9a01      	ldr	r2, [sp, #4]
 800fcb6:	4605      	mov	r5, r0
 800fcb8:	b930      	cbnz	r0, 800fcc8 <_calloc_r+0x24>
 800fcba:	4628      	mov	r0, r5
 800fcbc:	b003      	add	sp, #12
 800fcbe:	bd30      	pop	{r4, r5, pc}
 800fcc0:	220c      	movs	r2, #12
 800fcc2:	6002      	str	r2, [r0, #0]
 800fcc4:	2500      	movs	r5, #0
 800fcc6:	e7f8      	b.n	800fcba <_calloc_r+0x16>
 800fcc8:	4621      	mov	r1, r4
 800fcca:	f7fd fcd1 	bl	800d670 <memset>
 800fcce:	e7f4      	b.n	800fcba <_calloc_r+0x16>

0800fcd0 <_realloc_r>:
 800fcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd4:	4680      	mov	r8, r0
 800fcd6:	4614      	mov	r4, r2
 800fcd8:	460e      	mov	r6, r1
 800fcda:	b921      	cbnz	r1, 800fce6 <_realloc_r+0x16>
 800fcdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fce0:	4611      	mov	r1, r2
 800fce2:	f7fd bd39 	b.w	800d758 <_malloc_r>
 800fce6:	b92a      	cbnz	r2, 800fcf4 <_realloc_r+0x24>
 800fce8:	f7fd fcca 	bl	800d680 <_free_r>
 800fcec:	4625      	mov	r5, r4
 800fcee:	4628      	mov	r0, r5
 800fcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcf4:	f000 fbc6 	bl	8010484 <_malloc_usable_size_r>
 800fcf8:	4284      	cmp	r4, r0
 800fcfa:	4607      	mov	r7, r0
 800fcfc:	d802      	bhi.n	800fd04 <_realloc_r+0x34>
 800fcfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fd02:	d812      	bhi.n	800fd2a <_realloc_r+0x5a>
 800fd04:	4621      	mov	r1, r4
 800fd06:	4640      	mov	r0, r8
 800fd08:	f7fd fd26 	bl	800d758 <_malloc_r>
 800fd0c:	4605      	mov	r5, r0
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	d0ed      	beq.n	800fcee <_realloc_r+0x1e>
 800fd12:	42bc      	cmp	r4, r7
 800fd14:	4622      	mov	r2, r4
 800fd16:	4631      	mov	r1, r6
 800fd18:	bf28      	it	cs
 800fd1a:	463a      	movcs	r2, r7
 800fd1c:	f7fd fc9a 	bl	800d654 <memcpy>
 800fd20:	4631      	mov	r1, r6
 800fd22:	4640      	mov	r0, r8
 800fd24:	f7fd fcac 	bl	800d680 <_free_r>
 800fd28:	e7e1      	b.n	800fcee <_realloc_r+0x1e>
 800fd2a:	4635      	mov	r5, r6
 800fd2c:	e7df      	b.n	800fcee <_realloc_r+0x1e>

0800fd2e <__ssputs_r>:
 800fd2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd32:	688e      	ldr	r6, [r1, #8]
 800fd34:	429e      	cmp	r6, r3
 800fd36:	4682      	mov	sl, r0
 800fd38:	460c      	mov	r4, r1
 800fd3a:	4690      	mov	r8, r2
 800fd3c:	461f      	mov	r7, r3
 800fd3e:	d838      	bhi.n	800fdb2 <__ssputs_r+0x84>
 800fd40:	898a      	ldrh	r2, [r1, #12]
 800fd42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fd46:	d032      	beq.n	800fdae <__ssputs_r+0x80>
 800fd48:	6825      	ldr	r5, [r4, #0]
 800fd4a:	6909      	ldr	r1, [r1, #16]
 800fd4c:	eba5 0901 	sub.w	r9, r5, r1
 800fd50:	6965      	ldr	r5, [r4, #20]
 800fd52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd5a:	3301      	adds	r3, #1
 800fd5c:	444b      	add	r3, r9
 800fd5e:	106d      	asrs	r5, r5, #1
 800fd60:	429d      	cmp	r5, r3
 800fd62:	bf38      	it	cc
 800fd64:	461d      	movcc	r5, r3
 800fd66:	0553      	lsls	r3, r2, #21
 800fd68:	d531      	bpl.n	800fdce <__ssputs_r+0xa0>
 800fd6a:	4629      	mov	r1, r5
 800fd6c:	f7fd fcf4 	bl	800d758 <_malloc_r>
 800fd70:	4606      	mov	r6, r0
 800fd72:	b950      	cbnz	r0, 800fd8a <__ssputs_r+0x5c>
 800fd74:	230c      	movs	r3, #12
 800fd76:	f8ca 3000 	str.w	r3, [sl]
 800fd7a:	89a3      	ldrh	r3, [r4, #12]
 800fd7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd80:	81a3      	strh	r3, [r4, #12]
 800fd82:	f04f 30ff 	mov.w	r0, #4294967295
 800fd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd8a:	6921      	ldr	r1, [r4, #16]
 800fd8c:	464a      	mov	r2, r9
 800fd8e:	f7fd fc61 	bl	800d654 <memcpy>
 800fd92:	89a3      	ldrh	r3, [r4, #12]
 800fd94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fd98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd9c:	81a3      	strh	r3, [r4, #12]
 800fd9e:	6126      	str	r6, [r4, #16]
 800fda0:	6165      	str	r5, [r4, #20]
 800fda2:	444e      	add	r6, r9
 800fda4:	eba5 0509 	sub.w	r5, r5, r9
 800fda8:	6026      	str	r6, [r4, #0]
 800fdaa:	60a5      	str	r5, [r4, #8]
 800fdac:	463e      	mov	r6, r7
 800fdae:	42be      	cmp	r6, r7
 800fdb0:	d900      	bls.n	800fdb4 <__ssputs_r+0x86>
 800fdb2:	463e      	mov	r6, r7
 800fdb4:	6820      	ldr	r0, [r4, #0]
 800fdb6:	4632      	mov	r2, r6
 800fdb8:	4641      	mov	r1, r8
 800fdba:	f000 fb49 	bl	8010450 <memmove>
 800fdbe:	68a3      	ldr	r3, [r4, #8]
 800fdc0:	1b9b      	subs	r3, r3, r6
 800fdc2:	60a3      	str	r3, [r4, #8]
 800fdc4:	6823      	ldr	r3, [r4, #0]
 800fdc6:	4433      	add	r3, r6
 800fdc8:	6023      	str	r3, [r4, #0]
 800fdca:	2000      	movs	r0, #0
 800fdcc:	e7db      	b.n	800fd86 <__ssputs_r+0x58>
 800fdce:	462a      	mov	r2, r5
 800fdd0:	f7ff ff7e 	bl	800fcd0 <_realloc_r>
 800fdd4:	4606      	mov	r6, r0
 800fdd6:	2800      	cmp	r0, #0
 800fdd8:	d1e1      	bne.n	800fd9e <__ssputs_r+0x70>
 800fdda:	6921      	ldr	r1, [r4, #16]
 800fddc:	4650      	mov	r0, sl
 800fdde:	f7fd fc4f 	bl	800d680 <_free_r>
 800fde2:	e7c7      	b.n	800fd74 <__ssputs_r+0x46>

0800fde4 <_svfiprintf_r>:
 800fde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde8:	4698      	mov	r8, r3
 800fdea:	898b      	ldrh	r3, [r1, #12]
 800fdec:	061b      	lsls	r3, r3, #24
 800fdee:	b09d      	sub	sp, #116	; 0x74
 800fdf0:	4607      	mov	r7, r0
 800fdf2:	460d      	mov	r5, r1
 800fdf4:	4614      	mov	r4, r2
 800fdf6:	d50e      	bpl.n	800fe16 <_svfiprintf_r+0x32>
 800fdf8:	690b      	ldr	r3, [r1, #16]
 800fdfa:	b963      	cbnz	r3, 800fe16 <_svfiprintf_r+0x32>
 800fdfc:	2140      	movs	r1, #64	; 0x40
 800fdfe:	f7fd fcab 	bl	800d758 <_malloc_r>
 800fe02:	6028      	str	r0, [r5, #0]
 800fe04:	6128      	str	r0, [r5, #16]
 800fe06:	b920      	cbnz	r0, 800fe12 <_svfiprintf_r+0x2e>
 800fe08:	230c      	movs	r3, #12
 800fe0a:	603b      	str	r3, [r7, #0]
 800fe0c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe10:	e0d1      	b.n	800ffb6 <_svfiprintf_r+0x1d2>
 800fe12:	2340      	movs	r3, #64	; 0x40
 800fe14:	616b      	str	r3, [r5, #20]
 800fe16:	2300      	movs	r3, #0
 800fe18:	9309      	str	r3, [sp, #36]	; 0x24
 800fe1a:	2320      	movs	r3, #32
 800fe1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe20:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe24:	2330      	movs	r3, #48	; 0x30
 800fe26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ffd0 <_svfiprintf_r+0x1ec>
 800fe2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe2e:	f04f 0901 	mov.w	r9, #1
 800fe32:	4623      	mov	r3, r4
 800fe34:	469a      	mov	sl, r3
 800fe36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe3a:	b10a      	cbz	r2, 800fe40 <_svfiprintf_r+0x5c>
 800fe3c:	2a25      	cmp	r2, #37	; 0x25
 800fe3e:	d1f9      	bne.n	800fe34 <_svfiprintf_r+0x50>
 800fe40:	ebba 0b04 	subs.w	fp, sl, r4
 800fe44:	d00b      	beq.n	800fe5e <_svfiprintf_r+0x7a>
 800fe46:	465b      	mov	r3, fp
 800fe48:	4622      	mov	r2, r4
 800fe4a:	4629      	mov	r1, r5
 800fe4c:	4638      	mov	r0, r7
 800fe4e:	f7ff ff6e 	bl	800fd2e <__ssputs_r>
 800fe52:	3001      	adds	r0, #1
 800fe54:	f000 80aa 	beq.w	800ffac <_svfiprintf_r+0x1c8>
 800fe58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe5a:	445a      	add	r2, fp
 800fe5c:	9209      	str	r2, [sp, #36]	; 0x24
 800fe5e:	f89a 3000 	ldrb.w	r3, [sl]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f000 80a2 	beq.w	800ffac <_svfiprintf_r+0x1c8>
 800fe68:	2300      	movs	r3, #0
 800fe6a:	f04f 32ff 	mov.w	r2, #4294967295
 800fe6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe72:	f10a 0a01 	add.w	sl, sl, #1
 800fe76:	9304      	str	r3, [sp, #16]
 800fe78:	9307      	str	r3, [sp, #28]
 800fe7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe7e:	931a      	str	r3, [sp, #104]	; 0x68
 800fe80:	4654      	mov	r4, sl
 800fe82:	2205      	movs	r2, #5
 800fe84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe88:	4851      	ldr	r0, [pc, #324]	; (800ffd0 <_svfiprintf_r+0x1ec>)
 800fe8a:	f7f0 f9a9 	bl	80001e0 <memchr>
 800fe8e:	9a04      	ldr	r2, [sp, #16]
 800fe90:	b9d8      	cbnz	r0, 800feca <_svfiprintf_r+0xe6>
 800fe92:	06d0      	lsls	r0, r2, #27
 800fe94:	bf44      	itt	mi
 800fe96:	2320      	movmi	r3, #32
 800fe98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe9c:	0711      	lsls	r1, r2, #28
 800fe9e:	bf44      	itt	mi
 800fea0:	232b      	movmi	r3, #43	; 0x2b
 800fea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fea6:	f89a 3000 	ldrb.w	r3, [sl]
 800feaa:	2b2a      	cmp	r3, #42	; 0x2a
 800feac:	d015      	beq.n	800feda <_svfiprintf_r+0xf6>
 800feae:	9a07      	ldr	r2, [sp, #28]
 800feb0:	4654      	mov	r4, sl
 800feb2:	2000      	movs	r0, #0
 800feb4:	f04f 0c0a 	mov.w	ip, #10
 800feb8:	4621      	mov	r1, r4
 800feba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800febe:	3b30      	subs	r3, #48	; 0x30
 800fec0:	2b09      	cmp	r3, #9
 800fec2:	d94e      	bls.n	800ff62 <_svfiprintf_r+0x17e>
 800fec4:	b1b0      	cbz	r0, 800fef4 <_svfiprintf_r+0x110>
 800fec6:	9207      	str	r2, [sp, #28]
 800fec8:	e014      	b.n	800fef4 <_svfiprintf_r+0x110>
 800feca:	eba0 0308 	sub.w	r3, r0, r8
 800fece:	fa09 f303 	lsl.w	r3, r9, r3
 800fed2:	4313      	orrs	r3, r2
 800fed4:	9304      	str	r3, [sp, #16]
 800fed6:	46a2      	mov	sl, r4
 800fed8:	e7d2      	b.n	800fe80 <_svfiprintf_r+0x9c>
 800feda:	9b03      	ldr	r3, [sp, #12]
 800fedc:	1d19      	adds	r1, r3, #4
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	9103      	str	r1, [sp, #12]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	bfbb      	ittet	lt
 800fee6:	425b      	neglt	r3, r3
 800fee8:	f042 0202 	orrlt.w	r2, r2, #2
 800feec:	9307      	strge	r3, [sp, #28]
 800feee:	9307      	strlt	r3, [sp, #28]
 800fef0:	bfb8      	it	lt
 800fef2:	9204      	strlt	r2, [sp, #16]
 800fef4:	7823      	ldrb	r3, [r4, #0]
 800fef6:	2b2e      	cmp	r3, #46	; 0x2e
 800fef8:	d10c      	bne.n	800ff14 <_svfiprintf_r+0x130>
 800fefa:	7863      	ldrb	r3, [r4, #1]
 800fefc:	2b2a      	cmp	r3, #42	; 0x2a
 800fefe:	d135      	bne.n	800ff6c <_svfiprintf_r+0x188>
 800ff00:	9b03      	ldr	r3, [sp, #12]
 800ff02:	1d1a      	adds	r2, r3, #4
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	9203      	str	r2, [sp, #12]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	bfb8      	it	lt
 800ff0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff10:	3402      	adds	r4, #2
 800ff12:	9305      	str	r3, [sp, #20]
 800ff14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ffe0 <_svfiprintf_r+0x1fc>
 800ff18:	7821      	ldrb	r1, [r4, #0]
 800ff1a:	2203      	movs	r2, #3
 800ff1c:	4650      	mov	r0, sl
 800ff1e:	f7f0 f95f 	bl	80001e0 <memchr>
 800ff22:	b140      	cbz	r0, 800ff36 <_svfiprintf_r+0x152>
 800ff24:	2340      	movs	r3, #64	; 0x40
 800ff26:	eba0 000a 	sub.w	r0, r0, sl
 800ff2a:	fa03 f000 	lsl.w	r0, r3, r0
 800ff2e:	9b04      	ldr	r3, [sp, #16]
 800ff30:	4303      	orrs	r3, r0
 800ff32:	3401      	adds	r4, #1
 800ff34:	9304      	str	r3, [sp, #16]
 800ff36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff3a:	4826      	ldr	r0, [pc, #152]	; (800ffd4 <_svfiprintf_r+0x1f0>)
 800ff3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff40:	2206      	movs	r2, #6
 800ff42:	f7f0 f94d 	bl	80001e0 <memchr>
 800ff46:	2800      	cmp	r0, #0
 800ff48:	d038      	beq.n	800ffbc <_svfiprintf_r+0x1d8>
 800ff4a:	4b23      	ldr	r3, [pc, #140]	; (800ffd8 <_svfiprintf_r+0x1f4>)
 800ff4c:	bb1b      	cbnz	r3, 800ff96 <_svfiprintf_r+0x1b2>
 800ff4e:	9b03      	ldr	r3, [sp, #12]
 800ff50:	3307      	adds	r3, #7
 800ff52:	f023 0307 	bic.w	r3, r3, #7
 800ff56:	3308      	adds	r3, #8
 800ff58:	9303      	str	r3, [sp, #12]
 800ff5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff5c:	4433      	add	r3, r6
 800ff5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ff60:	e767      	b.n	800fe32 <_svfiprintf_r+0x4e>
 800ff62:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff66:	460c      	mov	r4, r1
 800ff68:	2001      	movs	r0, #1
 800ff6a:	e7a5      	b.n	800feb8 <_svfiprintf_r+0xd4>
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	3401      	adds	r4, #1
 800ff70:	9305      	str	r3, [sp, #20]
 800ff72:	4619      	mov	r1, r3
 800ff74:	f04f 0c0a 	mov.w	ip, #10
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff7e:	3a30      	subs	r2, #48	; 0x30
 800ff80:	2a09      	cmp	r2, #9
 800ff82:	d903      	bls.n	800ff8c <_svfiprintf_r+0x1a8>
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d0c5      	beq.n	800ff14 <_svfiprintf_r+0x130>
 800ff88:	9105      	str	r1, [sp, #20]
 800ff8a:	e7c3      	b.n	800ff14 <_svfiprintf_r+0x130>
 800ff8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff90:	4604      	mov	r4, r0
 800ff92:	2301      	movs	r3, #1
 800ff94:	e7f0      	b.n	800ff78 <_svfiprintf_r+0x194>
 800ff96:	ab03      	add	r3, sp, #12
 800ff98:	9300      	str	r3, [sp, #0]
 800ff9a:	462a      	mov	r2, r5
 800ff9c:	4b0f      	ldr	r3, [pc, #60]	; (800ffdc <_svfiprintf_r+0x1f8>)
 800ff9e:	a904      	add	r1, sp, #16
 800ffa0:	4638      	mov	r0, r7
 800ffa2:	f7fd fced 	bl	800d980 <_printf_float>
 800ffa6:	1c42      	adds	r2, r0, #1
 800ffa8:	4606      	mov	r6, r0
 800ffaa:	d1d6      	bne.n	800ff5a <_svfiprintf_r+0x176>
 800ffac:	89ab      	ldrh	r3, [r5, #12]
 800ffae:	065b      	lsls	r3, r3, #25
 800ffb0:	f53f af2c 	bmi.w	800fe0c <_svfiprintf_r+0x28>
 800ffb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ffb6:	b01d      	add	sp, #116	; 0x74
 800ffb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffbc:	ab03      	add	r3, sp, #12
 800ffbe:	9300      	str	r3, [sp, #0]
 800ffc0:	462a      	mov	r2, r5
 800ffc2:	4b06      	ldr	r3, [pc, #24]	; (800ffdc <_svfiprintf_r+0x1f8>)
 800ffc4:	a904      	add	r1, sp, #16
 800ffc6:	4638      	mov	r0, r7
 800ffc8:	f7fd ff7e 	bl	800dec8 <_printf_i>
 800ffcc:	e7eb      	b.n	800ffa6 <_svfiprintf_r+0x1c2>
 800ffce:	bf00      	nop
 800ffd0:	0801cbd4 	.word	0x0801cbd4
 800ffd4:	0801cbde 	.word	0x0801cbde
 800ffd8:	0800d981 	.word	0x0800d981
 800ffdc:	0800fd2f 	.word	0x0800fd2f
 800ffe0:	0801cbda 	.word	0x0801cbda

0800ffe4 <__sfputc_r>:
 800ffe4:	6893      	ldr	r3, [r2, #8]
 800ffe6:	3b01      	subs	r3, #1
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	b410      	push	{r4}
 800ffec:	6093      	str	r3, [r2, #8]
 800ffee:	da08      	bge.n	8010002 <__sfputc_r+0x1e>
 800fff0:	6994      	ldr	r4, [r2, #24]
 800fff2:	42a3      	cmp	r3, r4
 800fff4:	db01      	blt.n	800fffa <__sfputc_r+0x16>
 800fff6:	290a      	cmp	r1, #10
 800fff8:	d103      	bne.n	8010002 <__sfputc_r+0x1e>
 800fffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fffe:	f7fe b963 	b.w	800e2c8 <__swbuf_r>
 8010002:	6813      	ldr	r3, [r2, #0]
 8010004:	1c58      	adds	r0, r3, #1
 8010006:	6010      	str	r0, [r2, #0]
 8010008:	7019      	strb	r1, [r3, #0]
 801000a:	4608      	mov	r0, r1
 801000c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010010:	4770      	bx	lr

08010012 <__sfputs_r>:
 8010012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010014:	4606      	mov	r6, r0
 8010016:	460f      	mov	r7, r1
 8010018:	4614      	mov	r4, r2
 801001a:	18d5      	adds	r5, r2, r3
 801001c:	42ac      	cmp	r4, r5
 801001e:	d101      	bne.n	8010024 <__sfputs_r+0x12>
 8010020:	2000      	movs	r0, #0
 8010022:	e007      	b.n	8010034 <__sfputs_r+0x22>
 8010024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010028:	463a      	mov	r2, r7
 801002a:	4630      	mov	r0, r6
 801002c:	f7ff ffda 	bl	800ffe4 <__sfputc_r>
 8010030:	1c43      	adds	r3, r0, #1
 8010032:	d1f3      	bne.n	801001c <__sfputs_r+0xa>
 8010034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010038 <_vfiprintf_r>:
 8010038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801003c:	460d      	mov	r5, r1
 801003e:	b09d      	sub	sp, #116	; 0x74
 8010040:	4614      	mov	r4, r2
 8010042:	4698      	mov	r8, r3
 8010044:	4606      	mov	r6, r0
 8010046:	b118      	cbz	r0, 8010050 <_vfiprintf_r+0x18>
 8010048:	6983      	ldr	r3, [r0, #24]
 801004a:	b90b      	cbnz	r3, 8010050 <_vfiprintf_r+0x18>
 801004c:	f7ff f990 	bl	800f370 <__sinit>
 8010050:	4b89      	ldr	r3, [pc, #548]	; (8010278 <_vfiprintf_r+0x240>)
 8010052:	429d      	cmp	r5, r3
 8010054:	d11b      	bne.n	801008e <_vfiprintf_r+0x56>
 8010056:	6875      	ldr	r5, [r6, #4]
 8010058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801005a:	07d9      	lsls	r1, r3, #31
 801005c:	d405      	bmi.n	801006a <_vfiprintf_r+0x32>
 801005e:	89ab      	ldrh	r3, [r5, #12]
 8010060:	059a      	lsls	r2, r3, #22
 8010062:	d402      	bmi.n	801006a <_vfiprintf_r+0x32>
 8010064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010066:	f7ff fa26 	bl	800f4b6 <__retarget_lock_acquire_recursive>
 801006a:	89ab      	ldrh	r3, [r5, #12]
 801006c:	071b      	lsls	r3, r3, #28
 801006e:	d501      	bpl.n	8010074 <_vfiprintf_r+0x3c>
 8010070:	692b      	ldr	r3, [r5, #16]
 8010072:	b9eb      	cbnz	r3, 80100b0 <_vfiprintf_r+0x78>
 8010074:	4629      	mov	r1, r5
 8010076:	4630      	mov	r0, r6
 8010078:	f7fe f978 	bl	800e36c <__swsetup_r>
 801007c:	b1c0      	cbz	r0, 80100b0 <_vfiprintf_r+0x78>
 801007e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010080:	07dc      	lsls	r4, r3, #31
 8010082:	d50e      	bpl.n	80100a2 <_vfiprintf_r+0x6a>
 8010084:	f04f 30ff 	mov.w	r0, #4294967295
 8010088:	b01d      	add	sp, #116	; 0x74
 801008a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801008e:	4b7b      	ldr	r3, [pc, #492]	; (801027c <_vfiprintf_r+0x244>)
 8010090:	429d      	cmp	r5, r3
 8010092:	d101      	bne.n	8010098 <_vfiprintf_r+0x60>
 8010094:	68b5      	ldr	r5, [r6, #8]
 8010096:	e7df      	b.n	8010058 <_vfiprintf_r+0x20>
 8010098:	4b79      	ldr	r3, [pc, #484]	; (8010280 <_vfiprintf_r+0x248>)
 801009a:	429d      	cmp	r5, r3
 801009c:	bf08      	it	eq
 801009e:	68f5      	ldreq	r5, [r6, #12]
 80100a0:	e7da      	b.n	8010058 <_vfiprintf_r+0x20>
 80100a2:	89ab      	ldrh	r3, [r5, #12]
 80100a4:	0598      	lsls	r0, r3, #22
 80100a6:	d4ed      	bmi.n	8010084 <_vfiprintf_r+0x4c>
 80100a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100aa:	f7ff fa05 	bl	800f4b8 <__retarget_lock_release_recursive>
 80100ae:	e7e9      	b.n	8010084 <_vfiprintf_r+0x4c>
 80100b0:	2300      	movs	r3, #0
 80100b2:	9309      	str	r3, [sp, #36]	; 0x24
 80100b4:	2320      	movs	r3, #32
 80100b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80100be:	2330      	movs	r3, #48	; 0x30
 80100c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010284 <_vfiprintf_r+0x24c>
 80100c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80100c8:	f04f 0901 	mov.w	r9, #1
 80100cc:	4623      	mov	r3, r4
 80100ce:	469a      	mov	sl, r3
 80100d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100d4:	b10a      	cbz	r2, 80100da <_vfiprintf_r+0xa2>
 80100d6:	2a25      	cmp	r2, #37	; 0x25
 80100d8:	d1f9      	bne.n	80100ce <_vfiprintf_r+0x96>
 80100da:	ebba 0b04 	subs.w	fp, sl, r4
 80100de:	d00b      	beq.n	80100f8 <_vfiprintf_r+0xc0>
 80100e0:	465b      	mov	r3, fp
 80100e2:	4622      	mov	r2, r4
 80100e4:	4629      	mov	r1, r5
 80100e6:	4630      	mov	r0, r6
 80100e8:	f7ff ff93 	bl	8010012 <__sfputs_r>
 80100ec:	3001      	adds	r0, #1
 80100ee:	f000 80aa 	beq.w	8010246 <_vfiprintf_r+0x20e>
 80100f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100f4:	445a      	add	r2, fp
 80100f6:	9209      	str	r2, [sp, #36]	; 0x24
 80100f8:	f89a 3000 	ldrb.w	r3, [sl]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	f000 80a2 	beq.w	8010246 <_vfiprintf_r+0x20e>
 8010102:	2300      	movs	r3, #0
 8010104:	f04f 32ff 	mov.w	r2, #4294967295
 8010108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801010c:	f10a 0a01 	add.w	sl, sl, #1
 8010110:	9304      	str	r3, [sp, #16]
 8010112:	9307      	str	r3, [sp, #28]
 8010114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010118:	931a      	str	r3, [sp, #104]	; 0x68
 801011a:	4654      	mov	r4, sl
 801011c:	2205      	movs	r2, #5
 801011e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010122:	4858      	ldr	r0, [pc, #352]	; (8010284 <_vfiprintf_r+0x24c>)
 8010124:	f7f0 f85c 	bl	80001e0 <memchr>
 8010128:	9a04      	ldr	r2, [sp, #16]
 801012a:	b9d8      	cbnz	r0, 8010164 <_vfiprintf_r+0x12c>
 801012c:	06d1      	lsls	r1, r2, #27
 801012e:	bf44      	itt	mi
 8010130:	2320      	movmi	r3, #32
 8010132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010136:	0713      	lsls	r3, r2, #28
 8010138:	bf44      	itt	mi
 801013a:	232b      	movmi	r3, #43	; 0x2b
 801013c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010140:	f89a 3000 	ldrb.w	r3, [sl]
 8010144:	2b2a      	cmp	r3, #42	; 0x2a
 8010146:	d015      	beq.n	8010174 <_vfiprintf_r+0x13c>
 8010148:	9a07      	ldr	r2, [sp, #28]
 801014a:	4654      	mov	r4, sl
 801014c:	2000      	movs	r0, #0
 801014e:	f04f 0c0a 	mov.w	ip, #10
 8010152:	4621      	mov	r1, r4
 8010154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010158:	3b30      	subs	r3, #48	; 0x30
 801015a:	2b09      	cmp	r3, #9
 801015c:	d94e      	bls.n	80101fc <_vfiprintf_r+0x1c4>
 801015e:	b1b0      	cbz	r0, 801018e <_vfiprintf_r+0x156>
 8010160:	9207      	str	r2, [sp, #28]
 8010162:	e014      	b.n	801018e <_vfiprintf_r+0x156>
 8010164:	eba0 0308 	sub.w	r3, r0, r8
 8010168:	fa09 f303 	lsl.w	r3, r9, r3
 801016c:	4313      	orrs	r3, r2
 801016e:	9304      	str	r3, [sp, #16]
 8010170:	46a2      	mov	sl, r4
 8010172:	e7d2      	b.n	801011a <_vfiprintf_r+0xe2>
 8010174:	9b03      	ldr	r3, [sp, #12]
 8010176:	1d19      	adds	r1, r3, #4
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	9103      	str	r1, [sp, #12]
 801017c:	2b00      	cmp	r3, #0
 801017e:	bfbb      	ittet	lt
 8010180:	425b      	neglt	r3, r3
 8010182:	f042 0202 	orrlt.w	r2, r2, #2
 8010186:	9307      	strge	r3, [sp, #28]
 8010188:	9307      	strlt	r3, [sp, #28]
 801018a:	bfb8      	it	lt
 801018c:	9204      	strlt	r2, [sp, #16]
 801018e:	7823      	ldrb	r3, [r4, #0]
 8010190:	2b2e      	cmp	r3, #46	; 0x2e
 8010192:	d10c      	bne.n	80101ae <_vfiprintf_r+0x176>
 8010194:	7863      	ldrb	r3, [r4, #1]
 8010196:	2b2a      	cmp	r3, #42	; 0x2a
 8010198:	d135      	bne.n	8010206 <_vfiprintf_r+0x1ce>
 801019a:	9b03      	ldr	r3, [sp, #12]
 801019c:	1d1a      	adds	r2, r3, #4
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	9203      	str	r2, [sp, #12]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	bfb8      	it	lt
 80101a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80101aa:	3402      	adds	r4, #2
 80101ac:	9305      	str	r3, [sp, #20]
 80101ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010294 <_vfiprintf_r+0x25c>
 80101b2:	7821      	ldrb	r1, [r4, #0]
 80101b4:	2203      	movs	r2, #3
 80101b6:	4650      	mov	r0, sl
 80101b8:	f7f0 f812 	bl	80001e0 <memchr>
 80101bc:	b140      	cbz	r0, 80101d0 <_vfiprintf_r+0x198>
 80101be:	2340      	movs	r3, #64	; 0x40
 80101c0:	eba0 000a 	sub.w	r0, r0, sl
 80101c4:	fa03 f000 	lsl.w	r0, r3, r0
 80101c8:	9b04      	ldr	r3, [sp, #16]
 80101ca:	4303      	orrs	r3, r0
 80101cc:	3401      	adds	r4, #1
 80101ce:	9304      	str	r3, [sp, #16]
 80101d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101d4:	482c      	ldr	r0, [pc, #176]	; (8010288 <_vfiprintf_r+0x250>)
 80101d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80101da:	2206      	movs	r2, #6
 80101dc:	f7f0 f800 	bl	80001e0 <memchr>
 80101e0:	2800      	cmp	r0, #0
 80101e2:	d03f      	beq.n	8010264 <_vfiprintf_r+0x22c>
 80101e4:	4b29      	ldr	r3, [pc, #164]	; (801028c <_vfiprintf_r+0x254>)
 80101e6:	bb1b      	cbnz	r3, 8010230 <_vfiprintf_r+0x1f8>
 80101e8:	9b03      	ldr	r3, [sp, #12]
 80101ea:	3307      	adds	r3, #7
 80101ec:	f023 0307 	bic.w	r3, r3, #7
 80101f0:	3308      	adds	r3, #8
 80101f2:	9303      	str	r3, [sp, #12]
 80101f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101f6:	443b      	add	r3, r7
 80101f8:	9309      	str	r3, [sp, #36]	; 0x24
 80101fa:	e767      	b.n	80100cc <_vfiprintf_r+0x94>
 80101fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8010200:	460c      	mov	r4, r1
 8010202:	2001      	movs	r0, #1
 8010204:	e7a5      	b.n	8010152 <_vfiprintf_r+0x11a>
 8010206:	2300      	movs	r3, #0
 8010208:	3401      	adds	r4, #1
 801020a:	9305      	str	r3, [sp, #20]
 801020c:	4619      	mov	r1, r3
 801020e:	f04f 0c0a 	mov.w	ip, #10
 8010212:	4620      	mov	r0, r4
 8010214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010218:	3a30      	subs	r2, #48	; 0x30
 801021a:	2a09      	cmp	r2, #9
 801021c:	d903      	bls.n	8010226 <_vfiprintf_r+0x1ee>
 801021e:	2b00      	cmp	r3, #0
 8010220:	d0c5      	beq.n	80101ae <_vfiprintf_r+0x176>
 8010222:	9105      	str	r1, [sp, #20]
 8010224:	e7c3      	b.n	80101ae <_vfiprintf_r+0x176>
 8010226:	fb0c 2101 	mla	r1, ip, r1, r2
 801022a:	4604      	mov	r4, r0
 801022c:	2301      	movs	r3, #1
 801022e:	e7f0      	b.n	8010212 <_vfiprintf_r+0x1da>
 8010230:	ab03      	add	r3, sp, #12
 8010232:	9300      	str	r3, [sp, #0]
 8010234:	462a      	mov	r2, r5
 8010236:	4b16      	ldr	r3, [pc, #88]	; (8010290 <_vfiprintf_r+0x258>)
 8010238:	a904      	add	r1, sp, #16
 801023a:	4630      	mov	r0, r6
 801023c:	f7fd fba0 	bl	800d980 <_printf_float>
 8010240:	4607      	mov	r7, r0
 8010242:	1c78      	adds	r0, r7, #1
 8010244:	d1d6      	bne.n	80101f4 <_vfiprintf_r+0x1bc>
 8010246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010248:	07d9      	lsls	r1, r3, #31
 801024a:	d405      	bmi.n	8010258 <_vfiprintf_r+0x220>
 801024c:	89ab      	ldrh	r3, [r5, #12]
 801024e:	059a      	lsls	r2, r3, #22
 8010250:	d402      	bmi.n	8010258 <_vfiprintf_r+0x220>
 8010252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010254:	f7ff f930 	bl	800f4b8 <__retarget_lock_release_recursive>
 8010258:	89ab      	ldrh	r3, [r5, #12]
 801025a:	065b      	lsls	r3, r3, #25
 801025c:	f53f af12 	bmi.w	8010084 <_vfiprintf_r+0x4c>
 8010260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010262:	e711      	b.n	8010088 <_vfiprintf_r+0x50>
 8010264:	ab03      	add	r3, sp, #12
 8010266:	9300      	str	r3, [sp, #0]
 8010268:	462a      	mov	r2, r5
 801026a:	4b09      	ldr	r3, [pc, #36]	; (8010290 <_vfiprintf_r+0x258>)
 801026c:	a904      	add	r1, sp, #16
 801026e:	4630      	mov	r0, r6
 8010270:	f7fd fe2a 	bl	800dec8 <_printf_i>
 8010274:	e7e4      	b.n	8010240 <_vfiprintf_r+0x208>
 8010276:	bf00      	nop
 8010278:	0801ca38 	.word	0x0801ca38
 801027c:	0801ca58 	.word	0x0801ca58
 8010280:	0801ca18 	.word	0x0801ca18
 8010284:	0801cbd4 	.word	0x0801cbd4
 8010288:	0801cbde 	.word	0x0801cbde
 801028c:	0800d981 	.word	0x0800d981
 8010290:	08010013 	.word	0x08010013
 8010294:	0801cbda 	.word	0x0801cbda

08010298 <__sread>:
 8010298:	b510      	push	{r4, lr}
 801029a:	460c      	mov	r4, r1
 801029c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102a0:	f000 f8f8 	bl	8010494 <_read_r>
 80102a4:	2800      	cmp	r0, #0
 80102a6:	bfab      	itete	ge
 80102a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80102aa:	89a3      	ldrhlt	r3, [r4, #12]
 80102ac:	181b      	addge	r3, r3, r0
 80102ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80102b2:	bfac      	ite	ge
 80102b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80102b6:	81a3      	strhlt	r3, [r4, #12]
 80102b8:	bd10      	pop	{r4, pc}

080102ba <__swrite>:
 80102ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102be:	461f      	mov	r7, r3
 80102c0:	898b      	ldrh	r3, [r1, #12]
 80102c2:	05db      	lsls	r3, r3, #23
 80102c4:	4605      	mov	r5, r0
 80102c6:	460c      	mov	r4, r1
 80102c8:	4616      	mov	r6, r2
 80102ca:	d505      	bpl.n	80102d8 <__swrite+0x1e>
 80102cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102d0:	2302      	movs	r3, #2
 80102d2:	2200      	movs	r2, #0
 80102d4:	f000 f898 	bl	8010408 <_lseek_r>
 80102d8:	89a3      	ldrh	r3, [r4, #12]
 80102da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80102e2:	81a3      	strh	r3, [r4, #12]
 80102e4:	4632      	mov	r2, r6
 80102e6:	463b      	mov	r3, r7
 80102e8:	4628      	mov	r0, r5
 80102ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102ee:	f000 b817 	b.w	8010320 <_write_r>

080102f2 <__sseek>:
 80102f2:	b510      	push	{r4, lr}
 80102f4:	460c      	mov	r4, r1
 80102f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102fa:	f000 f885 	bl	8010408 <_lseek_r>
 80102fe:	1c43      	adds	r3, r0, #1
 8010300:	89a3      	ldrh	r3, [r4, #12]
 8010302:	bf15      	itete	ne
 8010304:	6560      	strne	r0, [r4, #84]	; 0x54
 8010306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801030a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801030e:	81a3      	strheq	r3, [r4, #12]
 8010310:	bf18      	it	ne
 8010312:	81a3      	strhne	r3, [r4, #12]
 8010314:	bd10      	pop	{r4, pc}

08010316 <__sclose>:
 8010316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801031a:	f000 b831 	b.w	8010380 <_close_r>
	...

08010320 <_write_r>:
 8010320:	b538      	push	{r3, r4, r5, lr}
 8010322:	4d07      	ldr	r5, [pc, #28]	; (8010340 <_write_r+0x20>)
 8010324:	4604      	mov	r4, r0
 8010326:	4608      	mov	r0, r1
 8010328:	4611      	mov	r1, r2
 801032a:	2200      	movs	r2, #0
 801032c:	602a      	str	r2, [r5, #0]
 801032e:	461a      	mov	r2, r3
 8010330:	f7f2 f838 	bl	80023a4 <_write>
 8010334:	1c43      	adds	r3, r0, #1
 8010336:	d102      	bne.n	801033e <_write_r+0x1e>
 8010338:	682b      	ldr	r3, [r5, #0]
 801033a:	b103      	cbz	r3, 801033e <_write_r+0x1e>
 801033c:	6023      	str	r3, [r4, #0]
 801033e:	bd38      	pop	{r3, r4, r5, pc}
 8010340:	20002398 	.word	0x20002398

08010344 <__assert_func>:
 8010344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010346:	4614      	mov	r4, r2
 8010348:	461a      	mov	r2, r3
 801034a:	4b09      	ldr	r3, [pc, #36]	; (8010370 <__assert_func+0x2c>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	4605      	mov	r5, r0
 8010350:	68d8      	ldr	r0, [r3, #12]
 8010352:	b14c      	cbz	r4, 8010368 <__assert_func+0x24>
 8010354:	4b07      	ldr	r3, [pc, #28]	; (8010374 <__assert_func+0x30>)
 8010356:	9100      	str	r1, [sp, #0]
 8010358:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801035c:	4906      	ldr	r1, [pc, #24]	; (8010378 <__assert_func+0x34>)
 801035e:	462b      	mov	r3, r5
 8010360:	f000 f81e 	bl	80103a0 <fiprintf>
 8010364:	f000 f8b5 	bl	80104d2 <abort>
 8010368:	4b04      	ldr	r3, [pc, #16]	; (801037c <__assert_func+0x38>)
 801036a:	461c      	mov	r4, r3
 801036c:	e7f3      	b.n	8010356 <__assert_func+0x12>
 801036e:	bf00      	nop
 8010370:	200009bc 	.word	0x200009bc
 8010374:	0801cbe5 	.word	0x0801cbe5
 8010378:	0801cbf2 	.word	0x0801cbf2
 801037c:	0801cc20 	.word	0x0801cc20

08010380 <_close_r>:
 8010380:	b538      	push	{r3, r4, r5, lr}
 8010382:	4d06      	ldr	r5, [pc, #24]	; (801039c <_close_r+0x1c>)
 8010384:	2300      	movs	r3, #0
 8010386:	4604      	mov	r4, r0
 8010388:	4608      	mov	r0, r1
 801038a:	602b      	str	r3, [r5, #0]
 801038c:	f000 faa4 	bl	80108d8 <_close>
 8010390:	1c43      	adds	r3, r0, #1
 8010392:	d102      	bne.n	801039a <_close_r+0x1a>
 8010394:	682b      	ldr	r3, [r5, #0]
 8010396:	b103      	cbz	r3, 801039a <_close_r+0x1a>
 8010398:	6023      	str	r3, [r4, #0]
 801039a:	bd38      	pop	{r3, r4, r5, pc}
 801039c:	20002398 	.word	0x20002398

080103a0 <fiprintf>:
 80103a0:	b40e      	push	{r1, r2, r3}
 80103a2:	b503      	push	{r0, r1, lr}
 80103a4:	4601      	mov	r1, r0
 80103a6:	ab03      	add	r3, sp, #12
 80103a8:	4805      	ldr	r0, [pc, #20]	; (80103c0 <fiprintf+0x20>)
 80103aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80103ae:	6800      	ldr	r0, [r0, #0]
 80103b0:	9301      	str	r3, [sp, #4]
 80103b2:	f7ff fe41 	bl	8010038 <_vfiprintf_r>
 80103b6:	b002      	add	sp, #8
 80103b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80103bc:	b003      	add	sp, #12
 80103be:	4770      	bx	lr
 80103c0:	200009bc 	.word	0x200009bc

080103c4 <_fstat_r>:
 80103c4:	b538      	push	{r3, r4, r5, lr}
 80103c6:	4d07      	ldr	r5, [pc, #28]	; (80103e4 <_fstat_r+0x20>)
 80103c8:	2300      	movs	r3, #0
 80103ca:	4604      	mov	r4, r0
 80103cc:	4608      	mov	r0, r1
 80103ce:	4611      	mov	r1, r2
 80103d0:	602b      	str	r3, [r5, #0]
 80103d2:	f000 fa89 	bl	80108e8 <_fstat>
 80103d6:	1c43      	adds	r3, r0, #1
 80103d8:	d102      	bne.n	80103e0 <_fstat_r+0x1c>
 80103da:	682b      	ldr	r3, [r5, #0]
 80103dc:	b103      	cbz	r3, 80103e0 <_fstat_r+0x1c>
 80103de:	6023      	str	r3, [r4, #0]
 80103e0:	bd38      	pop	{r3, r4, r5, pc}
 80103e2:	bf00      	nop
 80103e4:	20002398 	.word	0x20002398

080103e8 <_isatty_r>:
 80103e8:	b538      	push	{r3, r4, r5, lr}
 80103ea:	4d06      	ldr	r5, [pc, #24]	; (8010404 <_isatty_r+0x1c>)
 80103ec:	2300      	movs	r3, #0
 80103ee:	4604      	mov	r4, r0
 80103f0:	4608      	mov	r0, r1
 80103f2:	602b      	str	r3, [r5, #0]
 80103f4:	f000 fa88 	bl	8010908 <_isatty>
 80103f8:	1c43      	adds	r3, r0, #1
 80103fa:	d102      	bne.n	8010402 <_isatty_r+0x1a>
 80103fc:	682b      	ldr	r3, [r5, #0]
 80103fe:	b103      	cbz	r3, 8010402 <_isatty_r+0x1a>
 8010400:	6023      	str	r3, [r4, #0]
 8010402:	bd38      	pop	{r3, r4, r5, pc}
 8010404:	20002398 	.word	0x20002398

08010408 <_lseek_r>:
 8010408:	b538      	push	{r3, r4, r5, lr}
 801040a:	4d07      	ldr	r5, [pc, #28]	; (8010428 <_lseek_r+0x20>)
 801040c:	4604      	mov	r4, r0
 801040e:	4608      	mov	r0, r1
 8010410:	4611      	mov	r1, r2
 8010412:	2200      	movs	r2, #0
 8010414:	602a      	str	r2, [r5, #0]
 8010416:	461a      	mov	r2, r3
 8010418:	f000 fa86 	bl	8010928 <_lseek>
 801041c:	1c43      	adds	r3, r0, #1
 801041e:	d102      	bne.n	8010426 <_lseek_r+0x1e>
 8010420:	682b      	ldr	r3, [r5, #0]
 8010422:	b103      	cbz	r3, 8010426 <_lseek_r+0x1e>
 8010424:	6023      	str	r3, [r4, #0]
 8010426:	bd38      	pop	{r3, r4, r5, pc}
 8010428:	20002398 	.word	0x20002398

0801042c <__ascii_mbtowc>:
 801042c:	b082      	sub	sp, #8
 801042e:	b901      	cbnz	r1, 8010432 <__ascii_mbtowc+0x6>
 8010430:	a901      	add	r1, sp, #4
 8010432:	b142      	cbz	r2, 8010446 <__ascii_mbtowc+0x1a>
 8010434:	b14b      	cbz	r3, 801044a <__ascii_mbtowc+0x1e>
 8010436:	7813      	ldrb	r3, [r2, #0]
 8010438:	600b      	str	r3, [r1, #0]
 801043a:	7812      	ldrb	r2, [r2, #0]
 801043c:	1e10      	subs	r0, r2, #0
 801043e:	bf18      	it	ne
 8010440:	2001      	movne	r0, #1
 8010442:	b002      	add	sp, #8
 8010444:	4770      	bx	lr
 8010446:	4610      	mov	r0, r2
 8010448:	e7fb      	b.n	8010442 <__ascii_mbtowc+0x16>
 801044a:	f06f 0001 	mvn.w	r0, #1
 801044e:	e7f8      	b.n	8010442 <__ascii_mbtowc+0x16>

08010450 <memmove>:
 8010450:	4288      	cmp	r0, r1
 8010452:	b510      	push	{r4, lr}
 8010454:	eb01 0402 	add.w	r4, r1, r2
 8010458:	d902      	bls.n	8010460 <memmove+0x10>
 801045a:	4284      	cmp	r4, r0
 801045c:	4623      	mov	r3, r4
 801045e:	d807      	bhi.n	8010470 <memmove+0x20>
 8010460:	1e43      	subs	r3, r0, #1
 8010462:	42a1      	cmp	r1, r4
 8010464:	d008      	beq.n	8010478 <memmove+0x28>
 8010466:	f811 2b01 	ldrb.w	r2, [r1], #1
 801046a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801046e:	e7f8      	b.n	8010462 <memmove+0x12>
 8010470:	4402      	add	r2, r0
 8010472:	4601      	mov	r1, r0
 8010474:	428a      	cmp	r2, r1
 8010476:	d100      	bne.n	801047a <memmove+0x2a>
 8010478:	bd10      	pop	{r4, pc}
 801047a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801047e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010482:	e7f7      	b.n	8010474 <memmove+0x24>

08010484 <_malloc_usable_size_r>:
 8010484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010488:	1f18      	subs	r0, r3, #4
 801048a:	2b00      	cmp	r3, #0
 801048c:	bfbc      	itt	lt
 801048e:	580b      	ldrlt	r3, [r1, r0]
 8010490:	18c0      	addlt	r0, r0, r3
 8010492:	4770      	bx	lr

08010494 <_read_r>:
 8010494:	b538      	push	{r3, r4, r5, lr}
 8010496:	4d07      	ldr	r5, [pc, #28]	; (80104b4 <_read_r+0x20>)
 8010498:	4604      	mov	r4, r0
 801049a:	4608      	mov	r0, r1
 801049c:	4611      	mov	r1, r2
 801049e:	2200      	movs	r2, #0
 80104a0:	602a      	str	r2, [r5, #0]
 80104a2:	461a      	mov	r2, r3
 80104a4:	f000 fa48 	bl	8010938 <_read>
 80104a8:	1c43      	adds	r3, r0, #1
 80104aa:	d102      	bne.n	80104b2 <_read_r+0x1e>
 80104ac:	682b      	ldr	r3, [r5, #0]
 80104ae:	b103      	cbz	r3, 80104b2 <_read_r+0x1e>
 80104b0:	6023      	str	r3, [r4, #0]
 80104b2:	bd38      	pop	{r3, r4, r5, pc}
 80104b4:	20002398 	.word	0x20002398

080104b8 <__ascii_wctomb>:
 80104b8:	b149      	cbz	r1, 80104ce <__ascii_wctomb+0x16>
 80104ba:	2aff      	cmp	r2, #255	; 0xff
 80104bc:	bf85      	ittet	hi
 80104be:	238a      	movhi	r3, #138	; 0x8a
 80104c0:	6003      	strhi	r3, [r0, #0]
 80104c2:	700a      	strbls	r2, [r1, #0]
 80104c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80104c8:	bf98      	it	ls
 80104ca:	2001      	movls	r0, #1
 80104cc:	4770      	bx	lr
 80104ce:	4608      	mov	r0, r1
 80104d0:	4770      	bx	lr

080104d2 <abort>:
 80104d2:	b508      	push	{r3, lr}
 80104d4:	2006      	movs	r0, #6
 80104d6:	f000 f82b 	bl	8010530 <raise>
 80104da:	2001      	movs	r0, #1
 80104dc:	f000 fa34 	bl	8010948 <_exit>

080104e0 <_raise_r>:
 80104e0:	291f      	cmp	r1, #31
 80104e2:	b538      	push	{r3, r4, r5, lr}
 80104e4:	4604      	mov	r4, r0
 80104e6:	460d      	mov	r5, r1
 80104e8:	d904      	bls.n	80104f4 <_raise_r+0x14>
 80104ea:	2316      	movs	r3, #22
 80104ec:	6003      	str	r3, [r0, #0]
 80104ee:	f04f 30ff 	mov.w	r0, #4294967295
 80104f2:	bd38      	pop	{r3, r4, r5, pc}
 80104f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80104f6:	b112      	cbz	r2, 80104fe <_raise_r+0x1e>
 80104f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80104fc:	b94b      	cbnz	r3, 8010512 <_raise_r+0x32>
 80104fe:	4620      	mov	r0, r4
 8010500:	f000 f830 	bl	8010564 <_getpid_r>
 8010504:	462a      	mov	r2, r5
 8010506:	4601      	mov	r1, r0
 8010508:	4620      	mov	r0, r4
 801050a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801050e:	f000 b817 	b.w	8010540 <_kill_r>
 8010512:	2b01      	cmp	r3, #1
 8010514:	d00a      	beq.n	801052c <_raise_r+0x4c>
 8010516:	1c59      	adds	r1, r3, #1
 8010518:	d103      	bne.n	8010522 <_raise_r+0x42>
 801051a:	2316      	movs	r3, #22
 801051c:	6003      	str	r3, [r0, #0]
 801051e:	2001      	movs	r0, #1
 8010520:	e7e7      	b.n	80104f2 <_raise_r+0x12>
 8010522:	2400      	movs	r4, #0
 8010524:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010528:	4628      	mov	r0, r5
 801052a:	4798      	blx	r3
 801052c:	2000      	movs	r0, #0
 801052e:	e7e0      	b.n	80104f2 <_raise_r+0x12>

08010530 <raise>:
 8010530:	4b02      	ldr	r3, [pc, #8]	; (801053c <raise+0xc>)
 8010532:	4601      	mov	r1, r0
 8010534:	6818      	ldr	r0, [r3, #0]
 8010536:	f7ff bfd3 	b.w	80104e0 <_raise_r>
 801053a:	bf00      	nop
 801053c:	200009bc 	.word	0x200009bc

08010540 <_kill_r>:
 8010540:	b538      	push	{r3, r4, r5, lr}
 8010542:	4d07      	ldr	r5, [pc, #28]	; (8010560 <_kill_r+0x20>)
 8010544:	2300      	movs	r3, #0
 8010546:	4604      	mov	r4, r0
 8010548:	4608      	mov	r0, r1
 801054a:	4611      	mov	r1, r2
 801054c:	602b      	str	r3, [r5, #0]
 801054e:	f000 f9e3 	bl	8010918 <_kill>
 8010552:	1c43      	adds	r3, r0, #1
 8010554:	d102      	bne.n	801055c <_kill_r+0x1c>
 8010556:	682b      	ldr	r3, [r5, #0]
 8010558:	b103      	cbz	r3, 801055c <_kill_r+0x1c>
 801055a:	6023      	str	r3, [r4, #0]
 801055c:	bd38      	pop	{r3, r4, r5, pc}
 801055e:	bf00      	nop
 8010560:	20002398 	.word	0x20002398

08010564 <_getpid_r>:
 8010564:	f000 b9c8 	b.w	80108f8 <_getpid>

08010568 <ceil>:
 8010568:	ec51 0b10 	vmov	r0, r1, d0
 801056c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010570:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010574:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010578:	2e13      	cmp	r6, #19
 801057a:	ee10 5a10 	vmov	r5, s0
 801057e:	ee10 8a10 	vmov	r8, s0
 8010582:	460c      	mov	r4, r1
 8010584:	dc30      	bgt.n	80105e8 <ceil+0x80>
 8010586:	2e00      	cmp	r6, #0
 8010588:	da12      	bge.n	80105b0 <ceil+0x48>
 801058a:	a335      	add	r3, pc, #212	; (adr r3, 8010660 <ceil+0xf8>)
 801058c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010590:	f7ef fe7c 	bl	800028c <__adddf3>
 8010594:	2200      	movs	r2, #0
 8010596:	2300      	movs	r3, #0
 8010598:	f7f0 fabe 	bl	8000b18 <__aeabi_dcmpgt>
 801059c:	b128      	cbz	r0, 80105aa <ceil+0x42>
 801059e:	2c00      	cmp	r4, #0
 80105a0:	db55      	blt.n	801064e <ceil+0xe6>
 80105a2:	432c      	orrs	r4, r5
 80105a4:	d057      	beq.n	8010656 <ceil+0xee>
 80105a6:	4c30      	ldr	r4, [pc, #192]	; (8010668 <ceil+0x100>)
 80105a8:	2500      	movs	r5, #0
 80105aa:	4621      	mov	r1, r4
 80105ac:	4628      	mov	r0, r5
 80105ae:	e025      	b.n	80105fc <ceil+0x94>
 80105b0:	4f2e      	ldr	r7, [pc, #184]	; (801066c <ceil+0x104>)
 80105b2:	4137      	asrs	r7, r6
 80105b4:	ea01 0307 	and.w	r3, r1, r7
 80105b8:	4303      	orrs	r3, r0
 80105ba:	d01f      	beq.n	80105fc <ceil+0x94>
 80105bc:	a328      	add	r3, pc, #160	; (adr r3, 8010660 <ceil+0xf8>)
 80105be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c2:	f7ef fe63 	bl	800028c <__adddf3>
 80105c6:	2200      	movs	r2, #0
 80105c8:	2300      	movs	r3, #0
 80105ca:	f7f0 faa5 	bl	8000b18 <__aeabi_dcmpgt>
 80105ce:	2800      	cmp	r0, #0
 80105d0:	d0eb      	beq.n	80105aa <ceil+0x42>
 80105d2:	2c00      	cmp	r4, #0
 80105d4:	bfc2      	ittt	gt
 80105d6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80105da:	fa43 f606 	asrgt.w	r6, r3, r6
 80105de:	19a4      	addgt	r4, r4, r6
 80105e0:	ea24 0407 	bic.w	r4, r4, r7
 80105e4:	2500      	movs	r5, #0
 80105e6:	e7e0      	b.n	80105aa <ceil+0x42>
 80105e8:	2e33      	cmp	r6, #51	; 0x33
 80105ea:	dd0b      	ble.n	8010604 <ceil+0x9c>
 80105ec:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80105f0:	d104      	bne.n	80105fc <ceil+0x94>
 80105f2:	ee10 2a10 	vmov	r2, s0
 80105f6:	460b      	mov	r3, r1
 80105f8:	f7ef fe48 	bl	800028c <__adddf3>
 80105fc:	ec41 0b10 	vmov	d0, r0, r1
 8010600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010604:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010608:	f04f 33ff 	mov.w	r3, #4294967295
 801060c:	fa23 f707 	lsr.w	r7, r3, r7
 8010610:	4207      	tst	r7, r0
 8010612:	d0f3      	beq.n	80105fc <ceil+0x94>
 8010614:	a312      	add	r3, pc, #72	; (adr r3, 8010660 <ceil+0xf8>)
 8010616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061a:	f7ef fe37 	bl	800028c <__adddf3>
 801061e:	2200      	movs	r2, #0
 8010620:	2300      	movs	r3, #0
 8010622:	f7f0 fa79 	bl	8000b18 <__aeabi_dcmpgt>
 8010626:	2800      	cmp	r0, #0
 8010628:	d0bf      	beq.n	80105aa <ceil+0x42>
 801062a:	2c00      	cmp	r4, #0
 801062c:	dd02      	ble.n	8010634 <ceil+0xcc>
 801062e:	2e14      	cmp	r6, #20
 8010630:	d103      	bne.n	801063a <ceil+0xd2>
 8010632:	3401      	adds	r4, #1
 8010634:	ea25 0507 	bic.w	r5, r5, r7
 8010638:	e7b7      	b.n	80105aa <ceil+0x42>
 801063a:	2301      	movs	r3, #1
 801063c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010640:	fa03 f606 	lsl.w	r6, r3, r6
 8010644:	4435      	add	r5, r6
 8010646:	4545      	cmp	r5, r8
 8010648:	bf38      	it	cc
 801064a:	18e4      	addcc	r4, r4, r3
 801064c:	e7f2      	b.n	8010634 <ceil+0xcc>
 801064e:	2500      	movs	r5, #0
 8010650:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010654:	e7a9      	b.n	80105aa <ceil+0x42>
 8010656:	4625      	mov	r5, r4
 8010658:	e7a7      	b.n	80105aa <ceil+0x42>
 801065a:	bf00      	nop
 801065c:	f3af 8000 	nop.w
 8010660:	8800759c 	.word	0x8800759c
 8010664:	7e37e43c 	.word	0x7e37e43c
 8010668:	3ff00000 	.word	0x3ff00000
 801066c:	000fffff 	.word	0x000fffff

08010670 <expf>:
 8010670:	b508      	push	{r3, lr}
 8010672:	ed2d 8b02 	vpush	{d8}
 8010676:	eef0 8a40 	vmov.f32	s17, s0
 801067a:	f000 f82f 	bl	80106dc <__ieee754_expf>
 801067e:	eeb0 8a40 	vmov.f32	s16, s0
 8010682:	eeb0 0a68 	vmov.f32	s0, s17
 8010686:	f000 f919 	bl	80108bc <finitef>
 801068a:	b160      	cbz	r0, 80106a6 <expf+0x36>
 801068c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80106cc <expf+0x5c>
 8010690:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010698:	dd0a      	ble.n	80106b0 <expf+0x40>
 801069a:	f7fc ffa1 	bl	800d5e0 <__errno>
 801069e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80106d0 <expf+0x60>
 80106a2:	2322      	movs	r3, #34	; 0x22
 80106a4:	6003      	str	r3, [r0, #0]
 80106a6:	eeb0 0a48 	vmov.f32	s0, s16
 80106aa:	ecbd 8b02 	vpop	{d8}
 80106ae:	bd08      	pop	{r3, pc}
 80106b0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80106d4 <expf+0x64>
 80106b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80106b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106bc:	d5f3      	bpl.n	80106a6 <expf+0x36>
 80106be:	f7fc ff8f 	bl	800d5e0 <__errno>
 80106c2:	2322      	movs	r3, #34	; 0x22
 80106c4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80106d8 <expf+0x68>
 80106c8:	6003      	str	r3, [r0, #0]
 80106ca:	e7ec      	b.n	80106a6 <expf+0x36>
 80106cc:	42b17180 	.word	0x42b17180
 80106d0:	7f800000 	.word	0x7f800000
 80106d4:	c2cff1b5 	.word	0xc2cff1b5
 80106d8:	00000000 	.word	0x00000000

080106dc <__ieee754_expf>:
 80106dc:	ee10 2a10 	vmov	r2, s0
 80106e0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80106e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80106e8:	d902      	bls.n	80106f0 <__ieee754_expf+0x14>
 80106ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80106ee:	4770      	bx	lr
 80106f0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80106f4:	d106      	bne.n	8010704 <__ieee754_expf+0x28>
 80106f6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8010830 <__ieee754_expf+0x154>
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	bf18      	it	ne
 80106fe:	eeb0 0a67 	vmovne.f32	s0, s15
 8010702:	4770      	bx	lr
 8010704:	484b      	ldr	r0, [pc, #300]	; (8010834 <__ieee754_expf+0x158>)
 8010706:	4282      	cmp	r2, r0
 8010708:	dd02      	ble.n	8010710 <__ieee754_expf+0x34>
 801070a:	2000      	movs	r0, #0
 801070c:	f000 b8d0 	b.w	80108b0 <__math_oflowf>
 8010710:	2a00      	cmp	r2, #0
 8010712:	da05      	bge.n	8010720 <__ieee754_expf+0x44>
 8010714:	4a48      	ldr	r2, [pc, #288]	; (8010838 <__ieee754_expf+0x15c>)
 8010716:	4291      	cmp	r1, r2
 8010718:	d902      	bls.n	8010720 <__ieee754_expf+0x44>
 801071a:	2000      	movs	r0, #0
 801071c:	f000 b8c2 	b.w	80108a4 <__math_uflowf>
 8010720:	4a46      	ldr	r2, [pc, #280]	; (801083c <__ieee754_expf+0x160>)
 8010722:	4291      	cmp	r1, r2
 8010724:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8010728:	d952      	bls.n	80107d0 <__ieee754_expf+0xf4>
 801072a:	4a45      	ldr	r2, [pc, #276]	; (8010840 <__ieee754_expf+0x164>)
 801072c:	4291      	cmp	r1, r2
 801072e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8010732:	d834      	bhi.n	801079e <__ieee754_expf+0xc2>
 8010734:	4943      	ldr	r1, [pc, #268]	; (8010844 <__ieee754_expf+0x168>)
 8010736:	4411      	add	r1, r2
 8010738:	ed91 7a00 	vldr	s14, [r1]
 801073c:	4942      	ldr	r1, [pc, #264]	; (8010848 <__ieee754_expf+0x16c>)
 801073e:	440a      	add	r2, r1
 8010740:	edd2 7a00 	vldr	s15, [r2]
 8010744:	ee30 7a47 	vsub.f32	s14, s0, s14
 8010748:	f1c3 0201 	rsb	r2, r3, #1
 801074c:	1ad2      	subs	r2, r2, r3
 801074e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8010752:	ee20 6a00 	vmul.f32	s12, s0, s0
 8010756:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801084c <__ieee754_expf+0x170>
 801075a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010850 <__ieee754_expf+0x174>
 801075e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8010762:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8010854 <__ieee754_expf+0x178>
 8010766:	eea6 5a86 	vfma.f32	s10, s13, s12
 801076a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8010858 <__ieee754_expf+0x17c>
 801076e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8010772:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801085c <__ieee754_expf+0x180>
 8010776:	eea6 5a86 	vfma.f32	s10, s13, s12
 801077a:	eef0 6a40 	vmov.f32	s13, s0
 801077e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8010782:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8010786:	ee20 5a26 	vmul.f32	s10, s0, s13
 801078a:	bb92      	cbnz	r2, 80107f2 <__ieee754_expf+0x116>
 801078c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8010790:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8010794:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010798:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801079c:	4770      	bx	lr
 801079e:	4b30      	ldr	r3, [pc, #192]	; (8010860 <__ieee754_expf+0x184>)
 80107a0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8010864 <__ieee754_expf+0x188>
 80107a4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8010868 <__ieee754_expf+0x18c>
 80107a8:	4413      	add	r3, r2
 80107aa:	edd3 7a00 	vldr	s15, [r3]
 80107ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 80107b2:	eeb0 7a40 	vmov.f32	s14, s0
 80107b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80107ba:	ee17 2a90 	vmov	r2, s15
 80107be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107c2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80107c6:	eddf 6a29 	vldr	s13, [pc, #164]	; 801086c <__ieee754_expf+0x190>
 80107ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80107ce:	e7be      	b.n	801074e <__ieee754_expf+0x72>
 80107d0:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 80107d4:	d20b      	bcs.n	80107ee <__ieee754_expf+0x112>
 80107d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010870 <__ieee754_expf+0x194>
 80107da:	ee70 6a26 	vadd.f32	s13, s0, s13
 80107de:	eef4 6ae5 	vcmpe.f32	s13, s11
 80107e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e6:	dd02      	ble.n	80107ee <__ieee754_expf+0x112>
 80107e8:	ee30 0a25 	vadd.f32	s0, s0, s11
 80107ec:	4770      	bx	lr
 80107ee:	2200      	movs	r2, #0
 80107f0:	e7af      	b.n	8010752 <__ieee754_expf+0x76>
 80107f2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80107f6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80107fa:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80107fe:	bfb8      	it	lt
 8010800:	3264      	addlt	r2, #100	; 0x64
 8010802:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010806:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801080a:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801080e:	ee17 3a90 	vmov	r3, s15
 8010812:	bfab      	itete	ge
 8010814:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8010818:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801081c:	ee00 3a10 	vmovge	s0, r3
 8010820:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8010874 <__ieee754_expf+0x198>
 8010824:	bfbc      	itt	lt
 8010826:	ee00 3a10 	vmovlt	s0, r3
 801082a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801082e:	4770      	bx	lr
 8010830:	00000000 	.word	0x00000000
 8010834:	42b17217 	.word	0x42b17217
 8010838:	42cff1b5 	.word	0x42cff1b5
 801083c:	3eb17218 	.word	0x3eb17218
 8010840:	3f851591 	.word	0x3f851591
 8010844:	0801cd34 	.word	0x0801cd34
 8010848:	0801cd3c 	.word	0x0801cd3c
 801084c:	3331bb4c 	.word	0x3331bb4c
 8010850:	b5ddea0e 	.word	0xb5ddea0e
 8010854:	388ab355 	.word	0x388ab355
 8010858:	bb360b61 	.word	0xbb360b61
 801085c:	3e2aaaab 	.word	0x3e2aaaab
 8010860:	0801cd2c 	.word	0x0801cd2c
 8010864:	3fb8aa3b 	.word	0x3fb8aa3b
 8010868:	3f317180 	.word	0x3f317180
 801086c:	3717f7d1 	.word	0x3717f7d1
 8010870:	7149f2ca 	.word	0x7149f2ca
 8010874:	0d800000 	.word	0x0d800000

08010878 <with_errnof>:
 8010878:	b513      	push	{r0, r1, r4, lr}
 801087a:	4604      	mov	r4, r0
 801087c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010880:	f7fc feae 	bl	800d5e0 <__errno>
 8010884:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010888:	6004      	str	r4, [r0, #0]
 801088a:	b002      	add	sp, #8
 801088c:	bd10      	pop	{r4, pc}

0801088e <xflowf>:
 801088e:	b130      	cbz	r0, 801089e <xflowf+0x10>
 8010890:	eef1 7a40 	vneg.f32	s15, s0
 8010894:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010898:	2022      	movs	r0, #34	; 0x22
 801089a:	f7ff bfed 	b.w	8010878 <with_errnof>
 801089e:	eef0 7a40 	vmov.f32	s15, s0
 80108a2:	e7f7      	b.n	8010894 <xflowf+0x6>

080108a4 <__math_uflowf>:
 80108a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80108ac <__math_uflowf+0x8>
 80108a8:	f7ff bff1 	b.w	801088e <xflowf>
 80108ac:	10000000 	.word	0x10000000

080108b0 <__math_oflowf>:
 80108b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80108b8 <__math_oflowf+0x8>
 80108b4:	f7ff bfeb 	b.w	801088e <xflowf>
 80108b8:	70000000 	.word	0x70000000

080108bc <finitef>:
 80108bc:	b082      	sub	sp, #8
 80108be:	ed8d 0a01 	vstr	s0, [sp, #4]
 80108c2:	9801      	ldr	r0, [sp, #4]
 80108c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80108c8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80108cc:	bfac      	ite	ge
 80108ce:	2000      	movge	r0, #0
 80108d0:	2001      	movlt	r0, #1
 80108d2:	b002      	add	sp, #8
 80108d4:	4770      	bx	lr
	...

080108d8 <_close>:
 80108d8:	4b02      	ldr	r3, [pc, #8]	; (80108e4 <_close+0xc>)
 80108da:	2258      	movs	r2, #88	; 0x58
 80108dc:	601a      	str	r2, [r3, #0]
 80108de:	f04f 30ff 	mov.w	r0, #4294967295
 80108e2:	4770      	bx	lr
 80108e4:	20002398 	.word	0x20002398

080108e8 <_fstat>:
 80108e8:	4b02      	ldr	r3, [pc, #8]	; (80108f4 <_fstat+0xc>)
 80108ea:	2258      	movs	r2, #88	; 0x58
 80108ec:	601a      	str	r2, [r3, #0]
 80108ee:	f04f 30ff 	mov.w	r0, #4294967295
 80108f2:	4770      	bx	lr
 80108f4:	20002398 	.word	0x20002398

080108f8 <_getpid>:
 80108f8:	4b02      	ldr	r3, [pc, #8]	; (8010904 <_getpid+0xc>)
 80108fa:	2258      	movs	r2, #88	; 0x58
 80108fc:	601a      	str	r2, [r3, #0]
 80108fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010902:	4770      	bx	lr
 8010904:	20002398 	.word	0x20002398

08010908 <_isatty>:
 8010908:	4b02      	ldr	r3, [pc, #8]	; (8010914 <_isatty+0xc>)
 801090a:	2258      	movs	r2, #88	; 0x58
 801090c:	601a      	str	r2, [r3, #0]
 801090e:	2000      	movs	r0, #0
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	20002398 	.word	0x20002398

08010918 <_kill>:
 8010918:	4b02      	ldr	r3, [pc, #8]	; (8010924 <_kill+0xc>)
 801091a:	2258      	movs	r2, #88	; 0x58
 801091c:	601a      	str	r2, [r3, #0]
 801091e:	f04f 30ff 	mov.w	r0, #4294967295
 8010922:	4770      	bx	lr
 8010924:	20002398 	.word	0x20002398

08010928 <_lseek>:
 8010928:	4b02      	ldr	r3, [pc, #8]	; (8010934 <_lseek+0xc>)
 801092a:	2258      	movs	r2, #88	; 0x58
 801092c:	601a      	str	r2, [r3, #0]
 801092e:	f04f 30ff 	mov.w	r0, #4294967295
 8010932:	4770      	bx	lr
 8010934:	20002398 	.word	0x20002398

08010938 <_read>:
 8010938:	4b02      	ldr	r3, [pc, #8]	; (8010944 <_read+0xc>)
 801093a:	2258      	movs	r2, #88	; 0x58
 801093c:	601a      	str	r2, [r3, #0]
 801093e:	f04f 30ff 	mov.w	r0, #4294967295
 8010942:	4770      	bx	lr
 8010944:	20002398 	.word	0x20002398

08010948 <_exit>:
 8010948:	e7fe      	b.n	8010948 <_exit>
	...

0801094c <_init>:
 801094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801094e:	bf00      	nop
 8010950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010952:	bc08      	pop	{r3}
 8010954:	469e      	mov	lr, r3
 8010956:	4770      	bx	lr

08010958 <_fini>:
 8010958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801095a:	bf00      	nop
 801095c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801095e:	bc08      	pop	{r3}
 8010960:	469e      	mov	lr, r3
 8010962:	4770      	bx	lr
